<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PhpStorm配置Apache与php的运行环境详细教程</title>
      <link href="/posts/384e.html"/>
      <url>/posts/384e.html</url>
      
        <content type="html"><![CDATA[<p>本文主要说明如何在phpstorm中配置已经安装好的PHP与apache。</p><h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><p>首先需要在本地安装php，这里我安装的是phpstudy</p><ol><li>进入PHPstorm的界面点击file 下的settings</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214322.png"></p><ol start="2"><li>在Languages&amp;Frameworks中的PHP</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214400.png"></p><ol start="3"><li>找到安装php的路径，选择php.exe文件</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214411.png"><br>可以看到 CLI Interpreter里可以使用PHP5.6.9了</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214424.png"></p><ol start="4"><li>选择自己安装的版本号即可</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214857.png"></p><ol start="5"><li>在右上方的tools，deployment中 配置服务器信息 </li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214908.png"></p><ol start="6"><li>在这里添加Apache服务器</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214921.png"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214944.png"><br>Folder目录中填写的是apache服务器会扫描项目的根目录， Web server root URL为访问的url路径</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215007.png"><br>并修改自己的网站目录，同时也可以修改端口号</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215013.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Apache </tag>
            
            <tag> PhpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linxu系统安装PHP详细教程</title>
      <link href="/posts/3772.html"/>
      <url>/posts/3772.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装centos源"><a href="#安装centos源" class="headerlink" title="安装centos源"></a>安装centos源</h2><p><code>yum install epel-release –y</code></p><h2 id="下载php安装压缩包"><a href="#下载php安装压缩包" class="headerlink" title="下载php安装压缩包"></a>下载php安装压缩包</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212322.png"><br>wget <a href="https://www.php.net/distributions/php-7.3.15.tar.gz">https://www.php.net/distributions/php-7.3.15.tar.gz</a></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212336.png"><br>解压 tar xf php-7.3.15.tar.gz</p><p>进入php-7.3.15文件目录</p><h2 id="安装php依赖"><a href="#安装php依赖" class="headerlink" title="安装php依赖"></a>安装php依赖</h2><pre class=" language-java"><code class="language-java">yum install gcc \              gcc<span class="token operator">-</span>c<span class="token operator">++</span> \              libxml2 \              libxml2<span class="token operator">-</span>devel \              openssl \              openssl<span class="token operator">-</span>devel \              libcurl \              libcurl<span class="token operator">-</span>devel \              freetype \              freetype<span class="token operator">-</span>devel \              libjpeg \              libjpeg<span class="token operator">-</span>devel \              libpng \              libpng<span class="token operator">-</span>devel \              libxslt \              libxslt<span class="token operator">-</span>devel \              systemd<span class="token operator">-</span>devel \              libicu<span class="token operator">-</span>devel \              libedit<span class="token operator">-</span>devel</code></pre><h2 id="安装cmake3"><a href="#安装cmake3" class="headerlink" title="安装cmake3"></a>安装cmake3</h2><p>yum install cmake3 –y</p><p>拷贝一份，重命名为cmake</p><p>cp /usr/bin/cmake3 /usr/bin/cmake</p><p>查看cmake是否为3.0以上版本</p><p>cmake –version</p><h2 id="安装libzip1-5-2"><a href="#安装libzip1-5-2" class="headerlink" title="安装libzip1.5.2"></a>安装libzip1.5.2</h2><p>安装bzip2-devel依赖包</p><p>yum install bzip2 bzip2-devel -y</p><p>到官网下载libzip压缩包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212352.png"><br>wget <a href="https://libzip.org/download/libzip-1.6.1.tar.gz">https://libzip.org/download/libzip-1.6.1.tar.gz</a></p><p>解压进入libzip-1.6.1创建build目录</p><p>tar xf libzip-1.6.1.tar.gz </p><p>cd libzip-1.6.1</p><p>mkdir build</p><p>进入build目录里面执行cmake ..，make，make安装</p><p>cd build</p><p>cmake ..</p><p>make</p><p>make install</p><h2 id="创建www用户"><a href="#创建www用户" class="headerlink" title="创建www用户"></a>创建www用户</h2><p>useradd -M -s /sbin/nologin www</p><p>-M:不要自动建立用户的登入目录</p><p>-s 用户不能用作登录</p><p>Id www 查看</p><p>#修改库加载路径</p><p>vim /etc/ld.so.conf </p><p>#添加如下几行</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib64<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>usr<span class="token operator">/</span>lib64</code></pre><p>使之生效:</p><p>ldconfig -v</p><h2 id="进入php-7-3-15目录配置"><a href="#进入php-7-3-15目录配置" class="headerlink" title="进入php-7.3.15目录配置"></a>进入php-7.3.15目录配置</h2><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/configure <span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php \    <span class="token operator">--</span>with<span class="token operator">-</span>config<span class="token operator">-</span>file<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php<span class="token operator">/</span>etc \    <span class="token operator">--</span>with<span class="token operator">-</span>config<span class="token operator">-</span>file<span class="token operator">-</span>scan<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php<span class="token operator">/</span>etc<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \    <span class="token operator">--</span>disable<span class="token operator">-</span>cgi \    <span class="token operator">--</span>enable<span class="token operator">-</span>fpm \    <span class="token operator">--</span>with<span class="token operator">-</span>fpm<span class="token operator">-</span>user<span class="token operator">=</span>www \    <span class="token operator">--</span>with<span class="token operator">-</span>fpm<span class="token operator">-</span>group<span class="token operator">=</span>www \    <span class="token operator">--</span>enable<span class="token operator">-</span>ftp \    <span class="token operator">--</span>with<span class="token operator">-</span>curl \    <span class="token operator">--</span>with<span class="token operator">-</span>gd \    <span class="token operator">--</span>with<span class="token operator">-</span>gettext \    <span class="token operator">--</span>with<span class="token operator">-</span>iconv<span class="token operator">-</span>dir \    <span class="token operator">--</span>with<span class="token operator">-</span>kerberos \    <span class="token operator">--</span>with<span class="token operator">-</span>libedit \    <span class="token operator">--</span>with<span class="token operator">-</span>openssl \    <span class="token operator">--</span>with<span class="token operator">-</span>pcre<span class="token operator">-</span>regex \    <span class="token operator">--</span>with<span class="token operator">-</span>pdo<span class="token operator">-</span>mysql \    <span class="token operator">--</span>with<span class="token operator">-</span>xsl \    <span class="token operator">--</span>with<span class="token operator">-</span>zlib \    <span class="token operator">--</span>with<span class="token operator">-</span>mhash \    <span class="token operator">--</span>with<span class="token operator">-</span>mysqli \    <span class="token operator">--</span>with<span class="token operator">-</span>png<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib \    <span class="token operator">--</span>with<span class="token operator">-</span>jpeg<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib\    <span class="token operator">--</span>with<span class="token operator">-</span>freetype<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib \    <span class="token operator">--</span>enable<span class="token operator">-</span>mysqlnd \    <span class="token operator">--</span>enable<span class="token operator">-</span>bcmath \    <span class="token operator">--</span>enable<span class="token operator">-</span>libxml \    <span class="token operator">--</span>enable<span class="token operator">-</span>inline<span class="token operator">-</span>optimization \    <span class="token operator">--</span>enable<span class="token operator">-</span>gd<span class="token operator">-</span>jis<span class="token operator">-</span>conv \    <span class="token operator">--</span>enable<span class="token operator">-</span>mbregex \    <span class="token operator">--</span>enable<span class="token operator">-</span>mbstring \    <span class="token operator">--</span>enable<span class="token operator">-</span>opcache \    <span class="token operator">--</span>enable<span class="token operator">-</span>pcntl \    <span class="token operator">--</span>enable<span class="token operator">-</span>shmop \    <span class="token operator">--</span>enable<span class="token operator">-</span>soap \    <span class="token operator">--</span>enable<span class="token operator">-</span>sockets \    <span class="token operator">--</span>enable<span class="token operator">-</span>sysvsem \    <span class="token operator">--</span>enable<span class="token operator">-</span>xml \    <span class="token operator">--</span>enable<span class="token operator">-</span>zip \    <span class="token operator">--</span>enable<span class="token operator">-</span>calendar \    <span class="token operator">--</span>enable<span class="token operator">-</span>intl \    <span class="token operator">--</span>enable<span class="token operator">-</span>exif</code></pre><p>然后编译安装大概10分钟</p><p>make</p><p>make install</p><p>拷贝开发配置到安装目录</p><p>cp php.ini-development /usr/local/php/etc/php.ini</p><p>进入安装目录</p><p>cd /usr/local/php/etc/</p><p>复制一份配置文件</p><p>cp php-fpm.conf.default php-fpm.conf</p><p>拷贝启动脚本到指定目录</p><p>cp /root/php-7.3.15/sapi/fpm/php-fpm.service /usr/lib/systemd/system/</p><p>修改配置文件名</p><p>cd /usr/local/php/etc/php-fpm.d</p><p>cp <a href="http://www.conf.default/">www.conf.default</a> <a href="http://www.conf/">www.conf</a></p><h2 id="启动PHP"><a href="#启动PHP" class="headerlink" title="启动PHP"></a>启动PHP</h2><p>systemctl start php-fpm</p><p>允许自启</p><p>systemctl enable php-fpm</p><p>查看状态</p><p>systemctl status php-fpm</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212410.png"><br>查看进程</p><p>ps -ef|grep php-fpm</p><p>查看端口</p><p>ss -lntup|grep 9000</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux下安装nginx服务器详细教程</title>
      <link href="/posts/a7f9.html"/>
      <url>/posts/a7f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先安装centos的扩展源"><a href="#首先安装centos的扩展源" class="headerlink" title="首先安装centos的扩展源"></a>首先安装centos的扩展源</h2><p><code>yum install epel-release</code></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p><code>yum install nginx -y</code></p><p>查看版本号，开启nginx，查看进程<br><code>nginx –v</code><br><code>systemctl start nginx</code><br><code>ps -ef|grep nginx</code></p><p>设置开机启动</p><p><code>systemctl enable nginx</code></p><p>查看配置文件cd /ect/nginx</p><p>（安装vim查看命令yum install vim -y）</p><p><code>vim nginx.conf</code></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211436.png"><br>默认端口是80，网页内容在root  /usr/share/nginx/html;</p><p>浏览器输入ip即可进入nginx默认首页</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211456.png"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>进入nginx官网，下载最新版</p><p>wget <a href="http://nginx.org/download/nginx-1.17.8.tar.gz">http://nginx.org/download/nginx-1.17.8.tar.gz</a></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211510.png"><br>安装必要插件</p><p>yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</p><p>gcc 它可以编译 C,C++,Ada,Object C和Java等语言</p><p>pcre pcre-devel pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式，所以需要安装pcre库</p><p>zlib zlib-devel zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip</p><p>openssl openssl-devel openssl保证web通信</p><p>解压tar -zxvf nginx-1.17.8.tar.gz</p><p>进入到 nginx-1.17.8文件夹下面，制定安装路径</p><p>./configure –prefix=/software/nginx</p><p>编译make</p><p>安装make install</p><p>进入到安装nginx目录下面的sbin启动</p><p>./nginx</p><p>浏览器输入ip即可进入nginx默认首页</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211528.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java查表法实现十进制转化成其它进制</title>
      <link href="/posts/7a9c.html"/>
      <url>/posts/7a9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="进制转换原理"><a href="#进制转换原理" class="headerlink" title="进制转换原理"></a>进制转换原理</h2><p>首先了解十进制转化成二级制的原理</p><p>156的二进制为：<br> 156 % 2 = 78 …… 0<br>  83   % 2 = 39 …… 0<br> 39   % 2 = 19 …… 1<br> 19   % 2 = 9   …… 1<br> 9     % 2 = 4   …… 1<br> 4     % 2 = 2   …… 0<br> 2     % 2 = 1   …… 0<br> 1     % 2 = 0   …… 1           从下到上看即为 10011100</p><p>100111000转八进制实际上就是<br> 00-000-000-000-000-000-000-000-010-011-100<br> 倒数第一组数110 的十进制即：4<br> 倒数第二组数011 的十进制即：3<br> 倒数第三组数010 的十进制即：2        从下到上看即为 234</p><p>156的八进制为234</p><p>理十六进制的数<br> 0000-0000 0000-0000 0000-0000 1001-1100<br> 倒数第一组数1100的十进制为：12即C<br> 倒数第二组数1001的十进制为：9             9C</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211935.png"><br>倒数第一组数可以看成和1111“与”运算后得出1100，的十进制为12 即为C</p><p>然后右移四位</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211952.png"><br>倒数第二组数可以看成和1001“与”原酸后得出1001，的十进制即9</p><h2 id="在代码中定义一个函数实现"><a href="#在代码中定义一个函数实现" class="headerlink" title="在代码中定义一个函数实现"></a>在代码中定义一个函数实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">,</span><span class="token keyword">int</span> move<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果是零输出零，结束</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tables <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bottle <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">char</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span>bottle<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个局部变量，从数组后面开始存放数据</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span>num <span class="token operator">&amp;</span> base<span class="token punctuation">;</span>            bottle<span class="token punctuation">[</span><span class="token operator">--</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> tables<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>            num <span class="token operator">=</span> num <span class="token operator">>>></span> move<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>position<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>bottle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bottle<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212004.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212017.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置SSL证书,提高网络安全性</title>
      <link href="/posts/a41d.html"/>
      <url>/posts/a41d.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先区别Http与Https"><a href="#首先区别Http与Https" class="headerlink" title="首先区别Http与Https"></a>首先区别Http与Https</h2><p> HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><p>配置 HTTPS 要用到私钥 example.key 文件和 example.crt 证书文件 </p><h2 id="example-key-文件和-example-crt-证书文件"><a href="#example-key-文件和-example-crt-证书文件" class="headerlink" title="example.key 文件和 example.crt 证书文件"></a>example.key 文件和 example.crt 证书文件</h2><p>CSR：Cerificate Signing Request，证书签署请求文件，里面包含申请者的 DN（Distinguished Name，标识名）和公钥信息，在第三方证书颁发机构签署证书的时候需要提供。证书颁发机构拿到 CSR 后使用其根证书私钥对证书进行加密并生成 CRT 证书文件，里面包含证书加密信息以及申请者的 DN 及公钥信息</p><p>Key：证书申请者私钥文件，和证书里面的公钥配对使用，在 HTTPS 『握手』通讯过程需要使用私钥去解密客戶端发來的经过证书公钥加密的随机数信息，是 HTTPS 加密通讯过程非常重要的文件，在配置 HTTPS 的時候要用到网络中有许多地方可以申请免费的证书，比如：</p><p>Let’s Encrypt     官网：<a href="https://letsencrypt.org/">https://letsencrypt.org</a></p><p>阿里云证书      官网：<a href="https://common-buy.aliyun.com/?commodityCode=cas">https://common-buy.aliyun.com/?commodityCode=cas</a></p><p>Freessl  官网：<a href="https://freessl.cn/">https://freessl.cn/</a></p><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>我是在阿里云上免费申请的</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210306.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210331.png"><br>申请证书大概10分钟就可以审核通过，然后就是下载证书，选择nginx</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210350.png"></p><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>然后把下载下来的两个文件放进nginx的根目录路</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210505.png"></p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>然后进入nginx.conf中配置</p><pre class=" language-bash"><code class="language-bash">server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        listen       443 ssl<span class="token punctuation">;</span>        server_name  ythan.top<span class="token punctuation">;</span>        ssl_certificate      ythan.top.pem<span class="token punctuation">;</span>        ssl_certificate_key  ythan.top.key<span class="token punctuation">;</span>        ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>        ssl_session_timeout  5m<span class="token punctuation">;</span>        ssl_ciphers  HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span>        root /www/wordpress<span class="token punctuation">;</span>        location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            index  index.php index.html index.htm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.php<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                      rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        rewrite /wp-admin$ <span class="token variable">$scheme</span>://<span class="token variable">$host</span><span class="token variable">$uri</span>/ permanent<span class="token punctuation">;</span>        location ~ \.php$ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            fastcgi_pass   127.0.0.1:9000<span class="token punctuation">;</span>            fastcgi_index  index.php<span class="token punctuation">;</span>            fastcgi_param  SCRIPT_FILENAME  /scripts<span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>            include        fastcgi.conf<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><p>记得打开服务器的443端口号</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210525.png"><br>如果再次进去你的网站是自动下载一个php文件，是因为chrome的缓存导致，这个问题折腾了我好几个小时，然后如果你原网站虽然有证书，但是显示不安全的话就是应为你网站当中存在一些图片来自http中，修改一下图片的来源即可。</p><p>没有证书和有证书相比较的效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210550.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210609.png"></p><p>最后一点，把网站强制跳转到https的链接中，在nginx.conf配置文件中加入以下一段代码：</p><pre class=" language-bash"><code class="language-bash">rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress固定链接后404的解决方法</title>
      <link href="/posts/a485.html"/>
      <url>/posts/a485.html</url>
      
        <content type="html"><![CDATA[<p>一般Wordpress自带的链接是一大串数字加符号，不美观也不明确，一般要设置成固定链接，而设置成功后大部分情况访问文章，子链接都会出现404界面，我找了网上的资料，才知道需要配置伪静态链接， 一般的大型网站系统，都依赖伪静态。如果服务器的伪静态没有配置好，访问部分链接就会出现 404 的情况。</p><p>解决方法：</p><p>在nginx安装目录找到nginx的配置文件即nginx.conf ，然后进行如下配置就好</p><pre class=" language-bash"><code class="language-bash">location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            index  index.php index.html index.htm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.php<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                      rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        rewrite /wp-admin$ <span class="token variable">$scheme</span>://<span class="token variable">$host</span><span class="token variable">$uri</span>/ permanent<span class="token punctuation">;</span></code></pre><p>重启nginx：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804205609.png"><br>现在访问文章，子链接就不会出现404界面了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux系统中安装Tomcat详细教程</title>
      <link href="/posts/753a.html"/>
      <url>/posts/753a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>首先在官网下载jdk和Tomcat的压缩包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215928.png"></p><p>这里下载jdk-8u241-linux-x64 .tar.gz</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220750.png"><br>和apache-tomcat-8.5.50.tar.gz</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220808.png"></p><h2 id="二、解压jdk和apache压缩包"><a href="#二、解压jdk和apache压缩包" class="headerlink" title="二、解压jdk和apache压缩包"></a>二、解压jdk和apache压缩包</h2><p>tar –zxvf  jdk-8u241-linux-x64 .tar.gz</p><p>把jdk放到/usr/local/目录下，并删除原本的jdk压缩包</p><p>mv jdk1.8.0_241/ /usr/local/</p><p>rm jdk-8u241-linux-x64 .tar.gz</p><p>解压并删除原压缩包</p><p>tar –zxvf  apache-tomcat-8.5.50.tar.gz</p><p>rm apache-tomcat-8.5.50.tar.gz</p><p>重命名</p><p>mv apache-tomcat-8.5.50.tar.gz  tomcat</p><p>用pwd命令查看jdk目录</p><p>cd  /usr/local/jdk1.8.0_241</p><h2 id="三、配置运行环境"><a href="#三、配置运行环境" class="headerlink" title="三、配置运行环境"></a>三、配置运行环境</h2><p>编辑/etc/profile文件</p><p>vim /etc/profile</p><p>在最后加入以下代码，配置jdk的运行环境</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/jdk1.8.0_241<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span><span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.java:<span class="token variable">$JAVA_HOME</span>/lib/tool.jar</code></pre><p>重启服务器让它生效，输入java –version检查是否安装成功<br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220821.png"><br>在服务器上开放80端口，进入tomcat服务器配置为80端口<br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220829.png"><br>vim tomcat/conf/server.xml</p><p>然后进入tomcat的bin目录下startup.sh开启服务器。</p><p>./ startup.sh</p><p>输入服务器ip号可以进入tomcat的默认首页了。</p><p>网页所在目录为</p><p>tomcat/webapps/ROOT/index.jsp</p><p>可以删除里面的内容自己上传自己的网站到这个目录下，通过服务器访问。记得开启服务器端口号</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220837.png"><br>提示:<br>rm –rf ./*         -r代表删除  -f代表强制删除   ./代表当前目录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据安全和数据备份的重要性</title>
      <link href="/posts/16e4.html"/>
      <url>/posts/16e4.html</url>
      
        <content type="html"><![CDATA[<p>我之前是在云服务器自己搭的一个博客网站里面写文章,2020/2/21下午，我再次进入我的博客，发现需要重新安装Wordpress，我以为安装完就可进入我的博客了，没想到安装完，里面是空的，我才发现我的数据库表全部被删了，导致我之前写的文章，资料全部没了。我还试图通过阿里云的工程师帮我找回，结果并没有</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215148.jpg"><br>吸取教训,我修改了数据库默认3306的端口，修改了ssh默认22的端口，并且密码都加长加特殊符号，设置外网ping不到本地地址， 至此我才真正意识到数据的安全和数据备份的重要性，吸取教训！！！！ </p><p>大家也可以去看看的博客:<br><a href="https://ythan.top/">https://ythan.top</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> 数据安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
