<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring官网上下载历史版本的springsource</title>
      <link href="/posts/2905.html"/>
      <url>/posts/2905.html</url>
      
        <content type="html"><![CDATA[<p>以前的下载链接<a href="https://spring.io/tools/sts/legacy%E5%B7%B2%E7%BB%8F404%E4%BA%86">https://spring.io/tools/sts/legacy已经404了</a></p><p>目前官网上提供的下载 是Spring Tools 4</p><p>其他版本的sts地址都没有，那么我们要怎么获得我们用的eclipse版本的sts下载地址呢？</p><p>其实这个是有规律可寻的。</p><p>我们打开spring官网下载地址，里面有个Update Site Archives，在这里可以看到几个版本tools下载的选项，我们把一个版本的地址复制下来，后面有大用处！</p><p>复制出来的地址为：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.5.RELEASE/e4.8/springsource-tool-suite-3.9.5.RELEASE-e4.8.0-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.9.5.RELEASE/e4.8/springsource-tool-suite-3.9.5.RELEASE-e4.8.0-updatesite.zip</a></p><p>再打开历史版本的地址，随便找个版本的地址复制下来，我这里是使用的4.5.2版本64位的地址。为啥呢？因为我的eclipse就是4.5.2版本，哈哈哈。</p><p>复制出来的地址为：</p><p><a href="http://download.springsource.com/release/STS/3.7.3.RELEASE/dist/e4.5/spring-tool-suite-3.7.3.RELEASE-e4.5.2-win32-x86_64.zip">http://download.springsource.com/release/STS/3.7.3.RELEASE/dist/e4.5/spring-tool-suite-3.7.3.RELEASE-e4.5.2-win32-x86_64.zip</a></p><p>对比我们复制出来的两个地址</p><p>通过对比我们可以发现规律</p><p>我们只要知道我们eclipse的版本，就能拼出我们需要的插件下载链接</p><p>我们可以拼出：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip</a></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805131004.png"></p><p>同样的方法，我们可以拼出</p><p>eclipse4.7.3a版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip</a></p><p>eclipse4.7.3版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.3.RELEASE/e4.7/springsource-tool-suite-3.9.3.RELEASE-e4.7.3-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.9.3.RELEASE/e4.7/springsource-tool-suite-3.9.3.RELEASE-e4.7.3-updatesite.zip</a></p><p>eclipse4.7.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.2.RELEASE/e4.7/springsource-tool-suite-3.9.2.RELEASE-e4.7.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.9.2.RELEASE/e4.7/springsource-tool-suite-3.9.2.RELEASE-e4.7.2-updatesite.zip</a></p><p>eclipse4.7.1a版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.1.RELEASE/e4.7/springsource-tool-suite-3.9.1.RELEASE-e4.7.1a-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.9.1.RELEASE/e4.7/springsource-tool-suite-3.9.1.RELEASE-e4.7.1a-updatesite.zip</a></p><p>eclipse4.7.0版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.0.RELEASE/e4.7/springsource-tool-suite-3.9.0.RELEASE-e4.7.0-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.9.0.RELEASE/e4.7/springsource-tool-suite-3.9.0.RELEASE-e4.7.0-updatesite.zip</a></p><p>eclipse4.6.3版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.4.RELEASE/e4.6/springsource-tool-suite-3.8.4.RELEASE-e4.6.3-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.8.4.RELEASE/e4.6/springsource-tool-suite-3.8.4.RELEASE-e4.6.3-updatesite.zip</a></p><p>eclipse4.6.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.3.RELEASE/e4.6/springsource-tool-suite-3.8.3.RELEASE-e4.6.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.8.3.RELEASE/e4.6/springsource-tool-suite-3.8.3.RELEASE-e4.6.2-updatesite.zip</a></p><p>eclipse4.6.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.2.RELEASE/e4.6/springsource-tool-suite-3.8.2.RELEASE-e4.6.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.8.2.RELEASE/e4.6/springsource-tool-suite-3.8.2.RELEASE-e4.6.1-updatesite.zip</a></p><p>eclipse4.6版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.1.RELEASE/e4.6/springsource-tool-suite-3.8.1.RELEASE-e4.6-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.8.1.RELEASE/e4.6/springsource-tool-suite-3.8.1.RELEASE-e4.6-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.0.RELEASE/e4.6/springsource-tool-suite-3.8.0.RELEASE-e4.6-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.8.0.RELEASE/e4.6/springsource-tool-suite-3.8.0.RELEASE-e4.6-updatesite.zip</a></p><p>eclipse4.5.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip</a></p><p>eclipse4.5.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.2.RELEASE/e4.5/springsource-tool-suite-3.7.2.RELEASE-e4.5.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.7.2.RELEASE/e4.5/springsource-tool-suite-3.7.2.RELEASE-e4.5.1-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.1.RELEASE/e4.5/springsource-tool-suite-3.7.1.RELEASE-e4.5.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.7.1.RELEASE/e4.5/springsource-tool-suite-3.7.1.RELEASE-e4.5.1-updatesite.zip</a></p><p>eclipse4.5版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.0.RELEASE/e4.5/springsource-tool-suite-3.7.0.RELEASE-e4.5-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.7.0.RELEASE/e4.5/springsource-tool-suite-3.7.0.RELEASE-e4.5-updatesite.zip</a></p><p>eclipse4.4.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.4.RELEASE/e4.4/springsource-tool-suite-3.6.4.RELEASE-e4.4.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.6.4.RELEASE/e4.4/springsource-tool-suite-3.6.4.RELEASE-e4.4.2-updatesite.zip</a></p><p>eclipse4.4.1版本（SR1）：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.3.SR1/e4.4/springsource-tool-suite-3.6.3.SR1-e4.4.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.6.3.SR1/e4.4/springsource-tool-suite-3.6.3.SR1-e4.4.1-updatesite.zip</a></p><p>eclipse4.4.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.3.RELEASE/e4.4/springsource-tool-suite-3.6.3.RELEASE-e4.4.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.6.3.RELEASE/e4.4/springsource-tool-suite-3.6.3.RELEASE-e4.4.1-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.2.RELEASE/e4.4/springsource-tool-suite-3.6.2.RELEASE-e4.4.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.6.2.RELEASE/e4.4/springsource-tool-suite-3.6.2.RELEASE-e4.4.1-updatesite.zip</a></p><p>eclipse4.4版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.1.RELEASE/e4.4/springsource-tool-suite-3.6.1.RELEASE-e4.4-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.6.1.RELEASE/e4.4/springsource-tool-suite-3.6.1.RELEASE-e4.4-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.0.RELEASE/e4.4/springsource-tool-suite-3.6.0.RELEASE-e4.4-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.6.0.RELEASE/e4.4/springsource-tool-suite-3.6.0.RELEASE-e4.4-updatesite.zip</a></p><p>eclipse4.3.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.5.1.RELEASE/e4.3/springsource-tool-suite-3.5.1.RELEASE-e4.3.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.5.1.RELEASE/e4.3/springsource-tool-suite-3.5.1.RELEASE-e4.3.2-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.5.0.RELEASE/e4.3/springsource-tool-suite-3.5.0.RELEASE-e4.3.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.5.0.RELEASE/e4.3/springsource-tool-suite-3.5.0.RELEASE-e4.3.2-updatesite.zip</a></p><p>eclipse4.3.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.4.0.RELEASE/e4.3/springsource-tool-suite-3.4.0.RELEASE-e4.3.1-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.4.0.RELEASE/e4.3/springsource-tool-suite-3.4.0.RELEASE-e4.3.1-updatesite.zip</a></p><p>eclipse4.3版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.3.0.RELEASE/e4.3/springsource-tool-suite-3.3.0.RELEASE-e4.3-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.3.0.RELEASE/e4.3/springsource-tool-suite-3.3.0.RELEASE-e4.3-updatesite.zip</a></p><p>eclipse4.2.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.2.0.RELEASE/e4.2/springsource-tool-suite-3.2.0.RELEASE-e4.2.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.2.0.RELEASE/e4.2/springsource-tool-suite-3.2.0.RELEASE-e4.2.2-updatesite.zip</a></p><p>eclipse4.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.1.0.RELEASE/e4.2/springsource-tool-suite-3.1.0.RELEASE-e4.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.1.0.RELEASE/e4.2/springsource-tool-suite-3.1.0.RELEASE-e4.2-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.0.0.RELEASE/e4.2/springsource-tool-suite-3.0.0.RELEASE-e4.2-updatesite.zip">http://download.springsource.com/release/TOOLS/update/3.0.0.RELEASE/e4.2/springsource-tool-suite-3.0.0.RELEASE-e4.2-updatesite.zip</a></p><p>4.2以下版本的eclipse的sts插件下载地址可以根据这个方法拼出下载地址，就不一一列出了。这些应该已经满足大部分的版本了。</p><p>这是以上版本的sts合集的百度网盘地址：<a href="https://pan.baidu.com/s/1CfCehUUbSC-vB-zjWBLDlg">https://pan.baidu.com/s/1CfCehUUbSC-vB-zjWBLDlg</a></p><p>原文地址：<a href="https://www.cnblogs.com/Jeremy2001/p/10324563.html">https://www.cnblogs.com/Jeremy2001/p/10324563.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springsource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/posts/d20c.html"/>
      <url>/posts/d20c.html</url>
      
        <content type="html"><![CDATA[<p>首先是类的加载,连接,初始化</p><h2 id="四种获取类的Class对象的方法"><a href="#四种获取类的Class对象的方法" class="headerlink" title="四种获取类的Class对象的方法"></a>四种获取类的Class对象的方法</h2><p>1、类型名.class说明：</p><p>基本数据类型和void，只能通过这种方式。</p><p>2、对象.getClass（）：获取对象的运行时类型说明：只能用于引用数据类型</p><p>3、Class.forName（“类的全名称”）类的全名称：包.类名</p><p>4、类加载器对象.loadClass（“类的全名称”）</p><h2 id="四种类加载器"><a href="#四种类加载器" class="headerlink" title="四种类加载器"></a>四种类加载器</h2><p>1、引导类加载器（Bootstrap Classloader）：又称为根类加载器它负责加载]ava的核心库</p><p>它用原生代码（C/C++）来实现的，并不继承自java.lang.ClassLoder</p><p>2、扩展类加载器（Extension ClassLoader） JAVA_HOME/ire/ext/*.jar</p><p>3、应用程序类加载器（Application Classloader） classpath下，就是自定义类型</p><p>4、自定义类加载器例如：tomcat</p><p>Java的类加载的过程是一个双亲（parent）委托模式加载的：</p><p>当“应用程序类加载器”接到一个加载任务时：</p><p>（1）先搜索内存中是否已经加载过了，如果加载过了，就可以找到对应的Class对象，那么就不加载了。</p><p>（2）如果没有找到，把这个任务先提交给“parent”，父加载器接到任务时，也是重复（1）（2）</p><p>（3）直到传给了根加载器，如果根加载器可以加载，就完成了，如果不能加载，往回传，依次每个加载器尝试在自己负责的路径下搜索，如果找到就直接返回C1ass对象，如果一直回传到“应用程序类加载器”，还是没有找到，就会报ClassNotFoundException。</p><p> <img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805130438.jpg"></p><h2 id="类加载器的作用："><a href="#类加载器的作用：" class="headerlink" title="类加载器的作用："></a>类加载器的作用：</h2><p>1、最主要的作用：加载类</p><p>2、辅助的作用：可以用它来加载“类路径下”的资源文件</p><p>JavaSE：例如：bin中SrC下文件–&gt;bin目录下</p><p>ClassLoader：</p><p>（1）静态方法</p><p>ClassLoader.getSystemResourceAsStream（”src1.properties”）</p><p>但是这个适用于JavaSE阶段，因为它用应用程序类加载器去加载的如果是Web阶段，用这个方法是有问题的，因为web阶段的类路径在WEB-INF/classes下，必须由它自定义类加载器</p><p>（2）非静态方法</p><p>类加载器对象.getResourceAsStream（”src1.properties”） Web阶段用这个</p><p>Properties：Properties类表示了一个持久的属性集。Properties可保存在流中或从流中加载。属性列表中每个键及其对应值都是字符串</p><h2 id="通过反射查看类的信息"><a href="#通过反射查看类的信息" class="headerlink" title="通过反射查看类的信息"></a>通过反射查看类的信息</h2><p>在运行期间，动态的获取某个类的详细信息步骤：</p><p>1、获取某个类型的Class对象</p><p>2、使用Class和java.lang.reflect包下面的其他类型的API</p><p>使用反射生成并操作对象</p><p>在运行期间，动态的创建任意类型的对象，</p><p>1、Class对象.newInstance（）</p><p>前提：这个类型必须有无参构造</p><p>步骤：</p><p>（1）获取Class对象</p><p>（2）直接调用Class对象.newInstance（）</p><p>2、构造器来创建对象</p><p>步骤：</p><p>（1）获取Class对象</p><p>（2）获取构造器对象，获取其中一个</p><p>C1ass类中有这样的方法：</p><p>Constructor<t>getDeclaredConstructor（Class&lt;？&gt;..…parameterTypes）</t></p><p>parameterTypes：构造器形参的类型列表</p><p>（3）用构造器创建对到 java.lang.reflect.Constructor类型中：</p><p>T newInstance（Object…initargs）</p><p>initargs：创建对象时，给构造器的实参列表</p><p>运行期间，动态的为对象的属性赋值或获取属性值步骤：</p><p>1、获取Class对象</p><p>2、获取Field属性对象</p><p>3、创建实例对象，Class代表的类型的实例对象</p><p>4、调用Fie1d对象.set（实例对象，属性值）调用Field对象.get（实例对象）</p><p>说明：如果属性是私有的，那么可以调用Field对象.setAccessible（true）；</p><p> 在运行期间，动态的调用任意对象的任意方法步骤：</p><p>1、获取Class对象</p><p>2、获取Method对象</p><p>方法有重载，就用方法名+形参列表clazz.getDeclaredMethod（name，parameterTypes）</p><p>3、创建实例对象</p><p>4、调用方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">createobject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 创建properties集合</span>           Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 从文件中加载内容到集合中</span>           pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>BeanDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/stu.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 从集合中获得类名</span>           String className <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 通过反射获得Class对象</span>           Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 快速创建对象</span>           Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 遍历集合</span>           Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 判断name是否class</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 获得值</span>               String value <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// name：成员变量名</span>               <span class="token comment" spellcheck="true">// 根据成员变量名获得对应的Field对象</span>               Field f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 强制反射</span>               f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 获得成员变量的类型</span>               Class <span class="token class-name">typeclass</span> <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>typeclass <span class="token operator">==</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断成员变量的数据类型是否是int类型</span>                   f<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 给对象的赋值</span>                   f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 返回对象</span>           <span class="token keyword">return</span> obj<span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL关联查询</title>
      <link href="/posts/8e03.html"/>
      <url>/posts/8e03.html</url>
      
        <content type="html"><![CDATA[<p>从2张或多张表中,取出有关联的数据</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125816.jpg"></p><p>关联查询一共有几种情况：</p><h2 id="内连接："><a href="#内连接：" class="headerlink" title="内连接："></a>内连接：</h2><p>INNER JOIN 、CROSS JOIN</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125839.png"></p><p>（1）形式一</p><p>select 字段列表</p><p>from A表 inner join B表</p><p>on 关联条件</p><p>【where 其他筛选条件】</p><p>说明：如果不写关联条件，会出现一种现象：笛卡尔积</p><p> 关联条件的个数 = n - 1，n是几张表关联</p><p>  on只能和join一起用</p><p>（2） 形式二</p><p>select 字段列表</p><p>from A表 , B表</p><p>where 关联条件 【and 其他筛选条件】</p><h2 id="外连接："><a href="#外连接：" class="headerlink" title="外连接："></a>外连接：</h2><p>左外连接（LEFT OUTER JOIN）</p><p>左连接：</p><p>第一种结果：A</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125851.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>第二种结果：A - A∩B</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125902.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null</p><h2 id="右外连接："><a href="#右外连接：" class="headerlink" title="右外连接："></a>右外连接：</h2><p>（RIGHT OUTER JOIN）</p><p>第一种结果：B</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125910.png"></p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>第二种结果：B - A∩B</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125917.png"></p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null</p><h2 id="全外连接："><a href="#全外连接：" class="headerlink" title="全外连接："></a>全外连接：</h2><p>（FULL OUTER JOIN）</p><p>使用union实现全连接的效果</p><p>（1）A ∪ B</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125924.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>union</p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>（3）A ∪ B - A ∩ B</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125931.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null </p><p>union</p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null</p><h2 id="自连接："><a href="#自连接：" class="headerlink" title="自连接："></a>自连接：</h2><p>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream API</title>
      <link href="/posts/2d14.html"/>
      <url>/posts/2d14.html</url>
      
        <content type="html"><![CDATA[<ol><li>用于处理内存中的数据</li></ol><p>像SQL语句来操作数据库一样的形式。</p><ol start="2"><li>Stream流的特点</li></ol><p>（1）Stream流不可变，每次改变就会创建一个新的流</p><p>（2）Stream流也不会改变数据源的数据</p><p>（3）Stream的中间操作是一个延迟操作，一直到终结操作时，一起完成。</p><ol start="3"><li>Stream API的使用分为三个步骤</li></ol><p>（1）创建Stream</p><p>（2）0-n步中间操作</p><p>（3）终结操作</p><ol start="4"><li>四种方式创建Stream</li></ol><p>（1）通过Arrays.stream（数组）</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125337.png"></p><p>（2）通过集合对象.stream（）</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125355.png"></p><p>（3）Stream.of（…）</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125408.png"></p><p>（4）创建无限流</p><p>Stream.generate（Supplier）</p><p>Stream.iterate（T seed，UnaryOperator）</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125419.png"></p><ol start="5"><li>中间操作：这些方法的返回值类型还是Stream，所以可以继续再操作</li></ol><p>（1）filter（Predicate p）：按照p的条件过滤</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125433.png"></p><p>（2）distinct（）：去重复</p><p>（3）limit（long maxSize）取流中的前maxSize个</p><p>（4）skip（long  n）：跳过前n个</p><p>（5）peek（Consumer action）：对流中的元素，挨个执行consumer接口的action操作</p><p>（6）map（Function f）：对流中的每一个元素，都映射f指定的操作</p><p>（7）flatMap （Function f）</p><p>（8）sorted（）</p><p>sorted（Comparator com）</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125447.png"></p><ol start="6"><li>终结操作：这些方法的返回值类型不是Stream，所以不能继续再操作，所以对Stream的操作就结束</li></ol><p>一个流一旦终结就结束了，就不能用了，要再使用，需要重写创建新的Stream</p><p>（1）forEach（Consumer c）</p><p>（2）long count（）</p><p>（3）Optional<t>max（Comparatorc）</t></p><p>（4）0ptional<t>min（Comparator c）</t></p><p>（5）boolean allMatch（Predicate p）：所有都匹配</p><p>​       boolean anyMatch（Predicate p）：有任一个匹配</p><p>​       boolean noneMatch（Predicate p）：都不匹配</p><p>（6）R collect（Collector c）</p><p>Collectors 工具类提供了很多静态方法，可以方便地创建常见收集器实例。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125456.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 安装破解</title>
      <link href="/posts/cfdf.html"/>
      <url>/posts/cfdf.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h2><p>软件官网 : <a href="https://www.navicat.com.cn/">https://www.navicat.com.cn/</a></p><p>Navicat Premium 12 下载地址:<a href="https://www.lanzous.com/i9j0syf">https://www.lanzous.com/i9j0syf</a> 密码:7pup</p><p>Navicat Premium 15 下载地址: <a href="https://www.lanzous.com/i9j0ozc">https://www.lanzous.com/i9j0ozc</a> 密码:f30q</p><p>Keygen Patch 下载地址: <a href="https://www.lanzous.com/i9j0qxc">https://www.lanzous.com/i9j0qxc</a> 密码:a2kk</p><h2 id="断网"><a href="#断网" class="headerlink" title="断网"></a>断网</h2><p>首先断网，再安装Navicat（全部点下一步），安装成功后不要打开软件</p><p>把Keygen Patch复制到安装目录”C:\Program Files\PremiumSoft\Navicat Premium 15”下，运行Keygen Patch</p><p>在最顶部选择版本，点右边Patch</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120800.png"></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>不要关闭Keygen Patch，打开桌面上Navicat快捷方式，点注册</p><p>返回Keygen Patch，点中部最右边的Generate</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120816.png"></p><p>返回Navicat，此时激活码已自动填入，点激活，再点手动激活（会卡一下）</p><p>复制Navicat上方的请求码（一长串）到Keygen Patch的白色大框中，点击左下角的Generate</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120831.png"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>返回Keygen Patch，此时激活码已自动填入，点激活，点确定</p><p>然后软件会自动打开，打开左上角栏的工具—选项，取消自动检查更新，取消共享数据，点确定</p><p>关闭Navicat和Keygen Patch，电脑联网，打开Navicat，打开左上角栏的帮助—关于，如果仍然显示区域许可证，那么才是真正地激活成功</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120847.png"></p><p>如果不行,就要卸载原有Navicat</p><p>删除”C:\Program Files\PremiumSoft”文件夹</p><p>Win+R，输入regedit，删除”计算机\HKEY_CURRENT_USER\Software\PremiumSoft”文件夹</p><p>重启电脑 , 断网按上面的步骤再来一遍</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat Premium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linxu系统安装WordPress</title>
      <link href="/posts/3db8.html"/>
      <url>/posts/3db8.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>确保在安装wordpress之前，安装了web服务器比如：nginx，php，数据库比如：mysql</p><p>没有安装的翻我之前的博文有安装方法</p><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>进入官网下载压缩包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805114943.png"></p><p><code>wget https://wordpress.org/latest.tar.gz</code></p><p>解压</p><p><code>tar -zxvf wordpress-5.3.2.tar.gz </code></p><p>移动到指定目录下</p><p><code>mv wordpress/* /www/wordpress/</code></p><h2 id="给权限"><a href="#给权限" class="headerlink" title="给权限"></a>给权限</h2><p><code>chown –R www.www /www</code></p><p>cd /www/</p><p>查看权限 ll</p><p>浏览器输入ip即可到达WordPress安装界面</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805115646.png"></p><p> 之后填写基本信息，注册账户，就可以登录wordpress后台了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装配置PHPmyadmin</title>
      <link href="/posts/239d.html"/>
      <url>/posts/239d.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载zip安装包"><a href="#下载zip安装包" class="headerlink" title="下载zip安装包"></a>下载zip安装包</h2><p>进官网下载zip安装包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805103624.png"></p><p><code>wget https://files.phpmyadmin.net/phpMyAdmin/5.0.1/phpMyAdmin-5.0.1-all-languages.zip</code></p><p>安装解压工具</p><p><code>yum install unzip –y</code></p><p>解压安装包</p><p><code>unzip unzip phpMyAdmin-5.0.1-all-languages.zip</code></p><p>把解压好的文件移动到/www/phpMyAdmin下面</p><p><code>mv phpMyAdmin-5.0.1-all-languages/* /www/phpMyAdmin/</code></p><p><code>cd /www/phpMyAdmin </code></p><p>复制重命名一份配置文件</p><p><code>cp config.sample.inc.php config.php</code></p><p>进入/etc/nginx/conf.d</p><h2 id="配置文件phpMyAdmin-conf"><a href="#配置文件phpMyAdmin-conf" class="headerlink" title="配置文件phpMyAdmin.conf"></a>配置文件phpMyAdmin.conf</h2><p>创建一个配置文件phpMyAdmin.conf</p><p>添加以下代码</p><pre><code>server &amp;#123;      listen       880;      server_name  localhost;  root /www/phpMyAdmin;      location / &amp;#123;          index  index.php index.html index.htm;      &amp;#125;      error_page   500 502 503 504  /50x.html;      location = /50x.html &amp;#123;          root   html;      &amp;#125;      location ~ \.php$ &amp;#123;          fastcgi_pass   127.0.0.1:9000;          fastcgi_index  index.php;          fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;          include        fastcgi.conf;      &amp;#125;&amp;#125;</code></pre><p>在/etc/nginx/nginx.conf中引入配置文件</p><p>（include conf.d/phpMyAdmin.conf;）</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805103646.png"></p><p>在服务器中打开安全组端口，浏览器中输入相应的ip：880进入登录页面、</p><p><code>cd /www/phpMyAdmin/</code></p><p><code>cp libraries/config.default.php config.inc.php</code></p><p><code>vim config.inc.php</code></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>端口号改为3306</p><p><code>$cfg['Servers'][$i]['port'] = '3306';</code></p><p>修改root密码：</p><p><code>$cfg['Servers'][$i]['password'] = '******';</code></p><p>修改为本地地址</p><p><code>$cfg['Servers'][$i]['host'] = '127.0.0.1';</code></p><h2 id="重启php服务器"><a href="#重启php服务器" class="headerlink" title="重启php服务器"></a>重启php服务器</h2><p><code>systemctl restart php-fpm</code></p><p>然后就能访问PHPmyadmin数据库了</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805103710.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPmyadmin </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统安装MySQL详细教程</title>
      <link href="/posts/ba76.html"/>
      <url>/posts/ba76.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载rpm安装包"><a href="#下载rpm安装包" class="headerlink" title="下载rpm安装包"></a>下载rpm安装包</h2><p>首先进入MySQL官网下载rpm安装包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212821.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212842.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212852.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212904.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212912.png"><br>用yum install mysql80-community-release-el7-3.noarch.rpm 安装</p><p>yum repolist all|grep mysql可以看到仓库默认开启的是8.0,</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213045.png"></p><h2 id="安装yum工具"><a href="#安装yum工具" class="headerlink" title="安装yum工具"></a>安装yum工具</h2><p>yum install yum-utils –y </p><p>我们要安装的是5.7</p><p>yum-config-manager –disable mysql80-community关闭8.0版本</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213058.png"><br>yum-config-manager –enable mysql57-community开启5.7版本</p><p>yum install mysql-community-server –y安装</p><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><p>systemctl start mysqld启动</p><p>systemctl status mysqld查看状态<br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213108.png"><br>ps -ef|grep mysqld查看进程</p><p>cat /var/log/mysqld.log查看数据库默认密码</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213119.png"><br>登录改密码</p><p>mysql –uroot –p******</p><p>alter user ‘root’@’localhost’ indentified by ‘<strong>**</strong>‘;</p><p>创建数据库</p><p>create database wordpress;</p><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><p>show databases;</p><p>查看用户权限</p><p>select user,host from mysql.user;</p><p>create user ‘wordpress’@’%’ identified by ‘<strong>**</strong>‘;创建一个用户</p><p>grant all privileges on wordpress.* to ‘wordpress’@’%’;给用户权限</p><p>远程访问数据库成功。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213127.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhpStorm配置Apache与php的运行环境详细教程</title>
      <link href="/posts/384e.html"/>
      <url>/posts/384e.html</url>
      
        <content type="html"><![CDATA[<p>本文主要说明如何在phpstorm中配置已经安装好的PHP与apache。</p><h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><p>首先需要在本地安装php，这里我安装的是phpstudy</p><ol><li>进入PHPstorm的界面点击file 下的settings</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214322.png"></p><ol start="2"><li>在Languages&amp;Frameworks中的PHP</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214400.png"></p><ol start="3"><li>找到安装php的路径，选择php.exe文件</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214411.png"><br>可以看到 CLI Interpreter里可以使用PHP5.6.9了</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214424.png"></p><ol start="4"><li>选择自己安装的版本号即可</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214857.png"></p><ol start="5"><li>在右上方的tools，deployment中 配置服务器信息 </li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214908.png"></p><ol start="6"><li>在这里添加Apache服务器</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214921.png"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214944.png"><br>Folder目录中填写的是apache服务器会扫描项目的根目录， Web server root URL为访问的url路径</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215007.png"><br>并修改自己的网站目录，同时也可以修改端口号</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215013.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Apache </tag>
            
            <tag> PhpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linxu系统安装PHP详细教程</title>
      <link href="/posts/3772.html"/>
      <url>/posts/3772.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装centos源"><a href="#安装centos源" class="headerlink" title="安装centos源"></a>安装centos源</h2><p><code>yum install epel-release –y</code></p><h2 id="下载php安装压缩包"><a href="#下载php安装压缩包" class="headerlink" title="下载php安装压缩包"></a>下载php安装压缩包</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212322.png"><br>wget <a href="https://www.php.net/distributions/php-7.3.15.tar.gz">https://www.php.net/distributions/php-7.3.15.tar.gz</a></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212336.png"><br>解压 tar xf php-7.3.15.tar.gz</p><p>进入php-7.3.15文件目录</p><h2 id="安装php依赖"><a href="#安装php依赖" class="headerlink" title="安装php依赖"></a>安装php依赖</h2><pre class=" language-java"><code class="language-java">yum install gcc \              gcc<span class="token operator">-</span>c<span class="token operator">++</span> \              libxml2 \              libxml2<span class="token operator">-</span>devel \              openssl \              openssl<span class="token operator">-</span>devel \              libcurl \              libcurl<span class="token operator">-</span>devel \              freetype \              freetype<span class="token operator">-</span>devel \              libjpeg \              libjpeg<span class="token operator">-</span>devel \              libpng \              libpng<span class="token operator">-</span>devel \              libxslt \              libxslt<span class="token operator">-</span>devel \              systemd<span class="token operator">-</span>devel \              libicu<span class="token operator">-</span>devel \              libedit<span class="token operator">-</span>devel</code></pre><h2 id="安装cmake3"><a href="#安装cmake3" class="headerlink" title="安装cmake3"></a>安装cmake3</h2><p>yum install cmake3 –y</p><p>拷贝一份，重命名为cmake</p><p>cp /usr/bin/cmake3 /usr/bin/cmake</p><p>查看cmake是否为3.0以上版本</p><p>cmake –version</p><h2 id="安装libzip1-5-2"><a href="#安装libzip1-5-2" class="headerlink" title="安装libzip1.5.2"></a>安装libzip1.5.2</h2><p>安装bzip2-devel依赖包</p><p>yum install bzip2 bzip2-devel -y</p><p>到官网下载libzip压缩包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212352.png"><br>wget <a href="https://libzip.org/download/libzip-1.6.1.tar.gz">https://libzip.org/download/libzip-1.6.1.tar.gz</a></p><p>解压进入libzip-1.6.1创建build目录</p><p>tar xf libzip-1.6.1.tar.gz </p><p>cd libzip-1.6.1</p><p>mkdir build</p><p>进入build目录里面执行cmake ..，make，make安装</p><p>cd build</p><p>cmake ..</p><p>make</p><p>make install</p><h2 id="创建www用户"><a href="#创建www用户" class="headerlink" title="创建www用户"></a>创建www用户</h2><p>useradd -M -s /sbin/nologin www</p><p>-M:不要自动建立用户的登入目录</p><p>-s 用户不能用作登录</p><p>Id www 查看</p><p>#修改库加载路径</p><p>vim /etc/ld.so.conf </p><p>#添加如下几行</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib64<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>usr<span class="token operator">/</span>lib64</code></pre><p>使之生效:</p><p>ldconfig -v</p><h2 id="进入php-7-3-15目录配置"><a href="#进入php-7-3-15目录配置" class="headerlink" title="进入php-7.3.15目录配置"></a>进入php-7.3.15目录配置</h2><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/configure <span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php \    <span class="token operator">--</span>with<span class="token operator">-</span>config<span class="token operator">-</span>file<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php<span class="token operator">/</span>etc \    <span class="token operator">--</span>with<span class="token operator">-</span>config<span class="token operator">-</span>file<span class="token operator">-</span>scan<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php<span class="token operator">/</span>etc<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \    <span class="token operator">--</span>disable<span class="token operator">-</span>cgi \    <span class="token operator">--</span>enable<span class="token operator">-</span>fpm \    <span class="token operator">--</span>with<span class="token operator">-</span>fpm<span class="token operator">-</span>user<span class="token operator">=</span>www \    <span class="token operator">--</span>with<span class="token operator">-</span>fpm<span class="token operator">-</span>group<span class="token operator">=</span>www \    <span class="token operator">--</span>enable<span class="token operator">-</span>ftp \    <span class="token operator">--</span>with<span class="token operator">-</span>curl \    <span class="token operator">--</span>with<span class="token operator">-</span>gd \    <span class="token operator">--</span>with<span class="token operator">-</span>gettext \    <span class="token operator">--</span>with<span class="token operator">-</span>iconv<span class="token operator">-</span>dir \    <span class="token operator">--</span>with<span class="token operator">-</span>kerberos \    <span class="token operator">--</span>with<span class="token operator">-</span>libedit \    <span class="token operator">--</span>with<span class="token operator">-</span>openssl \    <span class="token operator">--</span>with<span class="token operator">-</span>pcre<span class="token operator">-</span>regex \    <span class="token operator">--</span>with<span class="token operator">-</span>pdo<span class="token operator">-</span>mysql \    <span class="token operator">--</span>with<span class="token operator">-</span>xsl \    <span class="token operator">--</span>with<span class="token operator">-</span>zlib \    <span class="token operator">--</span>with<span class="token operator">-</span>mhash \    <span class="token operator">--</span>with<span class="token operator">-</span>mysqli \    <span class="token operator">--</span>with<span class="token operator">-</span>png<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib \    <span class="token operator">--</span>with<span class="token operator">-</span>jpeg<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib\    <span class="token operator">--</span>with<span class="token operator">-</span>freetype<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib \    <span class="token operator">--</span>enable<span class="token operator">-</span>mysqlnd \    <span class="token operator">--</span>enable<span class="token operator">-</span>bcmath \    <span class="token operator">--</span>enable<span class="token operator">-</span>libxml \    <span class="token operator">--</span>enable<span class="token operator">-</span>inline<span class="token operator">-</span>optimization \    <span class="token operator">--</span>enable<span class="token operator">-</span>gd<span class="token operator">-</span>jis<span class="token operator">-</span>conv \    <span class="token operator">--</span>enable<span class="token operator">-</span>mbregex \    <span class="token operator">--</span>enable<span class="token operator">-</span>mbstring \    <span class="token operator">--</span>enable<span class="token operator">-</span>opcache \    <span class="token operator">--</span>enable<span class="token operator">-</span>pcntl \    <span class="token operator">--</span>enable<span class="token operator">-</span>shmop \    <span class="token operator">--</span>enable<span class="token operator">-</span>soap \    <span class="token operator">--</span>enable<span class="token operator">-</span>sockets \    <span class="token operator">--</span>enable<span class="token operator">-</span>sysvsem \    <span class="token operator">--</span>enable<span class="token operator">-</span>xml \    <span class="token operator">--</span>enable<span class="token operator">-</span>zip \    <span class="token operator">--</span>enable<span class="token operator">-</span>calendar \    <span class="token operator">--</span>enable<span class="token operator">-</span>intl \    <span class="token operator">--</span>enable<span class="token operator">-</span>exif</code></pre><p>然后编译安装大概10分钟</p><p>make</p><p>make install</p><p>拷贝开发配置到安装目录</p><p>cp php.ini-development /usr/local/php/etc/php.ini</p><p>进入安装目录</p><p>cd /usr/local/php/etc/</p><p>复制一份配置文件</p><p>cp php-fpm.conf.default php-fpm.conf</p><p>拷贝启动脚本到指定目录</p><p>cp /root/php-7.3.15/sapi/fpm/php-fpm.service /usr/lib/systemd/system/</p><p>修改配置文件名</p><p>cd /usr/local/php/etc/php-fpm.d</p><p>cp <a href="http://www.conf.default/">www.conf.default</a> <a href="http://www.conf/">www.conf</a></p><h2 id="启动PHP"><a href="#启动PHP" class="headerlink" title="启动PHP"></a>启动PHP</h2><p>systemctl start php-fpm</p><p>允许自启</p><p>systemctl enable php-fpm</p><p>查看状态</p><p>systemctl status php-fpm</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212410.png"><br>查看进程</p><p>ps -ef|grep php-fpm</p><p>查看端口</p><p>ss -lntup|grep 9000</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux下安装nginx服务器详细教程</title>
      <link href="/posts/a7f9.html"/>
      <url>/posts/a7f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先安装centos的扩展源"><a href="#首先安装centos的扩展源" class="headerlink" title="首先安装centos的扩展源"></a>首先安装centos的扩展源</h2><p><code>yum install epel-release</code></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p><code>yum install nginx -y</code></p><p>查看版本号，开启nginx，查看进程<br><code>nginx –v</code><br><code>systemctl start nginx</code><br><code>ps -ef|grep nginx</code></p><p>设置开机启动</p><p><code>systemctl enable nginx</code></p><p>查看配置文件cd /ect/nginx</p><p>（安装vim查看命令yum install vim -y）</p><p><code>vim nginx.conf</code></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211436.png"><br>默认端口是80，网页内容在root  /usr/share/nginx/html;</p><p>浏览器输入ip即可进入nginx默认首页</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211456.png"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>进入nginx官网，下载最新版</p><p>wget <a href="http://nginx.org/download/nginx-1.17.8.tar.gz">http://nginx.org/download/nginx-1.17.8.tar.gz</a></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211510.png"><br>安装必要插件</p><p>yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</p><p>gcc 它可以编译 C,C++,Ada,Object C和Java等语言</p><p>pcre pcre-devel pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式，所以需要安装pcre库</p><p>zlib zlib-devel zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip</p><p>openssl openssl-devel openssl保证web通信</p><p>解压tar -zxvf nginx-1.17.8.tar.gz</p><p>进入到 nginx-1.17.8文件夹下面，制定安装路径</p><p>./configure –prefix=/software/nginx</p><p>编译make</p><p>安装make install</p><p>进入到安装nginx目录下面的sbin启动</p><p>./nginx</p><p>浏览器输入ip即可进入nginx默认首页</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211528.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java查表法实现十进制转化成其它进制</title>
      <link href="/posts/7a9c.html"/>
      <url>/posts/7a9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="进制转换原理"><a href="#进制转换原理" class="headerlink" title="进制转换原理"></a>进制转换原理</h2><p>首先了解十进制转化成二级制的原理</p><p>156的二进制为：<br> 156 % 2 = 78 …… 0<br>  83   % 2 = 39 …… 0<br> 39   % 2 = 19 …… 1<br> 19   % 2 = 9   …… 1<br> 9     % 2 = 4   …… 1<br> 4     % 2 = 2   …… 0<br> 2     % 2 = 1   …… 0<br> 1     % 2 = 0   …… 1           从下到上看即为 10011100</p><p>100111000转八进制实际上就是<br> 00-000-000-000-000-000-000-000-010-011-100<br> 倒数第一组数110 的十进制即：4<br> 倒数第二组数011 的十进制即：3<br> 倒数第三组数010 的十进制即：2        从下到上看即为 234</p><p>156的八进制为234</p><p>理十六进制的数<br> 0000-0000 0000-0000 0000-0000 1001-1100<br> 倒数第一组数1100的十进制为：12即C<br> 倒数第二组数1001的十进制为：9             9C</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211935.png"><br>倒数第一组数可以看成和1111“与”运算后得出1100，的十进制为12 即为C</p><p>然后右移四位</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211952.png"><br>倒数第二组数可以看成和1001“与”原酸后得出1001，的十进制即9</p><h2 id="在代码中定义一个函数实现"><a href="#在代码中定义一个函数实现" class="headerlink" title="在代码中定义一个函数实现"></a>在代码中定义一个函数实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">,</span><span class="token keyword">int</span> move<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果是零输出零，结束</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tables <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bottle <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">char</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span>bottle<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个局部变量，从数组后面开始存放数据</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span>num <span class="token operator">&amp;</span> base<span class="token punctuation">;</span>            bottle<span class="token punctuation">[</span><span class="token operator">--</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> tables<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>            num <span class="token operator">=</span> num <span class="token operator">>>></span> move<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>position<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>bottle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bottle<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212004.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212017.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置SSL证书,提高网络安全性</title>
      <link href="/posts/a41d.html"/>
      <url>/posts/a41d.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先区别Http与Https"><a href="#首先区别Http与Https" class="headerlink" title="首先区别Http与Https"></a>首先区别Http与Https</h2><p> HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><p>配置 HTTPS 要用到私钥 example.key 文件和 example.crt 证书文件 </p><h2 id="example-key-文件和-example-crt-证书文件"><a href="#example-key-文件和-example-crt-证书文件" class="headerlink" title="example.key 文件和 example.crt 证书文件"></a>example.key 文件和 example.crt 证书文件</h2><p>CSR：Cerificate Signing Request，证书签署请求文件，里面包含申请者的 DN（Distinguished Name，标识名）和公钥信息，在第三方证书颁发机构签署证书的时候需要提供。证书颁发机构拿到 CSR 后使用其根证书私钥对证书进行加密并生成 CRT 证书文件，里面包含证书加密信息以及申请者的 DN 及公钥信息</p><p>Key：证书申请者私钥文件，和证书里面的公钥配对使用，在 HTTPS 『握手』通讯过程需要使用私钥去解密客戶端发來的经过证书公钥加密的随机数信息，是 HTTPS 加密通讯过程非常重要的文件，在配置 HTTPS 的時候要用到网络中有许多地方可以申请免费的证书，比如：</p><p>Let’s Encrypt     官网：<a href="https://letsencrypt.org/">https://letsencrypt.org</a></p><p>阿里云证书      官网：<a href="https://common-buy.aliyun.com/?commodityCode=cas">https://common-buy.aliyun.com/?commodityCode=cas</a></p><p>Freessl  官网：<a href="https://freessl.cn/">https://freessl.cn/</a></p><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>我是在阿里云上免费申请的</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210306.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210331.png"><br>申请证书大概10分钟就可以审核通过，然后就是下载证书，选择nginx</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210350.png"></p><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>然后把下载下来的两个文件放进nginx的根目录路</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210505.png"></p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>然后进入nginx.conf中配置</p><pre class=" language-bash"><code class="language-bash">server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        listen       443 ssl<span class="token punctuation">;</span>        server_name  ythan.top<span class="token punctuation">;</span>        ssl_certificate      ythan.top.pem<span class="token punctuation">;</span>        ssl_certificate_key  ythan.top.key<span class="token punctuation">;</span>        ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>        ssl_session_timeout  5m<span class="token punctuation">;</span>        ssl_ciphers  HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span>        root /www/wordpress<span class="token punctuation">;</span>        location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            index  index.php index.html index.htm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.php<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                      rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        rewrite /wp-admin$ <span class="token variable">$scheme</span>://<span class="token variable">$host</span><span class="token variable">$uri</span>/ permanent<span class="token punctuation">;</span>        location ~ \.php$ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            fastcgi_pass   127.0.0.1:9000<span class="token punctuation">;</span>            fastcgi_index  index.php<span class="token punctuation">;</span>            fastcgi_param  SCRIPT_FILENAME  /scripts<span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>            include        fastcgi.conf<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><p>记得打开服务器的443端口号</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210525.png"><br>如果再次进去你的网站是自动下载一个php文件，是因为chrome的缓存导致，这个问题折腾了我好几个小时，然后如果你原网站虽然有证书，但是显示不安全的话就是应为你网站当中存在一些图片来自http中，修改一下图片的来源即可。</p><p>没有证书和有证书相比较的效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210550.png"><br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210609.png"></p><p>最后一点，把网站强制跳转到https的链接中，在nginx.conf配置文件中加入以下一段代码：</p><pre class=" language-bash"><code class="language-bash">rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress固定链接后404的解决方法</title>
      <link href="/posts/a485.html"/>
      <url>/posts/a485.html</url>
      
        <content type="html"><![CDATA[<p>一般Wordpress自带的链接是一大串数字加符号，不美观也不明确，一般要设置成固定链接，而设置成功后大部分情况访问文章，子链接都会出现404界面，我找了网上的资料，才知道需要配置伪静态链接， 一般的大型网站系统，都依赖伪静态。如果服务器的伪静态没有配置好，访问部分链接就会出现 404 的情况。</p><p>解决方法：</p><p>在nginx安装目录找到nginx的配置文件即nginx.conf ，然后进行如下配置就好</p><pre class=" language-bash"><code class="language-bash">location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            index  index.php index.html index.htm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.php<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                      rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.php<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        rewrite /wp-admin$ <span class="token variable">$scheme</span>://<span class="token variable">$host</span><span class="token variable">$uri</span>/ permanent<span class="token punctuation">;</span></code></pre><p>重启nginx：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804205609.png"><br>现在访问文章，子链接就不会出现404界面了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux系统中安装Tomcat详细教程</title>
      <link href="/posts/753a.html"/>
      <url>/posts/753a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>首先在官网下载jdk和Tomcat的压缩包</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215928.png"></p><p>这里下载jdk-8u241-linux-x64 .tar.gz</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220750.png"><br>和apache-tomcat-8.5.50.tar.gz</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220808.png"></p><h2 id="二、解压jdk和apache压缩包"><a href="#二、解压jdk和apache压缩包" class="headerlink" title="二、解压jdk和apache压缩包"></a>二、解压jdk和apache压缩包</h2><p>tar –zxvf  jdk-8u241-linux-x64 .tar.gz</p><p>把jdk放到/usr/local/目录下，并删除原本的jdk压缩包</p><p>mv jdk1.8.0_241/ /usr/local/</p><p>rm jdk-8u241-linux-x64 .tar.gz</p><p>解压并删除原压缩包</p><p>tar –zxvf  apache-tomcat-8.5.50.tar.gz</p><p>rm apache-tomcat-8.5.50.tar.gz</p><p>重命名</p><p>mv apache-tomcat-8.5.50.tar.gz  tomcat</p><p>用pwd命令查看jdk目录</p><p>cd  /usr/local/jdk1.8.0_241</p><h2 id="三、配置运行环境"><a href="#三、配置运行环境" class="headerlink" title="三、配置运行环境"></a>三、配置运行环境</h2><p>编辑/etc/profile文件</p><p>vim /etc/profile</p><p>在最后加入以下代码，配置jdk的运行环境</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/jdk1.8.0_241<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span><span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.java:<span class="token variable">$JAVA_HOME</span>/lib/tool.jar</code></pre><p>重启服务器让它生效，输入java –version检查是否安装成功<br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220821.png"><br>在服务器上开放80端口，进入tomcat服务器配置为80端口<br><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220829.png"><br>vim tomcat/conf/server.xml</p><p>然后进入tomcat的bin目录下startup.sh开启服务器。</p><p>./ startup.sh</p><p>输入服务器ip号可以进入tomcat的默认首页了。</p><p>网页所在目录为</p><p>tomcat/webapps/ROOT/index.jsp</p><p>可以删除里面的内容自己上传自己的网站到这个目录下，通过服务器访问。记得开启服务器端口号</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220837.png"><br>提示:<br>rm –rf ./*         -r代表删除  -f代表强制删除   ./代表当前目录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据安全和数据备份的重要性</title>
      <link href="/posts/16e4.html"/>
      <url>/posts/16e4.html</url>
      
        <content type="html"><![CDATA[<p>我之前是在云服务器自己搭的一个博客网站里面写文章,2020/2/21下午，我再次进入我的博客，发现需要重新安装Wordpress，我以为安装完就可进入我的博客了，没想到安装完，里面是空的，我才发现我的数据库表全部被删了，导致我之前写的文章，资料全部没了。我还试图通过阿里云的工程师帮我找回，结果并没有</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215148.jpg"><br>吸取教训,我修改了数据库默认3306的端口，修改了ssh默认22的端口，并且密码都加长加特殊符号，设置外网ping不到本地地址， 至此我才真正意识到数据的安全和数据备份的重要性，吸取教训！！！！ </p><p>大家也可以去看看的博客:<br><a href="https://ythan.top/">https://ythan.top</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> 数据安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
