<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python_字符串</title>
      <link href="/posts/37ce.html"/>
      <url>/posts/37ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><p>⼀对引号字符串或三引号字符串，如果需要用到引号则需要在前面增加”/“转义字符，三引号形式的字符串⽀持换⾏。</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'i'</span>b <span class="token operator">=</span> <span class="token string">"also"</span>c <span class="token operator">=</span> <span class="token triple-quoted-string string">'''like'''</span>d <span class="token operator">=</span> <span class="token triple-quoted-string string">"""python"""</span>e <span class="token operator">=</span> <span class="token string">'i\'am vincent'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>控制台显示结果为&lt;class ‘str’&gt;，即数据类型为str(字符串)。</p><h2 id="字符串输入，输出"><a href="#字符串输入，输出" class="headerlink" title="字符串输入，输出"></a>字符串输入，输出</h2><p>在Python中，使⽤ input() 接收⽤户输⼊。</p><pre class=" language-Python"><code class="language-Python">name = input('请输⼊你的名字：')print('你的名字是%s' % name)print(type(name))password = input('请输⼊你的密码：')print(f'你的密码是{password}')print(type(password))</code></pre><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切⽚是指对操作的对象截取其中⼀部分的操作。字符串、列表、元组都⽀持切⽚操作。</p><p><strong>语法</strong>：<code>序列[开始位置下标:结束位置下标:步⻓]</code></p><blockquote><ol><li>不包含结束位置下标对应的数据， 正负整数均可</li><li>步⻓是选取间隔，正负整数均可，默认步⻓为1。</li></ol></blockquote><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># cd</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># cd</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abcd</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># bcdef</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abcdef</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ace</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abcde, 负1表示倒数第⼀个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># de</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># fedcba</span></code></pre><h2 id="常⽤操作⽅法"><a href="#常⽤操作⽅法" class="headerlink" title="常⽤操作⽅法"></a>常⽤操作⽅法</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>查找⽅法即是查找⼦串在字符串中的位置或出现的次数</p><ul><li>find()：检测某个⼦串是否包含在这个字符串中，如果在返回这个⼦串开始的位置下标，否则则返 回-1。</li></ul><p><strong>语法：</strong><code>字符串序列.find(⼦串, 开始位置下标, 结束位置下标)</code></p><blockquote><p>开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'i like python and java and c++ and php'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 14</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 23</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'amd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># -1</span></code></pre><ul><li>index()：检测某个⼦串是否包含在这个字符串中，如果在返回这个⼦串开始的位置下标，否则则 报异常。</li></ul><p><strong>语法：</strong><code>字符串序列.index(⼦串, 开始位置下标, 结束位置下标)</code></p><blockquote><p>开始和结束位置下标可以省略，表示在整个字符串序列中查找</p></blockquote><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'i like python and java and c++ and php'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 14</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 23</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'amd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># -1</span></code></pre><ul><li>rfind()： 和find()功能相同，但查找⽅向为右侧开始。</li><li>rindex()：和index()功能相同，但查找⽅向为右侧开始。</li><li>count()：返回某个⼦串在字符串中出现的次数</li></ul><p><strong>语法：</strong><code>字符串序列.count(⼦串, 开始位置下标, 结束位置下标)</code></p><blockquote><p>开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'i like python and java and c++ and php'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'amd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0</span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改字符串指的就是通过函数的形式修改字符串中的数据</p><ul><li>replace()：替换</li></ul><p><strong>语法：</strong><code>字符串序列.replace(旧⼦串, 新⼦串, 替换次数)</code></p><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'i like python and java and c++ and php'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>输出结果为：i like python 和 java 和 c<span class="token operator">+</span><span class="token operator">+</span> 和 phpi like python 和 java 和 c<span class="token operator">+</span><span class="token operator">+</span> 和 phpi like python <span class="token operator">and</span> java <span class="token operator">and</span> c<span class="token operator">+</span><span class="token operator">+</span> <span class="token operator">and</span> php</code></pre><blockquote><p>数据按照是否能直接修改分为可变类型和不可变类型两种。字符串类型的数据修改的时候 不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型</p></blockquote><ul><li>split()：按照指定字符分割字符串。</li></ul><p><strong>语法：</strong><code>字符串序列.split(分割字符, num)</code></p><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'i like python and java and c++ and php'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>输出结果为：<span class="token punctuation">[</span><span class="token string">'i like python '</span><span class="token punctuation">,</span> <span class="token string">' java '</span><span class="token punctuation">,</span> <span class="token string">' c++ '</span><span class="token punctuation">,</span> <span class="token string">' php'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'i like python '</span><span class="token punctuation">,</span> <span class="token string">' java '</span><span class="token punctuation">,</span> <span class="token string">' c++ and php'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'like'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span>i like python <span class="token operator">and</span> java <span class="token operator">and</span> c<span class="token operator">+</span><span class="token operator">+</span> <span class="token operator">and</span> php</code></pre><ul><li>join()：⽤⼀个字符或⼦串合并字符串，即是将多个字符串合并为⼀个新的字符串。</li></ul><p><strong>语法：</strong><code>字符或⼦串.join(多字符串组成的序列)</code></p><pre class=" language-python"><code class="language-python">mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>输出结果为：python java c<span class="token operator">+</span><span class="token operator">+</span> phppython<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>c<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>php<span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span></code></pre><ul><li>capitalize()：将字符串第⼀个字符转换成⼤写。</li><li>title()：将字符串每个单词⾸字⺟转换成⼤写。</li><li>lower()：将字符串中⼤写转⼩写。</li><li>upper()：将字符串中⼩写转⼤写。</li><li>lstrip()：删除字符串左侧空⽩字符。</li><li>rstrip()：删除字符串右侧空⽩字符。</li><li>ljust()：返回⼀个原字符串左对⻬,并使⽤指定字符(默认空格)填充⾄对应⻓度 的新字符串。</li></ul><p><strong>语法：</strong><code>字符串序列.ljust(⻓度, 填充字符)</code></p><ul><li>rjust()：返回⼀个原字符串右对⻬,并使⽤指定字符(默认空格)填充⾄对应⻓度 的新字符串，语法和 ljust()相同。 </li><li>center()：返回⼀个原字符串居中对⻬,并使⽤指定字符(默认空格)填充⾄对应⻓度 的新字符串，语 法和ljust()相同。</li></ul><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>判断即是判断真假，返回的结果是布尔型数据类型：True 或 False</p><ul><li>startswith()：检查字符串是否是以指定⼦串开头，是则返回 True，否则返回 False。如果设置开 始和结束位置下标，则在指定范围内检查。</li></ul><p><strong>语法：</strong><code>字符串序列.startswith(⼦串, 开始位置下标, 结束位置下标)</code></p><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">'i like python and java and c++ and php'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'i like'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># False</span></code></pre><ul><li>endswith()：：检查字符串是否是以指定⼦串结尾，是则返回 True，否则返回 False。如果设置开 始和结束位置下标，则在指定范围内检查。</li><li>isalpha()：如果字符串⾄少有⼀个字符并且所有字符都是字⺟则返回 True, 否则返回 False。</li><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li><li>isalnum()：如果字符串⾄少有⼀个字符并且所有字符都是字⺟或数字则返 回 True,否则返回 False。</li><li>isspace()：如果字符串中只包含空⽩，则返回 True，否则返回 False。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux教学资源服务器构建</title>
      <link href="/posts/608a.html"/>
      <url>/posts/608a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h1><h2 id="1-1-课题简介"><a href="#1-1-课题简介" class="headerlink" title="1.1 课题简介"></a>1.1 课题简介</h2><p>随着计算机互联网的迅速发展，大多数学校已经实现教学的信息化，从传统的黑板教学方式转变为现阶段的多媒体教学，教学的资源，素材课件，甚至学生的作业也都实现数字化，为了实现这一功能，运用课程所学知识，构建一种基于 Linux 系统的教学资源服务器。教师可以把资源上传到服务器，供学生下载，可以把教学大纲、课件、资料都上传到服务器，上课时可以从服务器直接下载到教室电脑，学生也可以上传作业，供给老师批改，从而让教师教学更加便利。</p><h2 id="1-2-需求分析"><a href="#1-2-需求分析" class="headerlink" title="1.2 需求分析"></a>1.2 需求分析</h2><p>服务器主要实现教学资源共享以及学生作业上传两大功能，并且能针对教师和学生所用账号，对资源共享和学生作业两个目录进行权限控制，使得教师可以上传、下载、删除其资源共享和学生作业目录下的内容，而学生只能下载资源共享目录下的内容和上传作业。</p><h1 id="2-总体设计"><a href="#2-总体设计" class="headerlink" title="2. 总体设计"></a>2. 总体设计</h1><h2 id="2-1-账号和目录设计"><a href="#2-1-账号和目录设计" class="headerlink" title="2.1 账号和目录设计"></a>2.1 账号和目录设计</h2><p>每个教师应拥有一个账号用于上传和下载文件，此账号为教师私有，带密码，而每个教师对应有另一个账号，让学生使用这个账号来下载教师的课程资料和上传作业。因此，每个教师都对应两个账号，一个私有，带密码的；一个向学生公开，不带密码。</p><p>表 1 账号设计</p><table><thead><tr><th align="center">账号类型</th><th align="center">所属组</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">私有账户</td><td align="center">教师</td><td align="center">123</td></tr><tr><td align="center">公开账户</td><td align="center">学生</td><td align="center">123</td></tr></tbody></table><p>表 2 目录设计</p><table><thead><tr><th align="center">目录</th><th align="center">教师权限</th><th align="center">学生权限</th></tr></thead><tbody><tr><td align="center">资源共享</td><td align="center">完全权限</td><td align="center">查看、下载</td></tr><tr><td align="center">学生作业</td><td align="center">完全权限</td><td align="center">查看、上传</td></tr></tbody></table><h2 id="2-2-权限控制方案设计"><a href="#2-2-权限控制方案设计" class="headerlink" title="2.2 权限控制方案设计"></a>2.2 权限控制方案设计</h2><ol><li><p>每个教师都有一个私人账号和一个公开账号，后者的密码和账号相同</p></li><li><p>每个教师都有对应的“资源共享”和“学生作业”两个目录</p></li><li><p>可通过 FTP 的方式上传和下载文件，权限设置为教师可以上传、下载、删除其资源共享和学生作业目录下的内容，而学生只能下载资源共享目录下的内容和上传作业</p></li></ol><h1 id="3-服务器构建"><a href="#3-服务器构建" class="headerlink" title="3. 服务器构建"></a>3. 服务器构建</h1><h2 id="3-1-基本系统配置"><a href="#3-1-基本系统配置" class="headerlink" title="3.1 基本系统配置"></a>3.1 基本系统配置</h2><p>操作系统：Linux（Ubuntu 14.04.6 LTS）</p><p>Web服务器：apache2 （2.4.7）</p><p>FTP服务器：proftpd-basic </p><p>Samba服务器：Samba</p><p>Libtalloc2</p><h3 id="3-1-1-软件源服务器地址修改"><a href="#3-1-1-软件源服务器地址修改" class="headerlink" title="3.1.1 软件源服务器地址修改"></a>3.1.1 软件源服务器地址修改</h3><p>在路径 /etc/apt/sources.list中编辑下载源服务器</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222302.png"></p><h3 id="3-1-2-安装Vim"><a href="#3-1-2-安装Vim" class="headerlink" title="3.1.2 安装Vim"></a>3.1.2 安装Vim</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222334.png"></p><h2 id="3-2-账号及其对应目录的创建"><a href="#3-2-账号及其对应目录的创建" class="headerlink" title="3.2 账号及其对应目录的创建"></a>3.2 账号及其对应目录的创建</h2><h3 id="3-2-1-创建账号"><a href="#3-2-1-创建账号" class="headerlink" title="3.2.1 创建账号"></a>3.2.1 创建账号</h3><p>防止ftp用户用终端登录</p><p>在/etc/shells上加一行/usr/sbin/nologin</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222415.png"></p><h3 id="3-2-2-创建目录"><a href="#3-2-2-创建目录" class="headerlink" title="3.2.2 创建目录"></a>3.2.2 创建目录</h3><p>设置文件所属组和所属用户</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222432.png"></p><p>学生加写作业的权限</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222448.png"></p><h2 id="3-3-FTP服务器安装与配置"><a href="#3-3-FTP服务器安装与配置" class="headerlink" title="3.3 FTP服务器安装与配置"></a>3.3 FTP服务器安装与配置</h2><h3 id="3-3-1-软件安装"><a href="#3-3-1-软件安装" class="headerlink" title="3.3.1 软件安装"></a>3.3.1 软件安装</h3><p>更新包信息</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222507.png"></p><p>升级</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222543.png"></p><p>安装proftpd</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222601.png"></p><p>查看proftpd状态</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222616.png"></p><h3 id="3-3-2-服务器配置"><a href="#3-3-2-服务器配置" class="headerlink" title="3.3.2 服务器配置"></a>3.3.2 服务器配置</h3><p>sudo vim /etc/proftpd /proftpd.conf</p><p>限制student用户组，删除目录(RMD)，删除文件(DELE) ，上传(STOR)，下载(RETR)</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222633.png"></p><p>sudo  /etc/init.d/proftpd  restart</p><p>重启ftp服务器</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222647.png"></p><h2 id="3-4-HTTP服务器安装与配置"><a href="#3-4-HTTP服务器安装与配置" class="headerlink" title="3.4 HTTP服务器安装与配置"></a>3.4 HTTP服务器安装与配置</h2><h3 id="3-4-1-软件安装"><a href="#3-4-1-软件安装" class="headerlink" title="3.4.1 软件安装"></a>3.4.1 软件安装</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222659.png"></p><h3 id="3-4-2-服务器配置"><a href="#3-4-2-服务器配置" class="headerlink" title="3.4.2 服务器配置"></a>3.4.2 服务器配置</h3><p>删除原有的文件，建立软连接</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824222719.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824223941.png"></p><h2 id="3-5-Samba服务器安装与配置"><a href="#3-5-Samba服务器安装与配置" class="headerlink" title="3.5 Samba服务器安装与配置"></a>3.5 Samba服务器安装与配置</h2><h3 id="3-5-1-软件安装"><a href="#3-5-1-软件安装" class="headerlink" title="3.5.1 软件安装"></a>3.5.1 软件安装</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824223955.png"></p><h3 id="3-5-2-服务器配置"><a href="#3-5-2-服务器配置" class="headerlink" title="3.5.2 服务器配置"></a>3.5.2 服务器配置</h3><p>在/etc/samba/smb.conf中配置</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224226.png"></p><p>创建samba用户</p><p>Sudo smbpasswd –a zhangjie </p><p>重启samba sudo service sambd restart</p><p>在我的电脑中输入<a href="file:///\192.168.239.128\zhangjie">\192.168.239.128\zhangjie</a>然后输入账号密码登录</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224244.png"></p><h2 id="3-6-shell管理程序的设计与实现"><a href="#3-6-shell管理程序的设计与实现" class="headerlink" title="3.6 shell管理程序的设计与实现"></a>3.6 shell管理程序的设计与实现</h2><p>编写namefile.txt文件里面是教师的账号</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224301.png"></p><p>编写shell.sh</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224313.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224328.png"></p><h1 id="4-服务器功能测试"><a href="#4-服务器功能测试" class="headerlink" title="4. 服务器功能测试"></a>4. 服务器功能测试</h1><h2 id="4-1-FTP文件传输功能测试"><a href="#4-1-FTP文件传输功能测试" class="headerlink" title="4.1 FTP文件传输功能测试"></a>4.1 FTP文件传输功能测试</h2><h3 id="4-1-1-教师私人账号功能测试"><a href="#4-1-1-教师私人账号功能测试" class="headerlink" title="4.1.1 教师私人账号功能测试"></a>4.1.1 教师私人账号功能测试</h3><p>教师私人账号拥有对资源共享和学生作业这两个文件夹里面的所有内容的增加和删除功能</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224348.png"></p><h3 id="4-1-2教师公开账号功能测试"><a href="#4-1-2教师公开账号功能测试" class="headerlink" title="4.1.2教师公开账号功能测试"></a>4.1.2教师公开账号功能测试</h3><p>教师的公开账号只能查看并下载共享资源里面的内容,只能上传学生作业,不能删除和下载作业</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224400.png"></p><h2 id="4-2-HTTP浏览共享资源功能测试"><a href="#4-2-HTTP浏览共享资源功能测试" class="headerlink" title="4.2 HTTP浏览共享资源功能测试"></a>4.2 HTTP浏览共享资源功能测试</h2><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224440.png"></p><h2 id="4-3-通过Samba访问共享资源功能测试"><a href="#4-3-通过Samba访问共享资源功能测试" class="headerlink" title="4.3 通过Samba访问共享资源功能测试"></a>4.3 通过Samba访问共享资源功能测试</h2><p>在我的电脑上方输入栏输入<a href="file:///\Samba">\Samba</a>服务器的ip地址</p><p>然后通过账号,密码登录</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200824224521.png"></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><h2 id="5-1完成的任务情况和心得体会"><a href="#5-1完成的任务情况和心得体会" class="headerlink" title="5.1完成的任务情况和心得体会"></a>5.1完成的任务情况和心得体会</h2><p>教学资源服务器主要的功能基本实现。资源共享需要解决文件的存取、查找浏览等问题。利用FTP进行文件的传输，Web服务器建立目录浏览界面，实现了教学资源共享及学生作业上传的两大功能。通过给每个教师配置私有账号和公开账号，并针对“资源共享”和“学生作业”目录进行FTP权限控制，防止学生下载作业及破坏课程资料。由于服务器系统是基于Linux平台，系统的性能及稳定性得到很好的保证、软件安装配置简单。在使用上也非常方便，使用浏览器或FTP方式即可访问教学资源，而无需安装任何客户端软件。</p><h2 id="5-2存在的问题和改进思路"><a href="#5-2存在的问题和改进思路" class="headerlink" title="5.2存在的问题和改进思路"></a>5.2存在的问题和改进思路</h2><p>ftp用户可以通过远程终端登录主机，存在安全隐患，可在/etc/shells上加一行/usr/sbin/nologin，新增ftp用户时，设置权限防止ftp用户通过远程终端登录。</p><p>ftp只能管理文件的上传，下载，不能管理磁盘的空间存储容量等问题，可能会出现文件过多，空间容量不足的情况，可以安装相应的存储空间管理软件，协助管理。</p><p>教师的私有账号有学生作业这个文件夹的全部权限，但是公共账号如果在学生作业上传了一个文件，那么教师的私有账号无法删除这个文件夹，只能通过后期管理员修改权限删除。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery主题性能优化</title>
      <link href="/posts/38f3.html"/>
      <url>/posts/38f3.html</url>
      
        <content type="html"><![CDATA[<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="文章生成永久链接"><a href="#文章生成永久链接" class="headerlink" title="文章生成永久链接"></a>文章生成永久链接</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821193250.png"></p><p>原来的文章链接地址会出现一大串字符编码，不好看，而给文章生成永久链接有利于SEO，给更加美观</p><p>首先安装插件</p><pre><code>npm install hexo-abbrlink --save</code></pre><p>再站点配置文件下添加如下配置：</p><pre><code>abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre><p>将站点配置文件的 permalink 的值修改为：</p><pre><code>permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</code></pre><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821183107.png" style="zoom:80%;"><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821183134.png" style="zoom:80%;"><p>懒加载对服务器前端有一定的缓解压力作用</p><p>使用图片懒加载需要安装插件：hexo-lazyload-image</p><pre><code>npm install hexo-lazyload-image --save</code></pre><p>之后在站点配置文件下添加下面的代码：</p><pre><code>#loading-imagelazyload:  enable: true  onlypost: false  loadingImg: /medias/loading.gif</code></pre><p><strong>存在问题1：</strong></p><p>查看大图，发现全部为 loading 加载图，原因是因为懒加载插件与 lightgallery 插件冲突，解决办法如下：</p><p>修改主题文件下的 matery.js，在 108 行左右添加以下代码：</p><pre><code>$(document).find('img[data-original]').each(function(){        $(this).parent().attr("href", $(this).attr("data-original"));});</code></pre><p><strong>存在问题2：</strong></p><p>点击首页 logo 不是跳转到首页，而是查看 logo 图片，解决办法如下：<br>修改主题下 layout/_partial/header.ejs 文件，原代码为：</p><pre><code>&lt;div class="brand-logo"&gt;    &lt;a href="&lt;%- url_for() %&gt;" class="waves-effect waves-light"&gt;        &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) { %&gt;        &lt;img src="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.logo) %&gt;" class="logo-img" alt="LOGO"&gt;        &lt;% } %&gt;        &lt;span class="logo-span"&gt;&lt;%= config.title %&gt;&lt;/span&gt;    &lt;/a&gt;&lt;/div&gt;</code></pre><p>修改为：</p><pre><code>&lt;div class="brand-logo"&gt;    &lt;a href="&lt;%- url_for() %&gt;" class="waves-effect waves-light"&gt;        &lt;div&gt;            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) { %&gt;            &lt;img src="&lt;%= theme.logo %&gt;" class="logo-img" alt="LOGO"&gt;            &lt;% } %&gt;            &lt;span class="logo-span"&gt;&lt;%- config.title %&gt;&lt;/span&gt;        &lt;/div&gt;    &lt;/a&gt;&lt;/div&gt;</code></pre><p><strong>懒加载优化</strong></p><p>打开 Hexo根目录 &gt;node_modules &gt; hexo-lazyload-image &gt; lib &gt; simple-lazyload.js 文件</p><p>第 9 行修改为：</p><pre><code>&amp;&amp; rect.top &lt;= (window.innerHeight +240 || document.documentElement.clientHeight +240)</code></pre><p>作用：提前 240 个像素加载图片；当然这个值也可以根据自己情况修改</p><h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><p>gulp 代码压缩</p><p>因为 hexo 生成的 html、css、js 等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的 “压缩”。</p><p>进入站点根目录下依次执行下面的命令：</p><pre><code># 全局安装gulp模块npm install gulp -g# 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save# 额外的功能模块npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre><p>在 Hexo 根目录新建文件 gulpfile.js，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为 gulpfile.js，否则会出错！）</p><pre><code>var gulp = require("gulp");var debug = require("gulp-debug");var cleancss = require("gulp-clean-css"); //css压缩组件var uglify = require("gulp-uglify"); //js压缩组件var htmlmin = require("gulp-htmlmin"); //html压缩组件var htmlclean = require("gulp-htmlclean"); //html清理组件var imagemin = require("gulp-imagemin"); //图片压缩组件var changed = require("gulp-changed"); //文件更改校验组件var gulpif = require("gulp-if"); //任务 帮助调用组件var plumber = require("gulp-plumber"); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require("gulp-babel");var es2015Preset = require("babel-preset-es2015");var del = require("del");var Hexo = require("hexo");var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象// 清除public文件夹gulp.task("clean", function () {    return del(["public/**/*"]);});// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task("generate", function () {    return hexo.init().then(function () {        return hexo            .call("generate", {                watch: false            })            .then(function () {                return hexo.exit();            })            .catch(function (err) {                return hexo.exit(err);            });    });});// 启动Hexo服务器gulp.task("server", function () {    return hexo        .init()        .then(function () {            return hexo.call("server", {});        })        .catch(function (err) {            console.log(err);        });});// 部署到服务器gulp.task("deploy", function () {    return hexo.init().then(function () {        return hexo            .call("deploy", {                watch: false            })            .then(function () {                return hexo.exit();            })            .catch(function (err) {                return hexo.exit(err);            });    });});// 压缩public目录下的js文件gulp.task("compressJs", function () {    return gulp        .src(["./public/**/*.js", "!./public/libs/**"]) //排除的js        .pipe(gulpif(!isScriptAll, changed("./public")))        .pipe(gulpif(isDebug, debug({ title: "Compress JS:" })))        .pipe(plumber())        .pipe(            gulpBabel({                presets: [es2015Preset] // es5检查机制            })        )        .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩        .pipe(gulp.dest("./public")); //输出到目标目录});// 压缩public目录下的css文件gulp.task("compressCss", function () {    var option = {        rebase: false,        //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]        compatibility: "ie7" //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]        //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]        //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    };    return gulp        .src(["./public/**/*.css", "!./public/**/*.min.css"]) //排除的css        .pipe(gulpif(!isScriptAll, changed("./public")))        .pipe(gulpif(isDebug, debug({ title: "Compress CSS:" })))        .pipe(plumber())        .pipe(cleancss(option))        .pipe(gulp.dest("./public"));});// 压缩public目录下的html文件gulp.task("compressHtml", function () {    var cleanOptions = {        protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g, //忽略处理        unprotect: /&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi //特殊处理    };    var minOption = {        collapseWhitespace: true, //压缩HTML        collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;        removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;        removeScriptTypeAttributes: true, //删除&lt;script&gt;的type="text/javascript"        removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type="text/css"        removeComments: true, //清除HTML注释        minifyJS: true, //压缩页面JS        minifyCSS: true, //压缩页面CSS        minifyURLs: true //替换页面URL    };    return gulp        .src("./public/**/*.html")        .pipe(gulpif(isDebug, debug({ title: "Compress HTML:" })))        .pipe(plumber())        .pipe(htmlclean(cleanOptions))        .pipe(htmlmin(minOption))        .pipe(gulp.dest("./public"));});// 压缩 public/medias 目录内图片gulp.task("compressImage", function () {    var option = {        optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）        progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片        interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染        multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化    };    return gulp        .src("./public/medias/**/*.*")        .pipe(gulpif(!isScriptAll, changed("./public/medias")))        .pipe(gulpif(isDebug, debug({ title: "Compress Images:" })))        .pipe(plumber())        .pipe(imagemin(option))        .pipe(gulp.dest("./public"));});// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器gulp.task(    "build",    gulp.series(        "clean",        "generate",        "compressHtml",        "compressCss",        "compressJs",        "compressImage",        gulp.parallel("deploy")    ));// 默认任务gulp.task(    "default",    gulp.series(        "clean",        "generate",        gulp.parallel("compressHtml", "compressCss", "compressJs","compressImage")    ));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</code></pre><p>直接在 Hexo 根目录执行 gulp 或者 gulp default ，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码和图片压缩。<br>在 Hexo 根目录执行 gulp build ，这个命令与第 1 种相比是：在最后又加了个 hexo d ，等于说生成、压缩文件后又帮你自动部署了</p><p>如果不想用图片压缩可以把第 154 行的 “compressImage”, 和第 165 行的 ,”compressImage” 去掉即可</p><h3 id="添加-Valine-评论系统"><a href="#添加-Valine-评论系统" class="headerlink" title="添加 Valine 评论系统"></a>添加 Valine 评论系统</h3><p><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine 官方文档</a></p><p>如果注册过 LeanCloud，请点击此处进行<a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener">登录</a>，未注册的请点击<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">注册</a></p><p>步骤：</p><ol><li><p>首先创建一个云存储开发版，名称自定义</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200822132032.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200822132216.png"></p></li></ol><ol start="2"><li><p>在“设置“，”应用 Keys”，找到你的appid和appke，配置到主题中valine配置的地方，启用valine</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200822132340.png"></p></li></ol><pre><code># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  # true即为开启评论系统  appId:   #此处填写你的appid  appKey:  #此处填写你的appkey  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder  background:  /medias/comment_bg.png</code></pre><p>   然后执行相关部署命令，查看效果即可</p><ol start="3"><li><p>在“设置“，”安全中心”，”Web 安全域名”，添加自己的域名。</p></li><li><p>在“设置“，”安全中心”，”服务开关”，数据存储要打开。</p></li></ol><h4 id="Valine升级"><a href="#Valine升级" class="headerlink" title="Valine升级"></a>Valine升级</h4><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821182907.png" style="zoom:80%;"><p>拷贝我的<a href="https://cdn.jsdelivr.net/gh/guixinchn/cdn/Valine.min.js" target="_blank" rel="noopener">Valine.min.js</a>文件，直接替换你主题目录 /source/libs/valine/下的 Valine.min.js文件</p><p>有些属性调整了，主题下的_config.yml的valine属性如下：</p><pre><code># To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: true  appId: xxxxxxxxxxxxxxxx  appKey: xxxxxxxxxxxx  notify: true  verify: true  visitor: true  avatar: 'monsterid' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: '留下你的足迹..' # Comment Box placeholder  background: /medias/comment_bg.png  count: true  enableQQ: 673888718  recordIP: true  requiredFields:     - nick    - mail  guest_info:     - nick    - mail    - link  master:     - xxxxxxxxxxxxxxx  # md5加密后的博主邮箱  metaPlaceholder:  # 输入框的背景文字    nick: 昵称/QQ号(必填)    mail: 邮箱(必填)    link: 网址(https://)  lang: zh-CN  tagMeta: # The String Array of Words to show Flag.[Just Only xCss Style mode]    - 博主    - 小伙伴    - 访客  friends: # The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode]    - xxxxxxxxxxxxxx    -</code></pre><h4 id="修改valine-ejs"><a href="#修改valine-ejs" class="headerlink" title="修改valine.ejs"></a>修改valine.ejs</h4><p>Matery 主题使用的ejs模板预编译，在主题目录下的layout_partial/valine.ejs中修改，原始为：</p><pre><code>new Valine({        el: '#vcomments',        appId: '&lt;%- theme.valine.appId %&gt;',        appKey: '&lt;%- theme.valine.appKey %&gt;',        notify: '&lt;%- theme.valine.notify %&gt;' === 'true',        verify: '&lt;%- theme.valine.verify %&gt;' === 'true',        visitor: '&lt;%- theme.valine.visitor %&gt;' === 'true',        avatar: '&lt;%- theme.valine.avatar %&gt;',        pageSize: '&lt;%- theme.valine.pageSize %&gt;',        lang: '&lt;% if (config.language == "zh-CN") {  %&gt;zh-cn&lt;% } else { %&gt;en&lt;% } %&gt;',        placeholder: '&lt;%= theme.valine.placeholder %&gt;'    });</code></pre><p>修改后为：</p><pre><code>let metaPlaceholder = &lt;%-  JSON.stringify(theme.valine.metaPlaceholder) %&gt; ;//这里要换行new Valine({        el: '#vcomments',        appId: '&lt;%- theme.valine.appId %&gt;',        appKey: '&lt;%- theme.valine.appKey %&gt;',        notify: '&lt;%- theme.valine.notify %&gt;' === 'true',        verify: '&lt;%- theme.valine.verify %&gt;' === 'true',        visitor: '&lt;%- theme.valine.visitor %&gt;' === 'true',        avatar: '&lt;%- theme.valine.avatar %&gt;',        pageSize: '&lt;%- theme.valine.pageSize %&gt;',        lang: '&lt;%- theme.valine.lang %&gt;',        placeholder: '&lt;%= theme.valine.placeholder %&gt;',        meta: &lt;%- '["' + theme.valine.guest_info.join('", "') + '"]' %&gt;,        recordIP: '&lt;%- theme.valine.recordIP %&gt;' === 'true',        enableQQ: '&lt;%- theme.valine.avatar %&gt;',        requiredFields: &lt;%- '["' + theme.valine.master.join('", "') + '"]' %&gt;,        master: &lt;%- '["' + theme.valine.master.join('", "') + '"]' %&gt;,        friends: &lt;%- '["' + theme.valine.friends.join('", "') + '"]' %&gt;,        tagMeta: &lt;%- '["' + theme.valine.tagMeta.join('", "') + '"]' %&gt;,        metaPlaceholder: metaPlaceholder,    });</code></pre><p>验证昵称和邮箱可以加上以下代码：</p><pre><code>document.body.addEventListener('click', function(e) {    if (e.target.classList.contains('vsubmit')) {        const email = document.querySelector('input[type=email]');        const nick = document.querySelector('input[name=nick]');        const reg = /^[A-Za-z0-9_-\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;        if (!email.value || !nick.value || !reg.test(email.value)) {            const str = `&lt;div class="valert txt-center"&gt;&lt;div class="vtext"&gt;请填写正确的昵称和邮箱！&lt;/div&gt;&lt;/div&gt;`;            const vmark = document.querySelector('.vmark');            vmark.innerHTML = str;            vmark.style.display = 'block';            e.stopPropagation();            setTimeout(function() {                vmark.style.display = 'none';                vmark.innerHTML = '';            }, 2500);        }    }    }, true);</code></pre><p>填写昵称邮箱和网址的地方样式修改：</p><pre><code>.v[data-class="v"] .vwrap .vheader .vinput {  width: 32%;  border-bottom: 1px dashed #dedede;}</code></pre><h4 id="增强-Valine-的邮件通知"><a href="#增强-Valine-的邮件通知" class="headerlink" title="增强 Valine 的邮件通知"></a>增强 Valine 的邮件通知</h4><p>开始部署项目</p><p>依次点击左侧的云引擎 -&gt; 部署 -&gt; 项目部署 -&gt;Git 部署 -&gt; 配置 Git。然后 Git 的地址填写：<a href="https://github.com/sviptzk/Valine-Admin-Server%E3%80%82%E7%84%B6%E5%90%8E%E5%86%8D%E6%AC%A1%E7%82%B9%E5%87%BB" target="_blank" rel="noopener">https://github.com/sviptzk/Valine-Admin-Server。然后再次点击</a> Git 部署 -&gt; 部署即可</p><p>绑定评论管理的域名</p><p>国区版LeanCloud 不给予免费的二级域名了，因此必须绑定备案域名。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820114643.png"></p><p>国际版LeanCloud 给予一个免费的二级域名。</p><p>设置域名白名单</p><p>域名可设置多个，一行一个。需要写协议头。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820114915.png"></p><p>设置环境变量</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820115040.png" style="zoom: 80%;"><table><thead><tr><th align="center">变量名</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">SITE_NAME</td><td align="center">[必填] 网站名称</td><td align="center">咕咕星Blog</td></tr><tr><td align="center">SITE_URL</td><td align="center">[必填] 网站地址，最后不要加 <code>/</code></td><td align="center"><a href="https://www.guixinchn.cn/">https://www.guixinchn.cn</a></td></tr><tr><td align="center">SMTP_USER</td><td align="center">[必填] SMTP 服务用户名，一般为邮箱地址。</td><td align="center"><a href="mailto:673888718@qq.com">673888718@qq.com</a></td></tr><tr><td align="center">SMTP_PASS</td><td align="center">[必填] SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</td><td align="center">fvcfqhgudnalzyqa</td></tr><tr><td align="center">SMTP_SERVICE</td><td align="center">[新版支持] 邮件服务提供商，<a href="https://nodemailer.com/smtp/well-known/#supported-services" target="_blank" rel="noopener">内置支持</a></td><td align="center">QQ</td></tr><tr><td align="center">SENDER_NAME</td><td align="center">[必填] 寄件人名称。</td><td align="center">咕咕星</td></tr><tr><td align="center">TO_EMAIL</td><td align="center">[可选] 博主通知收件地址，默认使用 SMTP_USER</td><td align="center"><a href="mailto:673888718@qq.com">673888718@qq.com</a></td></tr><tr><td align="center">BLOGGER_EMAIL</td><td align="center">[可选] 如果设置则作为后台管理员邮箱（<code>/sign-up</code> 页面设置），不设置则默认以 <code>SMTP_USER</code></td><td align="center"><a href="mailto:673888718@qq.com">673888718@qq.com</a></td></tr><tr><td align="center">TEMPLATE_NAME</td><td align="center">[必填] 设置提醒邮件的主题</td><td align="center">custom2</td></tr><tr><td align="center">AKISMET_KEY</td><td align="center">[可选] Akismet Key 用于垃圾评论检测，设为 MANUAL_REVIEW 开启人工审核，留空不使用反垃圾</td><td align="center">xxxx</td></tr><tr><td align="center">ADMIN_URL</td><td align="center">[可选] 后台管理地址 (<strong>非博客地址</strong>)</td><td align="center"><a href="https://server.guixinchn.cn/" target="_blank" rel="noopener">https://server.guixinchn.cn</a></td></tr><tr><td align="center">COMMENT</td><td align="center">[可选] 评论 div 的 ID 名</td><td align="center">#post-comment</td></tr><tr><td align="center">SCKEY</td><td align="center">[可选] server 酱的 SCKEY</td><td align="center">xxx</td></tr><tr><td align="center">AKISMET_KEY</td><td align="center">[可选] Akismet Key 用于垃圾评论检测</td><td align="center">xxxxxxxxxxxx</td></tr><tr><td align="center">ICP</td><td align="center">[可选] 备案信息，直接填写即可。</td><td align="center">xxxxxx</td></tr><tr><td align="center">INFO</td><td align="center">[可选] 自定义信息输出，支持 HTML 代码</td><td align="center"><code>&lt;p style='color:red'&gt;test&lt;p&gt;</code></td></tr><tr><td align="center">favicon</td><td align="center">[可选] 网页 favicon 图标</td><td align="center"><a href="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png</a></td></tr><tr><td align="center">SPAM_WORDS</td><td align="center">[可选] 需要对屏蔽的关键词，关键词用半角逗号分隔</td><td align="center">单号，物流</td></tr><tr><td align="center">MAIN_COLOR</td><td align="center">[可选] 仅针对 <code>custom2</code> 模板主题的主要颜色</td><td align="center">#2558FF</td></tr><tr><td align="center">MAIN_IMG</td><td align="center">[可选] 仅针对 <code>custom2</code> 模板主题的头图</td><td align="center"><a href="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png%60" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png`</a></td></tr></tbody></table><p>此项目的主题字段</p><table><thead><tr><th align="center">主题</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">default</td><td align="center">默认主题</td></tr><tr><td align="center">rainbow</td><td align="center">原版的 rainbow</td></tr><tr><td align="center">custom1</td><td align="center">基于<a href="https://pbas.club/" target="_blank" rel="noopener">🎉梨花町の肾兄さん🎉</a>的模板</td></tr><tr><td align="center">custom2</td><td align="center">对 custom1 的改进版</td></tr></tbody></table><p>添加完成后，点击保存。并且重新部署实例。</p><p>登录后台为刚刚设置的后台域名，如果登录不上则在域名后面加上/sign-up</p><h4 id="微信公众号通知"><a href="#微信公众号通知" class="headerlink" title="微信公众号通知"></a>微信公众号通知</h4><p>首先需要到 server 的官网，开启微信提醒并获取 SCKEY。</p><p><a href="http://sc.ftqq.com/" target="_blank" rel="noopener">官网</a>写的很详细，这里不在过多赘述</p><h4 id="防止服务器休眠"><a href="#防止服务器休眠" class="headerlink" title="防止服务器休眠"></a>防止服务器休眠</h4><p>关于自动休眠的官方说法：<a href="https://leancloud.cn/docs/leanengine_plan.html#hash643734278" target="_blank" rel="noopener">点击查看</a></p><p>关于服务器休眠唤醒的问题，以前的方法是通过自带的定时任务进行唤醒，但现在不可以了，因为官方进行限制了。因此使用的是 GitHub+Actions</p><p>进入自己的Github首页–&gt;右上角settings–&gt;左下角Developer settings–&gt;选择 Personal access tokens–&gt;Generate new token</p><p>设置名字为 <code>GITHUB_TOKEN</code> , 然后勾选 repo , admin:repo_hook , workflow 等选项，最后点击 Generate token 即可</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820214121.png" style="zoom:80%;"><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820214202.png"></p><p>接下来 FORK 项目。</p><p>地址：<a href="https://github.com/blogimg/WakeLeanCloud" target="_blank" rel="noopener">https://github.com/blogimg/WakeLeanCloud</a></p><p>成功 FORK 后，进入项目的设置。添加你的 leancloud 的后台地址（也就是评论管理的后台地址）</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820214654.png" style="zoom:80%;"><p>选择 Secrets，添加你的<strong>评论后台地址</strong>，一定是 Leancloud 的后台地址（环境变量 ADMIN_URL），而不是你的博客地址。</p><p>接下来对自己的项目点个 star 就能启动了，启动后请切换到 actions，看看是否运行成功。</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820215117.png" style="zoom:80%;"><p>在leanclound中云引擎日志中也可以看到有没有被Get到</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820215527.png"></p><p>至于重发函数，还是和往常一样，但由于流控限制，因此最好能保证重发时机器是活着的。不然很可能会触发<em>因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠</em></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820215619.png"></p><p>选择 resend-mails 云函数，Cron 表达式为 <code>0 59 7 * * *</code>，表示每天早 8 点 20 分检查过去 24 小时内漏发的通知邮件并补发（请尽量确保你设置的时间机器是醒着的）</p><h3 id="GitHub评论系统"><a href="#GitHub评论系统" class="headerlink" title="GitHub评论系统"></a>GitHub评论系统</h3><p>可以先去这个地方看一下 Gitalk 的效果 <a href="https://gitalk.github.io/" target="_blank" rel="noopener">传送门</a></p><ol><li><p>首先要在GitHub上去新建一个仓库用于存放评论的内容</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821184043.png" style="zoom:80%;"></li><li><p>在本仓库Settings中下拉可以看到issues功能默认开启，没有的话需要打开</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821184245.png" style="zoom:80%;"></li><li><p>需要注册一个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Github Application</a></p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821184801.png" style="zoom:80%;"><p>注意两个URL就是你网站的域名</p></li><li><p>完成之后便到了如下页面,其中 <code>Client ID</code> 和 <code>Client Secret</code> 是我们需要的东西</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821185224.png" style="zoom:80%;"></li><li><p>最后设置 Theme 目录下<code>_config.yml</code>文件</p><pre><code># the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: true  owner: guixinchn  repo: BlogTalk  oauth:   clientId: xxxxxxxxxx   clientSecret: xxxxxxxxxxxxxxxxxx  admin: guixinchn</code></pre></li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821201352.png"></p><p>   第一次查看效果需要登录 github 账号，关联授权后，就可以使用评论系统了，如果出现404，则把刚刚的clientId参数也传过去</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821221602.png" style="zoom:80%;"><h2 id="网站提交"><a href="#网站提交" class="headerlink" title="网站提交"></a>网站提交</h2><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><p>可以在百度搜索引擎中输入：<code>site:www.guixinchn.cn</code>来查看网站是否被收录</p><p>如果没有，可以在下面提交网址</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820170818.png" style="zoom:80%;"><h4 id="添加自己的站点到百度"><a href="#添加自己的站点到百度" class="headerlink" title="添加自己的站点到百度"></a>添加自己的站点到百度</h4><p>登录<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a>，站点管理-&gt;添加网站，输入域名再验证所有权即可。如果是用的是GitHub，则不能使用<code>HTML标签验证</code>，因为百度的蜘蛛爬取不到GitHub的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820160912.png"></p><p>我使用第三种dns解析，复制二级域名前面的英文，粘贴在对应的位置如图所示：</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820161307.png" style="zoom:80%;"><h4 id="向百度推送自己的资源"><a href="#向百度推送自己的资源" class="headerlink" title="向百度推送自己的资源"></a>向百度推送自己的资源</h4><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。</p><p>手动提交即手动地将链接一次性提交给百度。自动提交有：主动推送，自动推送，sitemap。主动推送需要安装相关插件，自动推送Metary主题已经自带了，并且默认开启，sitemap提交填写<code>baidusitemap.xml</code>文件地址即可</p><h4 id="安装相应的站点地图插件"><a href="#安装相应的站点地图插件" class="headerlink" title="安装相应的站点地图插件"></a>安装相应的站点地图插件</h4><pre><code>npm install hexo-generator-sitemap --save              #sitemapnpm install hexo-generator-baidu-sitemap --save        #百度sitemap</code></pre><p>这两个插件是用来生成 <code>Sitemap文件</code> 的插件，而 <code>Sitemap</code> 是用来告知搜索引擎我们的网站上有哪些可供抓取的网页的。</p><p><strong>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的</strong></p><p>安装后直接执行<code>hexo cl&amp;&amp;hexo g</code>命令，然后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml文件</code>，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p><h5 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h5><p>有<code>sitemap文件</code>之后，再将生成的<code>sitemap文件</code>提交给百度或者其他搜索引擎</p><p>百度方式：在普通收录，资源提交的sitemap那里填写自己<code>sitemap文件</code>的URL地址即可</p><pre><code>https://你的域名/baidusitemap.xml</code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820164928.png"></p><p>提交后会有状态提示：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820165029.png"></p><p>这里需要注意<strong>严格区分http和https</strong></p><h5 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h5><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><pre><code>&lt;script&gt;(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();&lt;/script&gt;</code></pre><p>matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre><code># 百度搜索资源平台提交链接baiduPush: true</code></pre><h5 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h5><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">hexo-baidu-url-submit</a></p><pre><code>npm install hexo-baidu-url-submit --save</code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre><code># hexo-baidu-url-submit  百度主动推送baidu_url_submit:  count: 80 # 提交最新的一个链接  host: www.guixinchn.cn # 在百度站长平台中注册的域名  token: xxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820165939.png"></p><p>再加入新的<code>deploy</code>：</p><pre><code>deploy:- type: baidu_url_submitter</code></pre><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820201150.png"></p><p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br>推送成功时,会有如下终端提示!</p><p>如图39个链接推送成功</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820201946.png"></p><h3 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h3><p>同样可以在百度搜索引擎中输入：<code>site:www.guixinchn.cn</code>来查看网站是否被收录</p><p>如果没有，可以在下面提交网址</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820202618.png" style="zoom:80%;"><p>登录<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长平台</a>，添加自己的域名</p><p><code>DNS验证</code>（就是验证下网站是不是你的）就是域名解析那里添加一条TXT解析记录</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820202445.png"></p><p>然后点击验证即可</p><p>再到谷歌的<a href="https://search.google.com/search-console/" target="_blank" rel="noopener">Search Console</a>，添加自己的<code>sitemap</code>地址查看</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200820202952.png"></p><p>接下来就是等待谷歌收录了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matery </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery主题美化</title>
      <link href="/posts/952f.html"/>
      <url>/posts/952f.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装Matery主题"><a href="#下载安装Matery主题" class="headerlink" title="下载安装Matery主题"></a>下载安装Matery主题</h2><p>首先在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网主题</a>里面搜索<strong>Matery</strong>主题点击进入作者大大的<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">github</a>，然后下载 master 分支的最新稳定版的代码，解压缩后将 hexo-theme-matery 的文件夹重命名为matery，复制到Hexo 的 themes 文件夹中</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200819224655.png"></p><p>可以在themes 文件夹下使用Git clone命令来下载：</p><pre class=" language-git"><code class="language-git">git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>下载完后，将站点配置文件中的 theme 值修改为你下载主题的文件名</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: matery</code></pre><p>一些其他在站点目录配置：</p><p><code>language: zh-CN</code>网站的语言设置</p><p><code>url: https://www.guixinchn.cn</code>    网站的网站（域名）</p><p><code>per_page: 12</code>建议修改为 6 的倍数，主题排版比较好</p><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><h4 id="1、标签页"><a href="#1、标签页" class="headerlink" title="1、标签页"></a>1、标签页</h4><pre><code>hexo new page "tags"</code></pre><p>编辑新建的/source/tags/index.md文件</p><pre><code>---title: tagsdate: 2020-02-23 19:37:07type: "tags"layout: "tags"---</code></pre><h4 id="2、分类页"><a href="#2、分类页" class="headerlink" title="2、分类页"></a>2、分类页</h4><pre><code>hexo new page "categories"</code></pre><p>编辑新建的/source/categories/index.md文件</p><pre><code>---title: categoriesdate: 2020-02-23 19:37:07type: "categories"layout: "categories"---</code></pre><h4 id="3、关于页面"><a href="#3、关于页面" class="headerlink" title="3、关于页面"></a>3、关于页面</h4><pre><code>hexo new page "about"</code></pre><p>编辑新建的/source/about/index.md文件</p><pre><code>---title: aboutdate: 2020-02-23 19:37:07type: "about"layout: "about"---</code></pre><h4 id="4、留言板"><a href="#4、留言板" class="headerlink" title="4、留言板"></a>4、留言板</h4><pre><code>hexo new page "contact"</code></pre><p>编辑新建的/source/contact/index.md文件</p><pre><code>---title: contactdate: 2020-02-23 19:37:07type: "contact"layout: "contact"---</code></pre><h4 id="5、友情链接"><a href="#5、友情链接" class="headerlink" title="5、友情链接"></a>5、友情链接</h4><pre><code>hexo new page "friends"</code></pre><p>编辑新建的/source/friends/index.md文件</p><pre><code>---title: friendsdate: 2020-02-23 19:37:07type: "friends"layout: "friends"---</code></pre><p>然后在博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre><code>[    {        "avatar": "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/csdn.png",        "name": "Blog",        "introduction": "CSDN社区",        "url": "https://blog.csdn.net/guixinchn",        "title": "CSDN"    },     {        "avatar": "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/bokeyuan.png",        "name": "Blog",        "introduction": "博客园",        "url": "https://www.cnblogs.com/guixinchn/",        "title": "博客园"    },     {        "avatar": "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/github.png",        "name": "github",        "introduction": "github",        "url": "https://github.com/guixinchn",        "title": "github"    },     {        "avatar": "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/touxiang.jpg",        "name": "Blog",        "introduction": "咕咕星",        "url": "https://ythan.top",        "title": "咕咕星"    }]</code></pre><h4 id="6、添加-404-页面"><a href="#6、添加-404-页面" class="headerlink" title="6、添加 404 页面"></a>6、添加 404 页面</h4><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821174825.png"></p><p>首先再站点根目录下的 source 文件夹下新建 404.md 文件，里面内容如下：</p><pre><code>---title: 404date: 2020-02-23 19:37:07type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面了"---</code></pre><p>紧接着再新建主题文件夹的 layout 目录下新建 404.ejs 文件，添加内容如下：</p><pre><code>&lt;style type="text/css"&gt;    /* don't remove. */    .about-cover {        height: 90.2vh;    }&lt;/style&gt;&lt;div class="bg-cover pd-header about-cover"&gt;    &lt;div class="container"&gt;        &lt;div class="row"&gt;            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2"&gt;                &lt;div class="brand"&gt;                    &lt;div class="title center-align"&gt;                        404                    &lt;/div&gt;                    &lt;div class="description center-align"&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');&lt;/script&gt;</code></pre><h4 id="7、添加自定义页面"><a href="#7、添加自定义页面" class="headerlink" title="7、添加自定义页面"></a>7、添加自定义页面</h4><p>首先在站点目录下的 source 文件夹下新建 aboutme 文件，文件名可自定义，然后编写一个 index.html 放入 aboutme 文件夹下，然后在主题配置文件下的导航配置信息添加下面的配置：</p><pre><code>About:    url: /    icon: fas fa-address-card    children:      - name: 关于我        url: /about        icon: fas fa-user-circle      - name: Another    #这是新添加的，在原有配置基础上添加        url: /aboutme        icon: fa fa-user-secret</code></pre><p>然后在站点配置文件下，找到 skip_render，在后面添加属性，如下：</p><pre><code># 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件skip_render:     - aboutme/**     - aaa/**    - bbb/**</code></pre><h3 id="配置菜单导航"><a href="#配置菜单导航" class="headerlink" title="配置菜单导航"></a>配置菜单导航</h3><p>配置基本菜单导航的名称、路径 url 和图标 icon.</p><p>图标 icon 可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找</p><pre><code># main menu navigation url and icon# 配置菜单导航的名称、路径和图标icon.menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Contact:    url: /contact    icon: fas fa-comments  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h3 id="添加-emoji-表情支持"><a href="#添加-emoji-表情支持" class="headerlink" title="添加 emoji 表情支持"></a>添加 emoji 表情支持</h3><p>需要安装插件 hexo-filter-github-emojis </p><pre><code>npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>原本的代码显示行号和内容分开了，不美观</p><p>代码美化需要安装hexo-prism-plugin 插件</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre><code>highlight:            #代码块的设置  enable: false            #开启代码块高亮  line_number: true        #如果未指定语言，则启用自动检测  auto_detect: false        #显示行数  tab_replace: ''        #用n个空格替换tabs；如果值为空，则不会替换tabs  wrap: ture  hljs: false# 关闭原有的代码高亮，使用自己的prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><table><thead><tr><th align="center"><strong>参数KEY</strong></th><th align="center"><strong>可选值</strong></th></tr></thead><tbody><tr><td align="center">mode</td><td align="center">realtime (Parse code on browser in real time)<br>preprocess (Preprocess code in node)</td></tr><tr><td align="center">theme</td><td align="center">default<br>coy<br>dark<br>funky<br>okaidia<br>solarizedlight<br>tomorrow<br>twilight<br>如果要更多的选择访问： <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a></td></tr><tr><td align="center">line_number</td><td align="center">true (Show line numbers)<br>false (Default, Hide line numbers)</td></tr><tr><td align="center">no_assets</td><td align="center">true (Stop loading asset files)<br>false (Default, load script and stylesheets files)</td></tr></tbody></table><p><strong>注意：</strong></p><p>hexo花括号显示失败的话，需要将hexo版本降级，改成hexo4.2.0版本就好了</p><p>卸载hexo5.0<br><code>npm uninstall hexo --save</code></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821010640.png"></p><p>安装4.2.0版本</p><p><code>npm install hexo@4.2.0 --save</code></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821010658.png"></p><h3 id="主题的搜索功能"><a href="#主题的搜索功能" class="headerlink" title="主题的搜索功能"></a>主题的搜索功能</h3><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175035.png" style="zoom: 50%;"><p>需要安装hexo-generator-search插件</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175215.png"></p><p>需要安装 hexo-wordcount 插件</p><pre><code>npm i --save hexo-wordcount</code></pre><p>主题下的 _config.yml 文件中，激活以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175254.png"></p><p>需要安装hexo-generator-feed插件</p><pre><code>npm install hexo-generator-feed --save</code></pre><p> Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>在 public 文件夹中即可看到 atom.xml 文件，则已经安装成功</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;% if (theme.socialLink.github) { %&gt;    &lt;a href="&lt;%= theme.socialLink.github %&gt;" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-github"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 source/medias/reward 文件中修改</p><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175417.png" style="zoom:80%;"><p>支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p><p>主题的 _config.yml 配置文件中激活 music 配置即可：</p><pre><code># Whether to display the musics.# 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: 咕咕星的歌单  autoHide: true    # hide automaticaly  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 2888085740     #require    song id / playlist id / album id / search keyword  fixed: false       # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠  hideLrc: true     # 隐藏歌词</code></pre><blockquote><p>server 可选 netease（网易云音乐），tencent（QQ 音乐），kugou（酷狗音乐），xiami（虾米音乐），</p><p>baidu（百度音乐）。</p><p>type 可选 song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist 的 id 即为这串数字。</p></blockquote><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><table><thead><tr><th align="center">配置选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">Markdown 的文件标题</td><td align="center">文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="center">文件创建时的日期时间</td><td align="center">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="center">author</td><td align="center">根 _config.yml 中的 author</td><td align="center">文章作者</td></tr><tr><td align="center">img</td><td align="center">featureImages 中的某个值</td><td align="center">文章特征图，推荐使用图床</td></tr><tr><td align="center">top</td><td align="center">true</td><td align="center">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center">false</td><td align="center">v1.0.2 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td align="center">v1.0.2 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td align="center">toc</td><td align="center">true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td align="center">mathjax</td><td align="center">false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr><tr><td align="center">reprintPolicy</td><td align="center">cc_by</td><td align="center">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p>注意:</p><ol><li>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 /source/css/matery.css 文件中修改</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #2558FF 0%, #0f9d58 100%);}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 代码中：</p><pre><code>$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 getDay() 改为 getHours() 或者 getMinutes() 即可。</p><h4 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h4><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821180219.png" style="zoom:80%;"><pre><code>#这是根目录下的配置文件信息# Sitetitle: 咕咕星Blog        #网站标题subtitle: 世界很暗，但是你来了 #网站副标题description: 本网站是个人兴趣爱好，总结分享经验，记录生活点滴的平台，希望在以后的学习旅途中，走出自己的风景。    #网站描述description 主要用于5E0，告诉搜索引擎一个关于您站点的简单描述keywords: [HTML, CSS, JavaScript, JQuery, java, linux等]        #网站的关键词。使用半角逗号“，”分隔多个关键词author: 咕咕星            #您的名字language: zh-CN            #网站使用的语言。建议修改为zh-CNtimezone:            #网站时区。Hexo默认使用您电脑的时区。# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.pnglogo: https://cdn.jsdelivr.net/gh/guixinchn/image/blog/logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 如果放弃太早，你永远都不知道自己会错过什么。  sub2: 没有伞的孩子必须努力奔跑！  sub3: 花开不是为了花落，而是为了开的更加灿烂。  sub4: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</code></pre><p>注意：</p><p>网站打字效果副标题默认有两个，即 sub1 和 sub2，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 sub1 和 sub2 后面继续添加即可，然后在去主题目录下的 layout 文件夹下的_partial 文件夹，修改 bg-cover-content.ejs 文件，大约在 12 行左右，如下面所示：</p><pre><code>&lt;div class="description center-align"&gt;                &lt;% if (theme.subtitle.enable) { %&gt;                &lt;span id="subtitle"&gt;&lt;/span&gt;                &lt;script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11"&gt;&lt;/script&gt;                &lt;script&gt;                    var typed = new Typed("#subtitle", {                        strings: ['&lt;%= theme.subtitle.sub1 %&gt;',                                   '&lt;%= theme.subtitle.sub2 %&gt;',                                  '&lt;%= theme.subtitle.sub3 %&gt;',                                   '&lt;%= theme.subtitle.sub4 %&gt;'],                        startDelay: &lt;%= theme.subtitle.startDelay %&gt;,                        typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;,                        loop: &lt;%= theme.subtitle.loop %&gt;,                        backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;,                        showCursor: &lt;%= theme.subtitle.showCursor %&gt;                    });                &lt;/script&gt;                &lt;% } else { %&gt;                    &lt;%= config.description %&gt;                &lt;% } %&gt;            &lt;/div&gt;</code></pre><p><strong>社交链接的修改</strong></p><p>在主题的配置文件中修改：</p><pre><code># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  qq: 673888718  weixin: https://cdn.jsdelivr.net/gh/guixinchn/image/blog/wechat.jpg  github: #https://github.com/guixinchn  email: guixinchn@gmail.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  csdn: https://blog.csdn.net/guixinchn  cnblogs: https://www.cnblogs.com/guixinchn  rss: true # true、false</code></pre><p>期中的 weixin 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 ejs 文件，文件在主题目录下的 layout 文件夹下的_partial 文件夹，修改 social-link.ejs，添加相关的配置，比如：</p><pre><code>&lt;% if (theme.socialLink.github) { %&gt;    &lt;a href="&lt;%= theme.socialLink.github %&gt;" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-github"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.email) { %&gt;    &lt;a href="mailto:&lt;%= theme.socialLink.email %&gt;" class="tooltipped" target="_blank" data-tooltip="邮件联系我" data-position="top" data-delay="50"&gt;        &lt;i class="fas fa-envelope-open"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.facebook) { %&gt;    &lt;a href="&lt;%= theme.socialLink.facebook %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的Facebook: &lt;%= theme.socialLink.facebook %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-facebook-f"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.twitter) { %&gt;    &lt;a href="&lt;%= theme.socialLink.twitter %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的Twitter: &lt;%= theme.socialLink.twitter %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-twitter"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.qq) { %&gt;    &lt;a href="tencent://AddContact/?fromId=50&amp;fromSubId=1&amp;subcmd=all&amp;uin=&lt;%= theme.socialLink.qq %&gt;" class="tooltipped" target="_blank" data-tooltip="QQ联系我: &lt;%= theme.socialLink.qq %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-qq"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.weibo) { %&gt;    &lt;a href="&lt;%= theme.socialLink.weibo %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的微博: &lt;%= theme.socialLink.weibo %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-weibo"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.zhihu) { %&gt;    &lt;a href="&lt;%= theme.socialLink.zhihu %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的知乎: &lt;%= theme.socialLink.zhihu %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-zhihu1"&gt;知&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.rss) { %&gt;    &lt;a href="&lt;%- url_for('/atom.xml') %&gt;" class="tooltipped" target="_blank" data-tooltip="RSS 订阅" data-position="top" data-delay="50"&gt;        &lt;i class="fas fa-rss"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.jianshu) { %&gt;    &lt;a href="&lt;%= theme.socialLink.jianshu %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的简书: &lt;%= theme.socialLink.jianshu %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-jianshu"&gt;简&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.csdn) { %&gt;    &lt;a href="&lt;%= theme.socialLink.csdn %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-csdn"&gt;C&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.juejin) { %&gt;    &lt;a href="&lt;%= theme.socialLink.juejin %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的掘金: &lt;%= theme.socialLink.juejin %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-juejin"&gt;掘&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.cnblogs) { %&gt;    &lt;a href="&lt;%= theme.socialLink.cnblogs %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的博客园: &lt;%= theme.socialLink.cnblogs %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-juejin"&gt;博&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.weixin) { %&gt;    &lt;a href="&lt;%= theme.socialLink.weixin %&gt;" class="tooltipped" target="_blank" data-tooltip="微信联系我: &lt;%= theme.socialLink.weixin %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-weixin"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><h2 id="其他一些个性DIY"><a href="#其他一些个性DIY" class="headerlink" title="其他一些个性DIY"></a>其他一些个性DIY</h2><h3 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175556.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175632.png"></p><p>实现方法，引入 js 文件，在主题文件下的 /source/js/ 下新建 FunnyTitle.js，增加以下代码：</p><pre><code> var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () {     if (document.hidden) {         $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png");         document.title = '我相信你还会回来的！';         clearTimeout(titleTime);     }     else {         $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png");         document.title = '哈哈，我就知道！' + OriginTitle;         titleTime = setTimeout(function () {             document.title = OriginTitle;         }, 2000);     } });</code></pre><p>然后在添加到 themes/matery/layout/layout.ejs 引入</p><p><code>&lt;script src="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/js/FunnyTitle.js') %&gt;"&gt;&lt;/script&gt;</code></p><h3 id="关于我页面添加个人简历"><a href="#关于我页面添加个人简历" class="headerlink" title="关于我页面添加个人简历"></a>关于我页面添加个人简历</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175705.png"></p><p>打开 theme/matery/layout/about.ejs 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre><code>&lt;div class="card"&gt;     &lt;div class="card-content"&gt;         &lt;div class="card-content article-card-content"&gt;             &lt;div class="title center-align" data-aos="zoom-in-up"&gt;                 &lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('个人简历') %&gt;              &lt;/div&gt;                 &lt;div id="articleContent" data-aos="fade-up"&gt;                     &lt;%- page.content %&gt;                 &lt;/div&gt;           &lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200821175911.png"></p><p>可以在about页面自定义内容</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matery </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp九大内置对象常用方法及四个作用域</title>
      <link href="/posts/b91f.html"/>
      <url>/posts/b91f.html</url>
      
        <content type="html"><![CDATA[<h1 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h1><p>jsp中的九大内置对象是自带的，不需要new 也能使用的对象</p><h2 id="out："><a href="#out：" class="headerlink" title="out："></a>out：</h2><p>**print(），println( )**方法</p><p>输出对象，向客户端输出内容</p><h2 id="request："><a href="#request：" class="headerlink" title="request："></a>request：</h2><p>请求对象，存储“客户端向服务端发送的请求信息”<br>request对象的常见方法：</p><ul><li><strong>String getParameter(String name)</strong> ：根据请求的字段名key （input标签的name属性值） ，返回字段值value （input标签的value属性值）</li><li>**String[] getParameterValues(String name)**：根据请求的字段名key ，返回多个字段值value  （checkbox）</li><li><strong>void setCharacterEncoding(“编码格式utf-8”)</strong> ：设置post方式的请求编码  （tomcat7以前默认iso-8859-1，tomcat8以后改为了utf-8）</li><li><strong>getRequestDispatcher(“B.jsp”).forward(request,response)</strong> ：请求转发 的方式跳转页面   A - &gt; B</li><li><strong>ServletContext getServerContext()</strong>:获取项目的ServletContext对象</li><li>**Cookie getCookies()**：获取一个cookie对象</li><li>**void setAttribute(String name，Object obj)**：设置属性值（新增，修改）</li><li>**Object getAttribute(String name)**：根据属性名，查找属性值</li></ul><h2 id="response："><a href="#response：" class="headerlink" title="response："></a>response：</h2><p>响应对象</p><p>response对象的常见方法：</p><ul><li>**void addCookie( Cookie cookie )**， 服务端向客户端增加cookie对象</li><li><strong>void sendRedirect(String location ) throws IOException</strong> ：页面跳转的一种方式（重定向）</li><li>**void setContetType(String type)**：设置服务端响应的编码（设置服务端的contentType类型）</li></ul><h2 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h2><p>会话对象，session存储在服务端</p><p>实现机制：客户端第一次请求服务端时，服务端会产生一个session对象（用于保存该客户的信息），并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session)，且产生一个cookie，并且该cookie的name=JSESSIONID ,value=服务端sessionId的值；然后服务端会在响应客户端的同时将该cookie发送给客户端</p><p>客户端第二次请求服务端时，服务端会先用客户端cookie种的JSESSIONID 去服务端的session中匹配sessionid,如果匹配成功（cookie  jsessionid和sesion sessionid），说明此用户 不是第一次访问,无需登录；</p><p>session对象的常见方法：</p><ul><li><strong>String getId()</strong> ：获取sessionId </li><li><strong>boolean isNew()</strong> ：判断是否是 新用户（第一次访问）</li><li>**void invalidate()**：使session失效  （退出登录、注销）</li><li>**void setAttribute(String name，Object obj)**：设置属性值（新增，修改）</li><li>**Object getAttribute(String name)**：根据属性名，查找属性值</li><li><strong>void setMaxInactiveInterval(秒)</strong> ：设置最大有效 非活动时间 </li><li>**int getMaxInactiveInterval()**：获取最大有效 非活动时间</li></ul><h2 id="application："><a href="#application：" class="headerlink" title="application："></a>application：</h2><p>全局对象</p><p>application对象的常见方法：</p><ul><li><strong>String getContextPath()</strong>    ：虚拟路径</li><li>**String getRealPath(String name)**：绝对路径（虚拟路径 相对的绝对路径）</li><li>**void setAttribute(String name，Object obj)**：设置属性值（新增，修改）</li><li>**Object getAttribute(String name)**：根据属性名，查找属性值</li></ul><h2 id="pagecontext"><a href="#pagecontext" class="headerlink" title="pagecontext:"></a>pagecontext:</h2><p>JSP页面容器</p><ul><li>**void setAttribute(String name，Object obj)**：设置属性值（新增，修改）</li><li>**Object getAttribute(String name)**：根据属性名，查找属性值</li></ul><h2 id="config"><a href="#config" class="headerlink" title="config:"></a>config:</h2><p>配置对象（服务器配置信息）</p><h2 id="page："><a href="#page：" class="headerlink" title="page："></a>page：</h2><p>当前JSP页面对象（相当于java中的this）</p><h2 id="exception："><a href="#exception：" class="headerlink" title="exception："></a>exception：</h2><p>异常对象</p><h1 id="四个作用域"><a href="#四个作用域" class="headerlink" title="四个作用域"></a>四个作用域</h1><p>​        </p><table><thead><tr><th align="center"></th><th align="center">四种范围对象</th><th align="center">作用域</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center">（page对象）</td><td align="center">请求数据当前页面有效</td></tr><tr><td align="center">request</td><td align="center">请求对象</td><td align="center">请求数据同一次请求有效，（重定向后无效）</td></tr><tr><td align="center">session</td><td align="center">会话对象</td><td align="center">请求数据同一次会话有效</td></tr><tr><td align="center">appliation</td><td align="center">全局对象</td><td align="center">请求数据全局有效（整个项目有效）</td></tr></tbody></table><p>以上4个对象共有的方法：</p><ul><li><p>Object getAttribute(String name):根据属性名，查找属性值</p></li><li><p>void setAttribute(String name,Object obj) :设置属性值（新增，修改）</p></li><li><p>setAttribute(“a”,”b”) ;//如果a对象之前不存在，则新建一个a对象 ；如果a之前已经存在，则将a的值改为b</p></li><li><p>void removeAttribute(String name)：根据属性名，删除对象</p></li></ul><p>注意：尽量使用最小的范围。因为对象的范围越大，造成的性能损耗越大。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_缓冲流、转换流、序列化流</title>
      <link href="/posts/782c.html"/>
      <url>/posts/782c.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、缓冲流"><a href="#一、缓冲流" class="headerlink" title="一、缓冲流"></a>一、缓冲流</h1><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p><strong>构造方法</strong></p><p>创建字节缓冲输入流：<br><code>BufferedInputStream bis = new BufferedInputStream(new FileInputStream("bis.txt"));</code><br>创建字节缓冲输出流：<br><code>BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("bos.txt"));</code></p><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录开始时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"ChromeSetup.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\ChromeSetup_copy.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读写数据</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录结束时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缓冲流使用数组复制时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果为：缓冲流使用数组复制时间<span class="token operator">:</span><span class="token number">10</span> 毫秒</code></pre><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><p><strong>构造方法</strong></p><p>创建字符缓冲输入流<br><code>BufferedReader br = new BufferedReader(new FileReader("br.txt"));</code><br>创建字符缓冲输出流<br><code>BufferedWriter bw = new BufferedWriter(new FileWriter("bw.txt"));</code></p><p><strong>特有方法</strong></p><ul><li>BufferedReader： public String readLine() : 读一行文字。</li><li>BufferedWriter： public void newLine() : 写一行行分隔符,由系统属性定义符号。</li></ul><p>readLine 方法演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义字符串,保存读取的一行文字</span>        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取,读取到最后返回null</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果为<span class="token operator">:</span>aaaaabbbbbccccc</code></pre><p>newLine 方法演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建流对象</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"ccccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出换行</span>        bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"bbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"aaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果为<span class="token operator">:</span>cccccbbbbbaaaaa</code></pre><h1 id="二、转换流"><a href="#二、转换流" class="headerlink" title="二、转换流"></a>二、转换流</h1><h2 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h2><p>转换流 java.io.InputStreamReader ，是Reader的子类,，读取字节并使用指定的字符集将其解码为字符。它的字符集可以自定义，也可以用平台的默认字符集。</p><p><strong>构造方法</strong></p><ul><li>InputStreamReader(InputStream in) : 创建一个使用默认字符集的字符流。</li><li>InputStreamReader(InputStream in, String charsetName) : 创建一个指定字符集的字符流。</li></ul><h2 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h2><p>转换流 java.io.OutputStreamWriter ，是Writer的子类，用指定的字符集将字符编码为字节。它的字符集可以自定义，也可以用平台的默认字符集。</p><p><strong>构造方法</strong></p><ul><li>OutputStreamWriter(OutputStream in) : 创建一个使用默认字符集的字符流。 </li><li>OutputStreamWriter(OutputStream in, String charsetName) : 创建一个指定字符集的字符流。</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.定义文件路径</span>        String a<span class="token operator">=</span> <span class="token string">"a.txt"</span><span class="token punctuation">;</span>        String b<span class="token operator">=</span> <span class="token string">"b.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.创建流对象</span>        <span class="token comment" spellcheck="true">// 2.1 转换输入流,指定GBK编码</span>        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.2 转换输出流,默认utf8编码</span>        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.读写数据</span>        <span class="token comment" spellcheck="true">// 3.1 定义数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2 定义长度</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.3 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 循环写出</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.释放资源</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、序列化流"><a href="#三、序列化流" class="headerlink" title="三、序列化流"></a>三、序列化流</h1><h2 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h2><p>java.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><p><strong>构造方法</strong></p><p><code>public ObjectOutputStream(OutputStream out) ： 创建一个指定OutputStream的ObjectOutputStream。</code></p><p>对象序列化注意：</p><p>该类必须实现 java.io.Serializable 接口，Serializable是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出 NotSerializableException 。</p><p>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用 transient 关键字修饰</p><p><strong>写出对象方法：</strong></p><p>public final void writeObject (Object obj) : 将指定的对象写出</p><h2 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。</p><p><strong>构造方法</strong></p><p><code>public ObjectInputStream(InputStream in) ： 创建一个指定InputStream的ObjectInputStream。</code></p><p>对象反序列化注意：</p><p>必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 ClassNotFoundException 异常。</p><p>能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个 InvalidClassException 异常</p><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用 ObjectInputStream <strong>读取对象的方法：</strong></p><p>public final Object readObject () : 读取一个对象</p><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 学生对象</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"zahgnsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"wagnwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 序列化操作</span>        <span class="token function">serializ</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反序列化</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"list.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取对象,强转为ArrayList类型</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializ</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> arrayList<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 序列化流</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"list.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出对象</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="四、打印流"><a href="#四、打印流" class="headerlink" title="四、打印流"></a>四、打印流</h1><h2 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h2><p>java.io.PrintStream 类，该类能够方便地打印各种数据类型的值</p><p><strong>构造方法</strong></p><p><code>public PrintStream(String fileName) ： 使用指定的文件名创建一个新的打印流</code></p><p>System.out 就是 PrintStream 类型的，只不过它的流向是系统规定的，打印在控制台上</p><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 控制台直接输出张三</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建打印流,指定文件的名称</span>        PrintStream zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"zs.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置系统的打印流流向,输出到zs.txt</span>        System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用系统的打印流,zs.txt中输出张三</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL忘记root密码，错误号码1045解决办法</title>
      <link href="/posts/2020.html"/>
      <url>/posts/2020.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200811170418.png"></p><h2 id="停止MySQL服务"><a href="#停止MySQL服务" class="headerlink" title="停止MySQL服务"></a>停止MySQL服务</h2><p>Windows可以右键我的电脑–管理–服务和应用程序–服务–找到对应的服务停止掉</p><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><p>切换到MySQL安装路径下：D:\mysql-5.7.24-winx64\bin；如果已经配了环境变量，则不用再安装目录</p><p>打开CMD命令窗口，在命令行输入：<code>mysqld -nt --skip-grant-table</code></p><p>8.0以上数据库输入：<code>mysqld --console --skip-grant-tables --shared-memory</code></p><h2 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h2><p>以管理员身份重新启动一个cmd命令窗口，输入：mysql -uroot -p，Enter进入数据库</p><p>如果不想改密码，只是想看原来的密码的话，可以在命令行执行这个语句</p><pre class=" language-mysql"><code class="language-mysql">select host,user,password from mysql.user;//即可查看到用户和密码</code></pre><p><strong>注意：</strong>MySQL5.7以上的没有password字段了，被加密了改成authentication_string</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200811174437.png"></p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>在命令行下 <strong>依次</strong> 执行下面的语句　</p><pre class=" language-mysql"><code class="language-mysql">use mysqlupdate user set password=password("new_password") where user="root";// 'new_password' 这里改为你要设置的密码flush privileges;quit</code></pre><p><strong>注意：</strong>MySQL5.7以上更改语句替换为</p><pre class=" language-mysql"><code class="language-mysql">update mysql.user set authentication_string=password('new_password') where user='root';// 'new_password' 这里改为你要设置的密码</code></pre><p>MySQL5.7版本密码设置规则：<br>必须至少包含一个大写字母、一个小写字母、一个特殊符号、一个数字，密码长度至少为8个字符</p><h2 id="重启MySQL"><a href="#重启MySQL" class="headerlink" title="重启MySQL"></a>重启MySQL</h2><p>重新启动MYSQL，输入密码登录即可！</p><p>mysql -u root -p 输入密码，即可登录成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高速图床picgo+typora+github+jsdelivr</title>
      <link href="/posts/c770.html"/>
      <url>/posts/c770.html</url>
      
        <content type="html"><![CDATA[<h1 id="picgo"><a href="#picgo" class="headerlink" title="picgo"></a>picgo</h1><p>PicGo 算得上一款比较优秀的图床工具。它是一款用Electron-vue开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等常用图床，功能强大，简单易用<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">下载地址</a></p><h2 id="使用步骤-github为例"><a href="#使用步骤-github为例" class="headerlink" title="使用步骤(github为例)"></a>使用步骤(github为例)</h2><h3 id="1、新建仓库"><a href="#1、新建仓库" class="headerlink" title="1、新建仓库"></a>1、新建仓库</h3><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810113251.png" style="zoom:60%;"><p>这里仓库名以后不能修改，是图片的链接地址</p><h3 id="2、生成令牌"><a href="#2、生成令牌" class="headerlink" title="2、生成令牌"></a>2、生成令牌</h3><p>点击个人设置的settings–Developer settings–personal access tokens–generate new token创建一个新的令牌</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810113454.png"></p><p>勾选repo即可，名称自定义</p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810113612.png" style="zoom:80%;"><p>千万记得复制下面的令牌，关了之后就永远不再显示</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810113940.png"></p><h3 id="3、下载安装PicGo"><a href="#3、下载安装PicGo" class="headerlink" title="3、下载安装PicGo"></a>3、下载安装PicGo</h3><p>自己下载对应系统的稳定版<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">下载地址</a></p><h3 id="4、配置picgo"><a href="#4、配置picgo" class="headerlink" title="4、配置picgo"></a>4、配置picgo</h3><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810114910.png" style="zoom:80%;"><ul><li><p>仓库名：即你的仓库名</p></li><li><p>分支名：默认 master</p></li><li><p>Token：就是刚刚复制的令牌</p></li><li><p>指定存储路径：仓库的august/这个文件夹</p></li><li><p>自定义域名 <a href="https://cdn.jsdelivr.net/gh/guixinchn/image" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/guixinchn/image</a></p><p>格式 <code>https://cdn.jsdelivr.net/gh/[username]/[仓库名]</code></p></li></ul><h3 id="5、上传文件，图片"><a href="#5、上传文件，图片" class="headerlink" title="5、上传文件，图片"></a>5、上传文件，图片</h3><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810115033.png" style="zoom:80%;"><p>可以直接拖拽文件上传，或者剪贴图片上传，上传之后就可以得到一个Markdown连接地址，或者可选成一个URL链接地址，进入你仓库对应的文件夹，也可以找到对应的文件</p><p>文件链接地址格式为（以github为例）：</p><p><code>https://cdn.jsdelivr.net/gh/ 你的用户名 / 你的仓库名/ 文件夹/（文件名）</code></p><h1 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h1><p>简单的说这是一款免费的，高效的文本编辑器，功能强大，支持实时预览的 Markdown 文本，支持浏览HTML文件内容，可查看源代码。它有 OS X、Windows、Linux 三个平台的版本，<a href="https://www.typora.io/" target="_blank" rel="noopener">官网下载链接</a></p><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p>一个git的服务器提供商  帮我们共享代码（托管代码）  也是一个开源平台，不过对国内人不太友好，网站加载速度，下载速度堪忧</p><h1 id="jsdelivr"><a href="#jsdelivr" class="headerlink" title="jsdelivr"></a>jsdelivr</h1><p>jsDelivr 是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」。我们可以借此搭建一个免费、全球访问速度超快的图床。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必备CDN加速远程Github仓库</title>
      <link href="/posts/c699.html"/>
      <url>/posts/c699.html</url>
      
        <content type="html"><![CDATA[<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810105948.jpg"></p><p>内容分发网络（英语：<strong>C</strong>ontent <strong>D</strong>elivery <strong>N</strong>etwork或<strong>C</strong>ontent <strong>D</strong>istribution <strong>N</strong>etwork，缩写：<strong>CDN</strong>）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p><h3 id="jsDelivr"><a href="#jsDelivr" class="headerlink" title="jsDelivr"></a>jsDelivr</h3><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/august/20200810110008.png"></p><p>jsDelivr 是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」。jsDelivr 有一个十分好用的功能——可以加速 Github 仓库的文件。我们可以借此搭建一个免费、全球访问速度超快的图床。</p><p>jsDelivr + Github 便是免费且好用的 CDN，非常适合博客网站使用</p><h3 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h3><h4 id="1、创建Github仓库"><a href="#1、创建Github仓库" class="headerlink" title="1、创建Github仓库"></a>1、创建Github仓库</h4><p>仓库名称自定义，复制仓库地址</p><h4 id="2、连接仓库，拉去仓库内容"><a href="#2、连接仓库，拉去仓库内容" class="headerlink" title="2、连接仓库，拉去仓库内容"></a>2、连接仓库，拉去仓库内容</h4><p>本地新建一个文件夹，文件夹名称自定义，然后进入文件夹，右键打开Git Bsah Here，输入一下命令</p><pre class=" language-git"><code class="language-git">git initgit remote add origin 你新建仓库的HTTP或者SSH地址链接git pull origin master #将仓库拉取到本地文件夹</code></pre><h4 id="3、放入文件内容，推送文件"><a href="#3、放入文件内容，推送文件" class="headerlink" title="3、放入文件内容，推送文件"></a>3、放入文件内容，推送文件</h4><p>把需要上传的文件放进刚刚常见的目录，可以是多层目录，然后在Git上执行</p><pre class=" language-git"><code class="language-git">git add .    #(.表示所有的)git commit -m <span class="token string">'添加文件内容描述'</span> git push origin master   #将本地仓库文件推送到GitHub新建的仓库</code></pre><p><strong>注：jsDelivr 不支持加载超过 20M 的资源</strong></p><h4 id="4、发布版本号（可选）"><a href="#4、发布版本号（可选）" class="headerlink" title="4、发布版本号（可选）"></a>4、发布版本号（可选）</h4><p>点击仓库的 release，进行版本的发布。</p><h4 id="5、获取资源"><a href="#5、获取资源" class="headerlink" title="5、获取资源"></a>5、获取资源</h4><p>通过 jsdelivr 引用资源</p><p>使用方法：<a href="https://cdn.jsdelivr.net/gh/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/</a> 你的用户名 / 你的仓库名 @发布的版本号 / 文件路径</p><h4 id="6、后续"><a href="#6、后续" class="headerlink" title="6、后续"></a>6、后续</h4><p>如果以后在向 cdn 库里添加或者修改文件，首先把文件添加到本地仓库，然后依次在本地 cdn 仓库文件位置执行以下命令：</p><pre class=" language-git"><code class="language-git">git pull origin master  #拉取远程仓库到本地git add .git commit -m <span class="token string">'描述内容'</span>git push origin master  # 推送到GitHub仓库</code></pre><p>然后用上面的链接，就能获取图片，css样式，js脚本，等所需要的的文件资源内容</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_Lambda表达式四个最基本的函数式接口</title>
      <link href="/posts/abbe.html"/>
      <url>/posts/abbe.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>当需要启动一个线程去完成任务时，通常会通过 java.lang.Runnable 接口来定义任务内容，并使用java.lang.Thread 类来启动该线程。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 匿名内部类</span>        Runnable task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 覆盖重写抽象方法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行中！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于 Runnable 的匿名内部类用法，可以分析出几点内容：</p><ul><li>Thread 类需要 Runnable 接口作为参数，其中的抽象 run 方法是用来指定线程任务内容的核心；<ul><li>为了指定 run 的方法体，需要 Runnable 接口的实现类；</li><li>为了省去定义一个 RunnableImpl 实现类的麻烦，使用匿名内部类；</li><li>必须覆盖重写抽象 run 方法</li></ul></li></ul><p>借助Java 8的全新语法，上述 Runnable 接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02LambdaRunnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行中！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码和刚才的执行效果是完全一样的，可以在jdk1.8或更高的编译级别下通过</p><p>Lambda表达式的标准格式为：<br><code>(参数类型 参数名称) -&gt; { 代码语句 }</code></p><p><strong>格式说明：</strong><br>（1）当（形参列表）是空参（），那么括号不能省略</p><p>（2）当（形参列表）只有一个形参时，并且类型也可以确定或可以推断时，可以省略（）和数据类型，要省略就一起省略.</p><p>（3）当（形参列表）有多个时，而且类型也可以确定或可以推断时，可以省略数据类型</p><p>（4）当{Lambda体}中不止语句时，不能省略}，并且每一个语句还必须加；</p><p>（5）当{Lambda体}只有一个语句时，可以省略{}和该语句的：</p><p>（6）当{Lambda体}只有一个语句，并且是一个{return 返回值；}语句，那么可以一起省略return和}和这个；</p><p>（7）当{Lambda体}如果不止一个语句，那么如果函数式接口的抽象方法有返回值，那么必须有return</p><h3 id="四个最基本的函数式接口："><a href="#四个最基本的函数式接口：" class="headerlink" title="四个最基本的函数式接口："></a>四个最基本的函数式接口：</h3><p>消费型接口Consumer<t>：void accept（T t）<br>特点是，它的抽象方法：有参无返回值</t></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804173049.png"></p><p>供给型接口 Supplier<t>：T get（）<br>特点是，它的抽象方法：无参有返回值</t></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804173153.png"></p><p>判断型接口 Predicate<t>：boolean test（T t）<br>特点是，它的抽象方法；boolean test（有参）无论你给我什么参数，都是用来判断条件，结果只有true，false</t></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804173215.png"><br>功能型接口 Function&lt;T，R&gt;：R apply（T t）<br>特点是，它的抽象方法：有参有返回值</p><h4 id="方法引用和构造器引用"><a href="#方法引用和构造器引用" class="headerlink" title="方法引用和构造器引用"></a>方法引用和构造器引用</h4><p>当{Lambda体}只有一句时，并且是通过调用一个类或一个对象的方法来完成的，并且函数式接口的抽象方法的形参列表和返回值类型与你调用的这个类或对象的方法的形参列表和返回值类型要对应。</p><p>当{Lambda体}只有一句时，并且是通过创建一个对象来完成的，并且函数式接口的抽象方法的形参列表和返回值类型与你构造器的形参列表与所创建的对象的类型要对应。</p><p>方法引用和构造器引用语法:</p><p>类名/对象名：：方法名<br>类名/数组类型：：new</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804173233.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_List、Set、Conllections工具类</title>
      <link href="/posts/fa53.html"/>
      <url>/posts/fa53.html</url>
      
        <content type="html"><![CDATA[<h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><p>java.util.List 接口继承自 Collection 接口</p><p>List接口特点：</p><ol><li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol><h3 id="List接口中常用方法"><a href="#List接口中常用方法" class="headerlink" title="List接口中常用方法"></a>List接口中常用方法</h3><ul><li>public void add(int index, E element) : 将指定的元素，添加到该集合中的指定位置上。</li><li>public E get(int index) :返回集合中指定位置的元素。</li><li>public E remove(int index) : 移除列表中指定位置的元素, 返回的是被移除的元素。</li><li>public E set(int index, E element) :用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建List集合对象</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 往 尾部添加 指定元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add(int index,String s) 往指定位置添加</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String remove(int index) 删除指定位置元素 返回被删除元素</span>        <span class="token comment" spellcheck="true">// 删除索引位置为2的元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除索引位置为2的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String set(int index,String s)</span>        <span class="token comment" spellcheck="true">// 在指定位置 进行 元素替代（改）</span>        <span class="token comment" spellcheck="true">// 修改指定位置元素</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"钱七"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String get(int index) 获取指定位置元素</span>        <span class="token comment" spellcheck="true">// 跟size() 方法一起用 来 遍历的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//还可以使用增强for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="List的子类"><a href="#List的子类" class="headerlink" title="List的子类"></a>List的子类</h3><h5 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h5><p>java.util.ArrayList 集合数据存储的结构是数组结构。元素增删慢，查找快，由于日常开发中使用最多的功能为查询数据、遍历数据，所以 ArrayList 是最常用的集合。</p><h5 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h5><p>java.util.LinkedList 集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><p>LinkedList是一个双向链表</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804183234.png"><br>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法</p><ul><li>public void addFirst(E e) :将指定元素插入此列表的开头。</li><li>public void addLast(E e) :将指定元素添加到此列表的结尾。</li><li>public E getFirst() :返回此列表的第一个元素。</li><li>public E getLast() :返回此列表的最后一个元素。</li><li>public E removeFirst() :移除并返回此列表的第一个元素。</li><li>public E removeLast() :移除并返回此列表的最后一个元素。</li><li>public E pop() :从此列表所表示的堆栈处弹出一个元素。</li><li>public void push(E e) :将元素推入此列表所表示的堆-栈。</li><li>public boolean isEmpty() ：如果列表不包含元素，则返回true。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        link<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>link<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断集合是否为空</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//弹出集合中的栈顶元素</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><p>java.util.Set 接口和 java.util.List 接口一样，同样继承自 Collection 接口， Set 接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><h3 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h3><p>java.util.HashSet 是 Set 接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)</p><p>HashSet 是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于： hashCode 与 equals 方法。</p><p>在给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一</p><p>创建自定义Student类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>            Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合对象 该集合中存储 Student类型对象</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> stuSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stuSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student stu2 <span class="token operator">:</span> stuSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>执行结果：Student <span class="token punctuation">[</span>name<span class="token operator">=</span>李四<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">37</span><span class="token punctuation">]</span>Student <span class="token punctuation">[</span>name<span class="token operator">=</span>张三<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">]</span>Student <span class="token punctuation">[</span>name<span class="token operator">=</span>王五<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">]</span></code></pre><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>java.util.LinkedHashSet元素存放进去保证有序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果：bbbaaaabcccc</code></pre><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>JDK1.5以后。出现了简化操作。… 用在参数上，称之为可变参数。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 23</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 完成数组 所有元素的求和 原始写法</span>    <span class="token comment" spellcheck="true">/*public static int getSum(int[] arr) {        int sum = 0;        for (int a : arr) {            sum += a;        }        return sum;    }*/</span>    <span class="token comment" spellcheck="true">// 可变参数写法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p>java.utils.Collections 是集合工具类，用来对集合进行操作。</p><p>部分方法如下：</p><ul><li>public static <t> boolean addAll(Collection<t> c, T… elements) :往集合中添加一些元素。</t></t></li><li>public static void shuffle(List&lt;?&gt; list) 打乱顺序 :打乱集合顺序。</li><li>public static <t> void sort(List<t> list) :将集合中元素按照默认规则排序。</t></t></li><li>public static <t> void sort(List<t> list，Comparator&lt;? super T&gt; ) :将集合中元素按照指定规则排<br>序。</t></t></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//采用工具类完成往集合中添加元素</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">7</span>，<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序方法</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果：<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span></code></pre><h3 id="Comparator比较器"><a href="#Comparator比较器" class="headerlink" title="Comparator比较器"></a>Comparator比较器</h3><p>那么在JAVA中提供了两种比较实现的方式，一种是比较死板的采用 java.lang.Comparable 接口去实现，一种是灵活的当我需要做排序的时候在去选择的java.util.Comparator 接口完成。</p><p>public int compare(String o1, String o2) ：比较其两个参数的顺序。</p><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序， 则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）</p><p> 如果要按照降序排序 则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p><p>比如:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"lba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序方法 按照第一个单词的降序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>zba<span class="token punctuation">,</span>lba<span class="token punctuation">,</span> cba<span class="token punctuation">,</span> aba<span class="token punctuation">]</span></code></pre><h3 id="Comparable和Comparator两个接口的区别"><a href="#Comparable和Comparator两个接口的区别" class="headerlink" title="Comparable和Comparator两个接口的区别"></a>Comparable和Comparator两个接口的区别</h3><p>Comparable：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，无需指定比较器。</p><p>Comparator：强行对某个对象进行整体排序。允许在排序顺序上实现精确控制。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Conllection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_Collection、Map、泛型的使用</title>
      <link href="/posts/679.html"/>
      <url>/posts/679.html</url>
      
        <content type="html"><![CDATA[<h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><p>集合按照其存储结构可以分为两大类，分别是<br>单列集合 java.util.Collection<br>双列集合 java.util.Map</p><p>Collection：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是java.util.List 和 java.util.Set 。</p><p>List 的特点是元素有序、元素可重复<br>Set 的特点是元素无序，而且不可重复</p><p>List 接口的主要实现类有 java.util.ArrayList 和 java.util.LinkedList</p><p>Set 接口的主要实现类有 java.util.HashSet 和 java.util.TreeSet </p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804183916.png"></p><h2 id="Collection-常用功能"><a href="#Collection-常用功能" class="headerlink" title="Collection 常用功能"></a>Collection 常用功能</h2><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li>public boolean add(E e) ： 把给定的对象添加到当前集合中 。<ul><li>public void clear() :清空集合中所有的元素。</li><li>public boolean remove(E e) : 把给定的对象在当前集合中删除。</li><li>public boolean contains(E e) : 判断当前集合中是否包含给定的对象。</li><li>public boolean isEmpty() : 判断当前集合是否为空。</li><li>public int size() : 返回集合中元素的个数。</li><li>public Object[] toArray() : 把集合中的元素，存储到数组中。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合对象</span>        <span class="token comment" spellcheck="true">// 使用多态形式</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用方法</span>        <span class="token comment" spellcheck="true">// 添加功能 boolean add(String s)</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[张三, 李四, 王五]</span>        <span class="token comment" spellcheck="true">// boolean contains(E e) 判断o是否在集合中存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断 张三 是否在集合中"</span> <span class="token operator">+</span> coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断 张三 是否在集合中true</span>        <span class="token comment" spellcheck="true">// boolean remove(E e) 删除在集合中的o元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除李四："</span> <span class="token operator">+</span> coll<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除李四：true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作之后集合中元素:"</span> <span class="token operator">+</span> coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作之后集合中元素:[张三, 王五]</span>        <span class="token comment" spellcheck="true">// size() 集合中有几个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中有"</span> <span class="token operator">+</span> coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//集合中有2个元素</span>        <span class="token comment" spellcheck="true">// Object[] toArray()转换成一个Object数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三  王五</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// void clear() 清空集合</span>        coll<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中内容为："</span> <span class="token operator">+</span> coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//集合中内容为：[]</span>        <span class="token comment" spellcheck="true">// boolean isEmpty() 判断是否为空</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><p>public Iterator iterator() : 获取集合对应的迭代器，用来遍历集合中的元素的。</p><p>迭代：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用多态方式 创建对象</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素到集合</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token comment" spellcheck="true">// 使用迭代器 遍历 每个集合对象都有自己的迭代器</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 泛型指的是 迭代出 元素的数据类型</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断是否有迭代元素</span>            String s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取迭代出的元素</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在进行集合元素取出时，如果集合中已经没有元素了，还继续使用迭代器的next方法，将会发生java.util.NoSuchElementException没有集合元素的错误。</p><h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><p>JDK1.5以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>元素的数据类型 变量 <span class="token operator">:</span> Collection集合or数组<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写操作代码</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用增强for遍历数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a代表数组中的每个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用增强for遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span>coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//接收变量s代表 代表被遍历到的集合元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><p>Map 中的集合，元素是成对存在的，每个元素由键与值两部分组成，通过键可以找对所对应的值。常用的有HashMap集合、LinkedHashMap集合</p><p>**HashMap&lt;K,V&gt;**：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p><p>**LinkedHashMap&lt;K,V&gt;**：存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p><h3 id="Map接口中的常用方法"><a href="#Map接口中的常用方法" class="headerlink" title="Map接口中的常用方法"></a>Map接口中的常用方法</h3><ul><li>public V put(K key, V value) : 把指定的键与指定的值添加到Map集合中。</li><li>public V remove(Object key) : 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li>public V get(Object key) 根据指定的键，在Map集合中获取对应的值。</li><li>boolean containsKey(Object key) 判断集合中是否包含指定的键。</li><li>public Set<k> keySet() : 获取Map集合中所有的键，存储到Set集合中。</k></li><li>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 map对象</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素到集合</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老三"</span><span class="token punctuation">,</span> <span class="token string">"小三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老四"</span><span class="token punctuation">,</span> <span class="token string">"小四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老五"</span><span class="token punctuation">,</span> <span class="token string">"小五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String remove(String key)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"老三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 想要查看 老四的儿子 是谁</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"老四"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"老三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Map集合遍历"><a href="#Map集合遍历" class="headerlink" title="Map集合遍历"></a>Map集合遍历</h3><p><strong>即通过元素中的键，获取键所对应的值</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 map对象</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素到集合</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老三"</span><span class="token punctuation">,</span> <span class="token string">"小三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老四"</span><span class="token punctuation">,</span> <span class="token string">"小四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老五"</span><span class="token punctuation">,</span> <span class="token string">"小五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有的键 获取键集</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历键集 得到 每一个键</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//key 就是键</span>        <span class="token comment" spellcheck="true">//获取对应值</span>        String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"的儿子是："</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Entry键值对对象</strong><br>Entry 将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历 Map 集合时，就可以从每一个键值对（ Entry ）对象中获取对应的键与对应的值。<br>常用方法：<br>public K getKey() ：获取Entry对象中的键。<br>public V getValue() ：获取Entry对象中的值。</p><p>了获取所有Entry对象的方法：<br>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 map对象</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素到集合</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老三"</span><span class="token punctuation">,</span> <span class="token string">"小三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老四"</span><span class="token punctuation">,</span> <span class="token string">"小四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老五"</span><span class="token punctuation">,</span> <span class="token string">"小五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 所有的 entry对象 entrySet</span>        Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历得到每一个entry对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析</span>        String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"的儿子是:"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>LinkedHashMap，它是链表和哈希表组合的一个数据存储结构，保证成对元素唯一，且有顺序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老三"</span><span class="token punctuation">,</span> <span class="token string">"小三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老四"</span><span class="token punctuation">,</span> <span class="token string">"小四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"老五"</span><span class="token punctuation">,</span> <span class="token string">"小五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p><p>泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。</p><p>格式：<code>修饰符 class 类名&lt;代表泛型的变量&gt; { }</code></p><p>在创建对象的时候确定泛型,也可以是自定义的泛型类</p><p>例如：<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><p>格式：<code>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数){ }</code></p><p>调用方法时，确定泛型的类型</p><h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><p>格式：<code>修饰符 interface接口名&lt;代表泛型的变量&gt; { }</code></p><p><strong>1、定义类时确定泛型的类型</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImp1</span> <span class="token keyword">implements</span> <span class="token class-name">MyGenericInterface</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//泛型E的值就是String类型。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImp2</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MyGenericInterface</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>确定泛型：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyImp2<span class="token operator">&lt;</span>String<span class="token operator">></span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyImp2</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        my<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>泛型的通配符:不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。<br>此时只能接受数据,不能往该集合中存储数据。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>Intger<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//？代表可以接收任意类型</span></code></pre><h3 id="受限泛型"><a href="#受限泛型" class="headerlink" title="受限泛型"></a>受限泛型</h3><p>泛型的上限：<br>格式： 类型名称 &lt;? extends 类 &gt; 对象名称<br>意义： 只能接收该类型及其子类</p><p>泛型的下限：<br>格式： 类型名称 &lt;? super 类 &gt; 对象名称<br>意义： 只能接收该类型及其父类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>Number<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>Object<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement1</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement1</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement1</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement1</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getElement2</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement1</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getElement2</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_线程、同步、线程池</title>
      <link href="/posts/4747.html"/>
      <url>/posts/4747.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>Java使用 java.lang.Thread 类代表线程，所有的线程对象都必须是Thread类或其子类的实例</p><h2 id="Thread类常用方法"><a href="#Thread类常用方法" class="headerlink" title="Thread类常用方法"></a>Thread类常用方法</h2><p><strong>构造方法</strong></p><ul><li>public Thread（）：分配一个新的线程对象。</li><li>public Thread（String name）：分配一个指定名字的新的线程对象。</li><li>public Thread（Runnable target）：分配一个带有指定目标新的线程对象。</li><li>public Thread（Runnable target，String name）：分配一个带有指定目标新的线程对象并指定名字。</li></ul><p><strong>常用方法</strong></p><ul><li>public string getName（）：获取当前线程名称。</li><li>public void start（）：导致此线程开始执行；Java虚拟机调用此线程的run方法。</li><li>public void run（）：此线程要执行的任务在此处定义代码。</li><li>public static void sleep（long millis）：使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li><li>public static Thread currentThread（）：返回对当前正在执行的线程对象的引用。</li></ul><h4 id="创建线程方式一"><a href="#创建线程方式一" class="headerlink" title="创建线程方式一"></a>创建线程方式一</h4><p>Java中通过继承Thread类来创建并启动多线程的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把<br>run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建自定义线程对象</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"新线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启新线程</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在主方法中执行for循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程正在执行"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义线程类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义指定线程名称的构造方法</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用父类的String参数的构造方法，指定线程的名称</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重写run方法，完成该线程执行的逻辑     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在执行"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>流程图：<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804180351.png"><br>程序启动运行main时候，java虚拟机启动一个进程，主线程main在main（）调用时候被创建。随着调用mt的对象的start方法，另外一个新的线程也启动了，这样，整个应用就在多线程下运行。</p><h4 id="创建线程方式二"><a href="#创建线程方式二" class="headerlink" title="创建线程方式二"></a>创建线程方式二</h4><p>Java中通过实现Runnable接口来创建并启动多线程的步骤如下：</p><ol><li>定义Runnable接口的实现类，并重写该接口的run () 方法，该run () 方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start () 方法来启动线程。</li></ol><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建自定义类对象线程任务对象</span>        MyRunnable mr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建线程对象</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">,</span> <span class="token string">"新线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程正在执行"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义线程类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在执行"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过实现Runnable接口，使得该类有了多线程类的特征。run () 方法是多线程程序的一个执行目标。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</p><h3 id="Thread和Runnable的区别"><a href="#Thread和Runnable的区别" class="headerlink" title="Thread和Runnable的区别"></a>Thread和Runnable的区别</h3><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p><p>实现Runnable接口比继承Thread类所具有的优势：</p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和数据独立。</li><li>线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类。</li></ol><h4 id="匿名内部类方式实现线程的创建"><a href="#匿名内部类方式实现线程的创建" class="headerlink" title="匿名内部类方式实现线程的创建"></a>匿名内部类方式实现线程的创建</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用匿名内部类方法；直接创建Thread类的子类对象</span>        <span class="token comment" spellcheck="true">/*         * new Thread() { public void run() { for (int i = 0; i &lt; 10; i++) {         * System.out.println("新线程正在执行" + i); } } }.start();         */</span>        <span class="token comment" spellcheck="true">//使用匿名内部类方式；直接创建Runnable接口实现类对象</span>        Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新线程正在执行"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程正在执行"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>两个或两个以上的线程在访问共享资源时,仍然能得到正确的结果则称之为线程安全</p><p>模拟卖50张电影票</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 买票操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每个窗口买票操作,窗口永远开启</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 使用sleep方法模拟买票</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 获取当前对象的名字</span>                String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在卖票:"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程任务对象</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建三个窗口卖票</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> <span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> <span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> <span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 同时开始卖票</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果出现了这种现象:<br> <img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804180445.png"><br>这种问题,几个窗口(线程)票数不同步了,称为线程不安全</p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>当我们使用多个线程访问统一资源的时候,且多个线程中对资源有写的操作,就容易出现线程安全问题.</p><p>要解决上述多线程并发访问多一个资源的安全性问题,java中提供了同步机制(synchronized)来解决,有三种方式完成同步操作:</p><ol><li>同步代码块</li><li>同步方法</li><li>锁机制</li></ol><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>同步代码块：synchronized关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span>（同步锁）<span class="token punctuation">{</span>    需要同步操作的代码<span class="token punctuation">}</span></code></pre><p>同步锁注意事项<br>1.锁对象可以是任意类型。<br>2.多个线程对象要使用同一把锁。</p><p>同步代码块实现线程安全</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 买票操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每个窗口买票操作,窗口永远开启</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 使用sleep方法模拟买票</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 获取当前对象的名字</span>                    String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在卖票:"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>同步方法：使用synchronized修饰的方法，就叫做同步方法保证A线程执行该方法的时候，其他线程只能在方法外等着</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> method（）<span class="token punctuation">{</span>    可能会产生线程安全问题的代码<span class="token punctuation">}</span></code></pre><p>同步方法实现线程安全</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 买票操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每个窗口买票操作,窗口永远开启</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 锁对象是谁调用这个方法就是谁,this</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用sleep方法模拟买票</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取当前对象的名字</span>            String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在卖票:"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>java.util.concurrent.locks.Lock 机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作，同步代码块/同步方法具有的功能Lock都有，除此之外更强大，更体现面向对象。<br>Lock常用方法</p><ul><li>public void lock（）：加同步锁。</li><li>public void unlock（）：释放同步锁。</li></ul><p>Lock锁实现线程安全</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 买票操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每个窗口买票操作,窗口永远开启</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 使用sleep方法模拟买票</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 获取当前对象的名字</span>                String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在卖票:"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>线程池：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804180722.png"><br>线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存</li></ol><h3 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3><p>Java里面线程池的顶级接口是java.util.concurrent.Executors</p><p>public static ExecutorService newFixedThreadPool(int nThreads) ：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</p><p>public Future&lt;?&gt; submit(Runnable task) :获取线程池中的某一个线程对象，并执行</p><p>Runnable实现类代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要一个教练"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"教练来了： "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"教我游泳,交完后，教练回到了游泳池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>线程池测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程池对象</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含2个线程对象</span>        <span class="token comment" spellcheck="true">// 创建Runnable实例对象</span>        MyRunnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自己创建线程对象的方式</span>        <span class="token comment" spellcheck="true">// Thread t = new Thread(r);</span>        <span class="token comment" spellcheck="true">// t.start(); ---> 调用MyRunnable中的run()</span>        <span class="token comment" spellcheck="true">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再获取个线程对象，调用MyRunnable中的run()</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span>        <span class="token comment" spellcheck="true">// 将使用完的线程又归还到了线程池中</span>        <span class="token comment" spellcheck="true">// 关闭线程池</span>        <span class="token comment" spellcheck="true">//service.shutdown();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>a</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_抽象类、接口、多态的使用</title>
      <link href="/posts/cb67.html"/>
      <url>/posts/cb67.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象类：包含抽象方法的类。<br>抽象方法 ： 没有方法体的方法。</p><p>使用 <code>abstract </code>关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>格式为:<code>修饰符 abstract 返回值类型 方法名 (参数列表)；</code></p><h2 id="抽象类的使用"><a href="#抽象类的使用" class="headerlink" title="抽象类的使用"></a>抽象类的使用</h2><p>继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该父类的抽象方法，否则，从最初的父类到最终的子类都不能创建对象，没有意义。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抽象类不能创建对象</span>        <span class="token comment" spellcheck="true">// Employee e=new Employee();</span>        Manager m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//管理其他人</span>        Cooker c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cooker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//炒菜</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//员工类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Double salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//抽象方法不能有方法体</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//必须重写父类的抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"管理其他人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cooker</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//必须重写父类的抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"炒菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><strong>抽象类不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</li><li>抽象类中，<strong>可以有构造方法</strong>，是供子类创建对象时，初始化父类成员使用的。</li><li>抽象类中，不一定包含抽象方法，但是<strong>有抽象方法的类必定是抽象类</strong>。</li><li><strong>抽象类的子类，必须重写抽象父类中所有的抽象方法</strong>，否则，编译无法通过而报错。除非该子类也是抽象类。</li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口，是Java语言中一种引用类型，接口的内部封装了方法，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法 （JDK 9）。</p><p>引用数据类型：数组，类，接口。</p><p>接口的定义，它与定义类方式相似，但是使用 interface 关键字</p><p>接口的使用，它不能创建对象，但是可以被实现（ implements ，类似于被继承） 。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象类。</p><p>格式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名称 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象方法</span>    <span class="token comment" spellcheck="true">// 默认方法</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token comment" spellcheck="true">// 私有方法</span><span class="token punctuation">}</span></code></pre><p><strong>含有抽象方法</strong>:使用 abstract 关键字修饰，可以省略，没有方法体。该方法供子类实现使用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>含有默认方法和静态方法</strong>(JDK1.8新特性)</p><p>默认方法：使用 default 修饰，不可省略，供子类调用或者子类重写。<br>静态方法：使用 static 修饰，供接口直接调用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行语句</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行语句</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>含有私有方法和私有静态方法</strong>(JDK1.9新特性)</p><p>私有方法：使用 private 修饰，供接口中的默认方法或者静态方法调用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceName</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="基本的实现"><a href="#基本的实现" class="headerlink" title="基本的实现"></a>基本的实现</h2><p>类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类 似继承，格式相仿，只是关键字不同，实现使用 implements 关键字。</p><p>非抽象子类实现接口：</p><ol><li>必须重写接口中所有抽象方法。</li><li>继承了接口的默认方法，即可以直接调用，也可以重写。</li></ol><p>抽象方法的使用:必须全部实现</p><p>定义接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LiveAble</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">LiveAble</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Animal a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：吃饭睡觉</code></pre><h2 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token punctuation">[</span><span class="token keyword">extends</span> 父类名<span class="token punctuation">]</span> <span class="token keyword">implements</span> 接口名<span class="token number">1</span><span class="token punctuation">,</span>接口名<span class="token number">2</span><span class="token punctuation">,</span>接口名<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写接口中抽象方法【必须】</span>    <span class="token comment" spellcheck="true">// 重写接口中默认方法【不重名时可选】</span><span class="token punctuation">}</span></code></pre><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。如果抽象方法有重名的，只需要重写一<br>次。</p><h2 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h2><p>一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。接口的继承使用 extends 关键字，子接口继 承父接口的方法。如果父接口中的默认方法有重名的，那么子接口需要重写一次。</p><h2 id="其他成员特点"><a href="#其他成员特点" class="headerlink" title="其他成员特点"></a>其他成员特点</h2><p>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰。<br>接口中，没有构造方法，不能创建对象。<br>接口中，没有静态代码块。</p><p><strong>接口中成员变量默认加上public static final修饰</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于：public static final int num=1;</span><span class="token punctuation">}</span></code></pre><p><strong>接口中的普通成员方法默认被public abstract修饰</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于：public abstract void method();</span><span class="token punctuation">}</span></code></pre><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态： 是指同一行为，具有多个不同表现形式。</p><p>多态体现的格式：</p><pre class=" language-java"><code class="language-java">父类类型 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 子类对象<span class="token punctuation">;</span>变量名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写 后方法。</p><p>定义父类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义子类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//多态形式，创建对象</span>        Animal cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用的是Cat的eat</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多态形式，创建对象</span>        Animal dog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用的是Dog的eat</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h3><p>多态的转型分为向上转型与向下转型两种：</p><p><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。当父类引用指向一个子类对象时，便是向上转型。</p><pre class=" language-java"><code class="language-java">父类类型 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 子类类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如：Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。一个已经向上转型的子类对<br>象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</p><pre class=" language-java"><code class="language-java">子类类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>子类类型<span class="token punctuation">)</span> 父类变量名<span class="token punctuation">;</span>如<span class="token operator">:</span>Cat c <span class="token operator">=</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> a<span class="token punctuation">;</span></code></pre><p><strong>转型的异常</strong></p><p>ClassCastException ，类型转换异常</p><p>为了避免 ClassCastException 的发生，Java提供了 instanceof 关键字，给引用变量做类型的校验</p><pre class=" language-java"><code class="language-java">变量名 <span class="token keyword">instanceof</span> 数据类型如果变量属于该数据类型，返回<span class="token boolean">true</span>。如果变量不属于该数据类型，返回<span class="token boolean">false</span>。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_String类、StringBuilder类、Arrays类、Math类的使用</title>
      <link href="/posts/dcff.html"/>
      <url>/posts/dcff.html</url>
      
        <content type="html"><![CDATA[<h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><p>java.lang.String 类代表字符串。Java程序中所有的字符串文字（例如 “abc” ）都可以被看作是实现此类的实例</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>java.lang.String ：此类不需要导入。</p><p>代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.String() 创建一个空的字符串对象</span>    String str1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1: "</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.String(String original) 根据字符串来创建一个字符串对象</span>    String str2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.String(char[] value) 通过字符数组来创建字符串对象</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.String(byte[] bytes) 通过字节数组来构造新的字符串对象</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.String(byte[] bytes, int offset, int length) 通过字节数组一部分来构造新的字符串对象</span>    String str5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>String特点</strong></p><ol><li>字符串不变：字符串的值在创建后不能被更改。</li></ol><pre class=" language-java"><code class="language-java">String s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>s1<span class="token operator">+=</span><span class="token string">"d"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"abcd"</span><span class="token comment" spellcheck="true">//内存中有"abc","abcd"两个对象,s1从指向"abc",改变指向,指向了"abcd"</span></code></pre><ol start="2"><li>因为String对象是不可变的，所以它们可以被共享。</li></ol><pre class=" language-java"><code class="language-java">String s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>String s2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内存中只有一个"abc"对象被创建，同时被s1和s2共享。</span></code></pre><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><strong>判断功能的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建字符串对象</span>    String s1<span class="token operator">=</span><span class="token string">"abcd"</span><span class="token punctuation">;</span>    String s2<span class="token operator">=</span><span class="token string">"abcd"</span><span class="token punctuation">;</span>    String s3<span class="token operator">=</span><span class="token string">"ABCD"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//boolean equals•(Object anObject) 将此字符串与指定对象进行比较。</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>获取功能的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String str<span class="token operator">=</span><span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public int length () ：返回此字符串的长度。</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public String concat (String str) ：将指定的字符串连接到该字符串的末尾。</span>    String str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public char charAt (int index) ：返回指定索引处的 char值。</span>    <span class="token keyword">char</span> c1 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public int indexOf (String str) ：返回指定子字符串第一次出现在该字符串内的索引。</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    public String substring (int beginIndex) ：返回一个子字符串，    从beginIndex开始截取字符串到字符串结尾。    */</span>    String sub1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    public String substring (int beginIndex, int endIndex) ：返回一个子字符串，从beginIndex到    endIndex截取字符串。含beginIndex，不含endIndex。    */</span>    String sub2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>转换功能的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String str<span class="token operator">=</span><span class="token string">"abcde"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public char[] toCharArray () ：将此字符串转换为新的字符数组。</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public byte[] getBytes ()：使用平台的默认字符集将该 String编码转换为新的字节数组。</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public String toLowerCase() ：使用默认语言环境的规则将此 String所有字符转换为小写。</span>    String lowerCase <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lowerCase<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public String toUpperCase() ：将此 String所有字符转换为大写，使用默认语言环境的规则。</span>    String upperCase <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//public String replace (CharSequence target, CharSequence replacement) ：将与target匹配的字</span>    符串使用replacement字符串替换。    String str2<span class="token operator">=</span><span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>    String str3 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意，replace会返回一个新的字符串，新字符串才是被替换后的。这里输出</span>    HelloWorld    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HeLLoWorLd</span><span class="token punctuation">}</span></code></pre><p><strong>分割功能的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>String str<span class="token operator">=</span><span class="token string">"你好,我叫张三,我喜欢java"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["你好","我叫张三","我喜欢java"]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>常量池</strong><br>常量池也是JVM中的一块内存区域，在JDK1.6及以前，常量池是存储在方法区的，在JDK1.7之后，常量池被划分到了堆内存。常量池的东西只会保存一份</p><pre class=" language-java"><code class="language-java">String s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>String s2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回true</span></code></pre><p>因为常量池的东西只保存一份，因此 s1==s2 返回的是 true</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804190956.png"></p><h1 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h1><p>java.lang.StringBuilder又称为可变字符序列，它是一个类似于 String 的字符串缓冲区，通过某些方法调用可以改变该序列的长度和内容。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804191041.png"></p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>public StringBuilder() ：构造一个空的StringBuilder容器。</p><p>public StringBuilder(String str) ：构造一StringBuilder容器，并将字符串添加进去</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (空白)</span>        <span class="token comment" spellcheck="true">// 使用带参构造</span>        StringBuilder sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abcd</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>append方法</strong><br>append方法具有多种重载形式，可以接收任意类型的参数。任何数据作为参数都会将对应的字符串内容添加到StringBuilder中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public StringBuilder append(任意类型)</span>        StringBuilder builder2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对比一下</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder:"</span><span class="token operator">+</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder2:"</span><span class="token operator">+</span>builder2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder <span class="token operator">==</span> builder2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">// 可以添加 任何类型</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在我们开发中，会遇到调用一个方法后，返回一个对象的情况。然后使用返回的对象继续调用方法。</span>        <span class="token comment" spellcheck="true">// 这种时候，我们就可以把代码现在一起，如append方法一样，代码如下</span>        <span class="token comment" spellcheck="true">//链式编程</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder:"</span><span class="token operator">+</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>toString方法</strong><br>通过toString方法，StringBuilder对象将会转换为不可变的String对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 链式创建</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用方法</span>        String str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HelloWorldJava</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><p>java.util.Arrays 此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法</p><h2 id="操作数组的方法"><a href="#操作数组的方法" class="headerlink" title="操作数组的方法"></a>操作数组的方法</h2><p>将数组转换成字符串</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">546</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5678</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">435</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[I@2460c14f</span>    <span class="token comment" spellcheck="true">//将数组转换成字符串</span>    String str <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[24, 546, 7, 5678, 58, 76, 83, 45, 435, 34]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>数组按数字升序进行排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">546</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5678</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">435</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前： "</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将数组升序排序</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后： "</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1><p>java.lang.Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数，其所有方法均为静态方法</p><p>基本运算的方法</p><p>返回 double 值的绝对值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d1的值为5</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d2的值为5</span></code></pre><p>返回大于等于参数的最小的整数。（向上取整）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d1的值为 4.0</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d2的值为 -3.0</span><span class="token keyword">double</span> d3 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d3的值为 6.0</span></code></pre><p>返回小于等于参数最大的整数。（向下取整）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d1的值为3.0</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d2的值为-4.0</span><span class="token keyword">double</span> d3 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d3的值为 5.0</span></code></pre><p>返回最接近参数的 long。(相当于四舍五入方法)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> d1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d1的值为6.0</span><span class="token keyword">long</span> d2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">5.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//d2的值为5.0</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_Object类、日期时间类、System类、包装类</title>
      <link href="/posts/21ac.html"/>
      <url>/posts/21ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>java.lang.Object 类是所有类的父类。它描述的所有方法子类都可以使用。在对象实例化的时候，最终找的父类就是Object。</p><p>如果一个类没有特别指定父类， 那么默认则继承自Object类。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token comment" spellcheck="true">/*extends Object*/</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184402.png"></p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值</p><p>由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span> <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略构造器与Getter Setter</span><span class="token punctuation">}</span></code></pre><p>在IntelliJ IDEA中，可以点击 Code 菜单中的 Generate… ，也可以使用快捷键 alt+insert ，点击 toString() 选项。选择需要包含的成员变量并确定。如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184516.png"></p><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p><h4 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h4><p>如果没有覆盖重写equals方法，那么Object类中默认进行 == 运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p><h4 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h4><p>如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果对象地址一样，则认为相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果参数为空，或者类型信息不一样，则认为不同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换为当前类型</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要求基本类型相等，并且将引用类型交给java.util.Objects类的equals静态方法取用结果</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码充分考虑了对象为空、类型一致等问题，但方法内容并不唯一。大多数IDE都可以自动生成equals方法的代码内容。在IntelliJ IDEA中，可以使用 Code 菜单中的 Generate… 选项，也可以使用快捷键alt+insert ，并选择equals() and hashCode() 进行自动代码生成。如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184601.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184658.png"></p><h1 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h1><p>java.util.Date 类 表示特定的瞬间，精确到毫秒。</p><p>public Date() ：分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</p><p>public Date(long date) ：分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</p><p> (由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 创建日期对象，把当前的时间</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tue Jul 28 21:21:01 CST 2020</span>        <span class="token comment" spellcheck="true">// 创建日期对象，把当前的毫秒值转成日期对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu Jan 01 08:00:00 CST 1970</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>常用方法:<br>public long getTime() 把日期对象转换成对应的时间毫秒值。</p><h1 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h1><p>java.text.DateFormat 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p><p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类 java.text.SimpleDateFormat 。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184745.png"><br>创建SimpleDateFormat对象的代码如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对应的日期格式如：2020-07-28 21:30:37</span>    DateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>format方法</strong>:将Date对象格式化为字符串。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span>        DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020年7月28日</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>parse方法</strong>:将字符串解析为Date对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04DateFormatMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"2020年7月28日"</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tue Jul 28 00:00:00 CST 2020</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>计算出一个人已经出生了多少天。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入出生日期 格式 YYYY-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取出生日期,键盘输入</span>    String birthdayString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将字符串日期,转成Date对象</span>    <span class="token comment" spellcheck="true">// 创建SimpleDateFormat对象,写日期模式</span>    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用方法parse,字符串转成日期对象</span>    Date birthdayDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>birthdayString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取今天的日期对象</span>    Date todayDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将两个日期转成毫秒值,Date类的方法getTime</span>    <span class="token keyword">long</span> birthdaySecond <span class="token operator">=</span> birthdayDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> todaySecond <span class="token operator">=</span> todayDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> secone <span class="token operator">=</span> todaySecond<span class="token operator">-</span>birthdaySecond<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>secone <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还没出生呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>secone<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h1><p>java.util.Calendar 是日历类，在Date后出现，替换掉了许多Date的方法。该类将所有可能用到的时间信息封装为静态成员变量，方便获取。</p><p>常用方法:<br>public int get(int field) ：返回给定日历字段的值。<br>public void set(int field, int value) ：将给定的日历字段设置为给定值。<br>public abstract void add(int field, int amount) ：根据日历的规则，为给定的日历字段添加或减去指定的时间量。<br>public Date getTime() ：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象</p><p>Calendar类中提供很多成员常量<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184833.png"><br><strong>get/set方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Calendar对象</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置年</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置月</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置日</span>        <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2020年7月28日</span>        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">2030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2030年7月28日</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>add方法</strong></p><p>add方法可以对指定日历字段的值进行加减操作，如果第二个参数为正数则加上偏移量，如果为负数则减去偏移量。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Calendar对象</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置年</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置月</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置日</span>        <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2020年7月28日</span>        <span class="token comment" spellcheck="true">// 使用add方法</span>        cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加2天</span>        dayOfMonth <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 减3年</span>        year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> dayOfMonth <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2017年7月30日</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>getTime方法</strong></p><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tue Jul 28 22:33:30 CST 2020</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>西方星期的开始为周日，中国为周一。<br>在Calendar类中，月份的表示是以0-11代表1-12月。</p><h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><h3 id="currentTimeMillis方法"><a href="#currentTimeMillis方法" class="headerlink" title="currentTimeMillis方法"></a>currentTimeMillis方法</h3><p>currentTimeMillis方法是 获取当前系统时间与1970年01月01日00:00点之间的毫秒差值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前时间毫秒值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1595947059820</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="arraycopy方法"><a href="#arraycopy方法" class="headerlink" title="arraycopy方法"></a>arraycopy方法</h3><p>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) ：将数组中指定的数据拷贝到另一个数组中。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804184933.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo11SystemArrayCopy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span> src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*代码运行后：两个数组中的元素发生了变化        src数组元素[1,2,3,4,5]        dest数组元素[1,2,3,9,10]        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要基本类型像对象一样操作，就可以使用基本类型对应的包装类</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804185019.png"></p><h2 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h2><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p><p>装箱：从基本类型转换为对应的包装类对象。<br>拆箱：从包装类对象转换为对应的基本类型。</p><p>基本数值—-&gt;包装对象</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用构造函数</span>Integer ii <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用包装类中的valueOf方法</span></code></pre><p>包装对象—-&gt;基本数值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h2><p>从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动装箱。相当于Integer i = Integer.valueOf(4);</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span><span class="token comment" spellcheck="true">//加法运算完成后，再次装箱，把基本数值转成对象。</span></code></pre><h2 id="基本类型与字符串之间的转换"><a href="#基本类型与字符串之间的转换" class="headerlink" title="基本类型与字符串之间的转换"></a>基本类型与字符串之间的转换</h2><p><strong>基本类型转换String</strong><br>基本类型直接与””相连接即可；如：34+””</p><p><strong>String转换成对应的基本类型</strong><br>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型：</p><ul><li>public static byte parseByte(String s) ：将字符串参数转换为对应的byte基本类型。<ul><li>public static short parseShort(String s) ：将字符串参数转换为对应的short基本类型。</li><li>public static int parseInt(String s) ：将字符串参数转换为对应的int基本类型。</li><li>public static long parseLong(String s) ：将字符串参数转换为对应的long基本类型。</li><li>public static float parseFloat(String s) ：将字符串参数转换为对应的float基本类型。</li><li>public static double parseDouble(String s) ：将字符串参数转换为对应的double基本类型。</li><li>public static boolean parseBoolean(String s) ：将字符串参数转换为对应的boolean基本类型。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出 java.lang.NumberFormatException<br>异常</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_内部类、匿名内部类的使用</title>
      <link href="/posts/4ef.html"/>
      <url>/posts/4ef.html</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类。</p><h2 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h2><ol><li>成员内部类，类定义在了成员位置 (类中方法外称为成员位置)</li><li>局部内部类，类定义在方法内</li></ol><p><strong>成员内部类 ：定义在类中方法外的类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 外部类<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">class</span> 内部类<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>内部类可以直接访问外部类的成员，包括私有成员</p><p>创建内部类对象格式：<br><code>外部类名.内部类名 对象名 = new 外部类型().new 内部类型();</code></p><p>内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号 。</p><p>比如，Axx$Bxx.class</p><p><strong>局部内部类 ：定义在方法中的类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 外部类名 <span class="token punctuation">{</span>    数据类型 变量名<span class="token punctuation">;</span>    修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// …</span>        <span class="token keyword">class</span> 内部类 <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token comment" spellcheck="true">// 成员方法</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>匿名内部类 ：是内部类的简化写法。它的本质是一个 带具体实现的父类或者父接口的匿名的子类对象</p><p>匿名内部类必须继承一个父类或者实现一个父接口。</p><p>格式:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 父类名或者接口名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法重写</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行语句</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以接口为例，匿名内部类的使用，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蛙泳...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蛙泳....</span>        <span class="token comment" spellcheck="true">//返回一个实现了swim接口的子类对象,只不过该对象是匿名的</span>        Swim swim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仰泳..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        swim<span class="token punctuation">.</span><span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//仰泳...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义游泳接口</span><span class="token keyword">interface</span> <span class="token class-name">Swim</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义实现类,实现该接口</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Swim</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蛙泳....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>匿名内部类的本质</strong></p><ol><li>定义一个没有名字的内部类</li><li>这个类实现了Swim接口</li><li>创建了这个没有名字的类的对象</li></ol><p><strong>匿名内部类的使用场景</strong></p><p>通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 普通方法</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swim</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用匿名内部类方式,创建了一个匿名的类,该类实现了Swim接口</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗刨式游泳...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蛙泳...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 模拟，请一些人去游泳</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span>Swim s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义游泳接口</span><span class="token keyword">interface</span> <span class="token class-name">Swim</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义实现类,实现该接口</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Swim</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗刨式游泳....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_static、final、super、this关键字的使用</title>
      <link href="/posts/7aa2.html"/>
      <url>/posts/7aa2.html</url>
      
        <content type="html"><![CDATA[<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><p>它可以修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属于某个对象。</p><p>当 static 修饰成员变量时，该变量称为类变量</p><p><code>static 数据类型 变量名；</code></p><p>当 static 修饰成员方法时，该方法称为类方法</p><pre class=" language-java"><code class="language-java">修饰符 <span class="token keyword">static</span> 返回值类型 方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行语句</span><span class="token punctuation">}</span></code></pre><p>注意:</p><p>静态方法可以直接访问类变量和静态方法。<br>静态方法不能直接访问普通成员变量或成员方法。反之，成员方法可以直接访问类变量或静态方法。<br>静态方法中，不能使用this关键字。</p><p>调用格式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 访问类变量</span>类名<span class="token punctuation">.</span>类变量名；<span class="token comment" spellcheck="true">// 调用静态方法</span>类名<span class="token punctuation">.</span>静态方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>；</code></pre><p>静态原理图解</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804190117.png"><br>static 修饰的内容：<br>是随着类的加载而加载的，且只加载一次。<br>存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。<br>它优先于对象存在，所以，可以被所有对象共享。</p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>定义在成员位置，使用static修饰的代码块{ }。</p><p>位置：类中方法外。<br>执行：随着类的加载执行，而执行且执行一次。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>作用：给类变量进行初始化赋值</p><p><strong>static 关键字，可以修饰变量、方法和代码块。在使用的过程中，主要目的还是想在不创建对象的情况下，去调用方法</strong></p><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>final： 可以用于修饰类、方法和变量。<br>类：被修饰的类，不能被继承。<br>方法：被修饰的方法，不能被重写。<br>变量：被修饰的变量，不能被重新赋值。</p><h1 id="super、this关键字"><a href="#super、this关键字" class="headerlink" title="super、this关键字"></a>super、this关键字</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>通过 extends 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 父类 <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>父类不可被继承的内容</p><ol><li>被private修饰的成员变量</li><li>构造方法不能继承</li></ol><p><strong>通过getter/setter方法访问父类的private成员变量</strong></p><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰父类成员变量<br><code>super.父类成员变量名</code></p><p>如果子类父类中出现重名的成员方法，这时的访问是一种特殊情况，叫做方法重写 (Override)。</p><ol><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol><p><strong>继承后构造方法的特点</strong></p><ol><li>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</li><li>构造方法的作用是初始化成员变量的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个 super() ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。</li><li>继承后子类构造方法特点:子类所有构造方法都会调用父类的无参构造</li></ol><p> <strong>父类空间优先于子类对象产生</strong></p><p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，代码体现在子类的构造方法调用时，一定先调用父类的构造方法。理解图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804190509.png"><br>super ：代表父类的存储空间标识(可以理解为父亲的引用)。</p><p>this ：代表当前对象的引用(谁调用就代表谁)。</p><ol><li><p>访问成员<br>this.成员变量 – 本类的<br>super.成员变量 – 父类的<br>this.成员方法名() – 本类的<br>super.成员方法名() – 父类的</p></li><li><p>访问构造方法<br>this(…) – 本类的构造方法<br>super(…) – 父类的构造方法</p></li></ol><p>注意:<br>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。<br>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。<br>Java只支持单继承，不支持多继承。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> static </tag>
            
            <tag> final </tag>
            
            <tag> this关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_字节流、字符流</title>
      <link href="/posts/20e9.html"/>
      <url>/posts/20e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><h2 id="字节输出流【OutputStream】"><a href="#字节输出流【OutputStream】" class="headerlink" title="字节输出流【OutputStream】"></a>字节输出流【OutputStream】</h2><p> java.io.OutputStream 抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。</li><li>public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li>public void write(byte[] b) ：将 b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li>public abstract void write(int b) ：将指定的字节输出流。<h3 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h3>java.io.FileOutputStream 类是文件输出流，用于将数据写出到文件。</li></ul><p><strong>构造方法</strong></p><ul><li>public FileOutputStream(File file) ：创建文件输出流以写入由指定的 File对象表示的文件。</li><li>public FileOutputStream(String name) ： 创建文件输出流以指定的名称写入文件。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamConstructor</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h4><ol><li><p>写出字节： write(int b) 方法，每次可以写出一个字节数据，代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>     FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 写出数据</span>     fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字节</span>     fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第2个字节</span>     fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第3个字节</span>     <span class="token comment" spellcheck="true">// 关闭资源</span>     fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abc</code></pre></li><li><p>写出字节数组： write(byte[] b) ，每次可以写出数组中的数据，代码演示：</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串转换成字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token string">"我是字节数组"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出字节数组数据</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：我是字节数组</code></pre><ol start="3"><li>写出指定长度字节数组： write(byte[] b, int off, int len) ,每次写出从off索引开始，len个字节，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串转换成字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出从索引3开始，2个字节。索引3是d，两个字节，也就是de。</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：de</code></pre><h4 id="数据续写"><a href="#数据续写" class="headerlink" title="数据续写"></a>数据续写</h4><ul><li>public FileOutputStream(File file, boolean append) ： 创建文件输出流以写入由指定的 File对象表示的文件。</li><li>public FileOutputStream(String name, boolean append) ： 创建文件输出流以指定的名称写入文件</li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值， true 表示追加数据， false 表示清空原有数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串转换成字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>文件操作前：de文件操作后：deabcdefg</code></pre><h4 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h4><p>Windows系统里，换行符号是 \r\n 。代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写出一个字节</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出一个换行, 换行符号转成数组写出</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcde</code></pre><h2 id="字节输入流【InputStream】"><a href="#字节输入流【InputStream】" class="headerlink" title="字节输入流【InputStream】"></a>字节输入流【InputStream】</h2><p>java.io.InputStream 抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li>public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。</li><li>public abstract int read() ： 从输入流读取数据的下一个字节。</li><li>public int read(byte[] b) ： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 </li></ul><h3 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h3><p>java.io.FileInputStream 类是文件输入流，从文件中读取字节。</p><p><strong>构造方法</strong></p><ul><li>FileInputStream(File file) ： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</li><li>FileInputStream(String name) ： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出 FileNotFoundException</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileInputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h4><ol><li>读取字节： read 方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回 -1 ，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件中为abc</span>        <span class="token comment" spellcheck="true">// 读取数据，返回一个字节</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取到末尾,返回-1</span>        read <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abc<span class="token operator">-</span><span class="token number">1</span></code></pre><p>改进代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件中为abc</span>        <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abc</code></pre><ol start="2"><li>使用字节数组读取： read(byte[] b) ，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回 -1 ，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件中为abc</span>        <span class="token comment" spellcheck="true">// 定义变量，作为有效个数</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义字节数组，作为装字节数据的容器</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每次读取后,把数组变成字符串打印</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abcb</code></pre><p>错误数据 b，是由于最后一次读取时，只读取一个字节 c ，数组中，上次读取的数据没有被完全替换，所以要通过 len ，获取有效的字节，代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件中为abc</span>        <span class="token comment" spellcheck="true">// 定义变量，作为有效个数</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义字节数组，作为装字节数据的容器</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每次读取后,把数组变成字符串打印</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abc</code></pre><p><strong>复制图片文件，代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建流对象</span>        <span class="token comment" spellcheck="true">// 1.1 指定数据源</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\test.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.2 指定目的地</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\test_copy.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.读写数据</span>        <span class="token comment" spellcheck="true">// 2.1 定义数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.2 定义长度</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.3 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.4 写出数据</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.关闭资源</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h2 id="字符输入流【Reader】"><a href="#字符输入流【Reader】" class="headerlink" title="字符输入流【Reader】"></a>字符输入流【Reader】</h2><p>java.io.Reader 抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li>public void close() ：关闭此流并释放与此流相关联的任何系统资源。</li><li>public int read() ： 从输入流读取一个字符。</li><li>public int read(char[] cbuf) ： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中</li></ul><h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><p><strong>构造方法</strong></p><ul><li>FileReader(File file) ： 创建一个新的 FileReader ，给定要读取的File对象。</li><li>FileReader(String fileName) ： 创建一个新的 FileReader ，给定要读取的文件的名称。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h4><ol><li>读取字符： read 方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回 -1 ，循环读取，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内容为:我喜欢编程</span>        <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>        <span class="token keyword">int</span> b <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>我喜欢编程</code></pre><ol start="2"><li>使用字符数组读取： read(char[] cbuf) ，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，<br>读取到末尾时，返回 -1 ，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内容为:我喜欢编程</span>        <span class="token comment" spellcheck="true">// 定义变量，保存数据</span>        <span class="token keyword">int</span> len <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义字符数组，作为装字符数据的容器</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环读取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果为<span class="token operator">:</span>我喜欢编程</code></pre><h2 id="字符输出流【Writer】"><a href="#字符输出流【Writer】" class="headerlink" title="字符输出流【Writer】"></a>字符输出流【Writer】</h2><p>java.io.Writer 抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li>void write(int c) 写入单个字符。</li><li>void write(char[] cbuf) 写入字符数组。</li><li>abstract void write(char[] cbuf, int off, int len) 写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</li><li>void write(String str) 写入字符串。</li><li>void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li>void flush() 刷新该流的缓冲。</li><li>void close() 关闭此流，但要先刷新它。</li></ul><h3 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h3><p><strong>构造方法</strong></p><ul><li>FileWriter(File file) ： 创建一个新的 FileWriter，给定要读取的File对象。</li><li>FileWriter(String fileName) ： 创建一个新的FileWriter，给定要读取的文件的名称。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用File对象创建流对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h4><p>写出字符： write(int b) 方法，每次可以写出一个字符数据，代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出数据</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第1个字符</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第2个字符</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第3个字符</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">33333</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写出第4个字符，中文编码表中30000对应一个汉字。</span>        <span class="token comment" spellcheck="true">//如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：abC舵</code></pre><h4 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要 flush 方法了。</p><p>flush ：刷新缓冲区，流对象可以继续使用。<br>close ：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><h3 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h3><ol><li>写出字符数组 ： write(char[] cbuf) 和 write(char[] cbuf, int off, int len) ，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串转换为字节数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"我喜欢编程"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出字符数组</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我喜欢编程</span>        <span class="token comment" spellcheck="true">// 写出从索引1开始，1个字节。索引1是'喜'，两个字节，也就是'喜欢'。</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 喜欢</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        b<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>我喜欢编程喜欢</code></pre><ol start="3"><li>写出字符串： write(String str) 和 write(String str, int off, int len) ，每次可以写出字符串中的<br>数据，更为方便，代码演示：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象</span>        FileWriter b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串</span>        String msg <span class="token operator">=</span> <span class="token string">"我喜欢编程"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出字符数组</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//我喜欢编程</span>        <span class="token comment" spellcheck="true">// 写出从索引1开始，2个字节。索引1是'喜'，两个字节，也就是'喜欢'。</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 喜欢</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        b<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>续写和换行：操作类似于FileOutputStream</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用文件名称创建流对象，可以续写数据</span>        FileWriter b<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span>，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出字符串</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我喜欢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出换行</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写出字符串</span>        b<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        b<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>我喜欢编程</code></pre><p>字符流，只能操作文本文件，不能操作图片，视频等非文本文件，要使用字节流</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署到远程仓库（Conding、Gitee、Github）</title>
      <link href="/posts/4592.html"/>
      <url>/posts/4592.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客部署到远程仓库（Conding、Gitee、Github）"><a href="#Hexo博客部署到远程仓库（Conding、Gitee、Github）" class="headerlink" title="Hexo博客部署到远程仓库（Conding、Gitee、Github）"></a>Hexo博客部署到远程仓库（Conding、Gitee、Github）</h1><h2 id="一、本地环境搭建"><a href="#一、本地环境搭建" class="headerlink" title="一、本地环境搭建"></a>一、本地环境搭建</h2><h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><p>Git可以有效、高速的处理各种项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。</p><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git下载地址</a></p><p>安装好了之后使用<code>git -version</code>查看版本</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200803221340.png"></p><h3 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h3><p>Hexo基Node.js，需要安装一下Node.js和里面的npm工具</p><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js下载地址</a></p><p>安装好了之后win+R，输入cmd 在终端输入<code>node -v</code> <code>npm-v</code>查看是否安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200803220726.png"></p><h3 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a></p><p>先创建Blog文件夹随便位置，在文件夹里面右键git bash</p><p>安装淘宝镜像源cnpm提高速度</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>输入<code>cnpm -v</code>验证是否安装</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200803225631.png"></p><p>然后输入 <code>cnpm install -g hexo-cli</code> 安装Hexo</p><p>输入 <code>hexo -v</code> 验证是否安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200803222348.png"></p><p>初始化<code>hexo init</code>，安装所需组件<code>cnpm install</code></p><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><p>浏览器进入<a href="http://localhost:4000/" target="_blank" rel="noopener">【http://localhost:4000/】</a> 就可以看刚刚初始化的博客</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200803231900.png"></p><p>ctrl+c关闭本地服务器</p><p>常用的命令：</p><pre><code>hexo clean     #用来清理缓存文件hexo generate  #生成文件hexo server    #运行本地服务器hexo deploy    #上传到服务器</code></pre><p>Blog目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：模版文件。当创建一篇新的文章时，hexo会依据模版文件进行创建</li><li>source：用来存放你的文章，图片等资源</li><li>themes：主题文件夹</li><li>_config.yml 站点配置文件。很多全局配置都在这个文件中</li><li>package.json 应用数据，版本信息等</li></ul><h2 id="二、博客部署到Conding"><a href="#二、博客部署到Conding" class="headerlink" title="二、博客部署到Conding"></a>二、博客部署到Conding</h2><p>先介绍国内的服务器部署，部署到Coding的好处：国内访问速度更快，可以提交百度收录</p><h3 id="1、Conding"><a href="#1、Conding" class="headerlink" title="1、Conding"></a>1、Conding</h3><p><a href="https://dev.tencent.com/" target="_blank" rel="noopener">Conding官网</a></p><p>Coding已经和腾讯云合作，没有账号就注册一个，现在应该是要创建团队项目，没关系反正不要钱</p><p>点击创建项目，输入相关参数，没有强制要求</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804104642.png"></p><p>完成项目创建后，点击项目设置，把持续部署打开（新版默认关闭了）找了我好久</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804104935.png"></p><h3 id="2、添加公钥"><a href="#2、添加公钥" class="headerlink" title="2、添加公钥"></a>2、添加公钥</h3><p>在本地Blog文件内打开git bash输入：</p><pre><code>ssh-keygen -t rsa -C "你的邮箱"</code></pre><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开C盘用户目录，找到id_rsa.pub文件，记事本打开并复制里面的内容</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804105539.png"></p><p>进入你个人设置，个人账户设置-SHH公钥-新增公钥，公钥名称可以随便写，将刚才复制的公钥粘贴在公钥内容里面。把授予权限打上勾，然后添加就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804105714.png"></p><h3 id="3、配置连接地址"><a href="#3、配置连接地址" class="headerlink" title="3、配置连接地址"></a>3、配置连接地址</h3><p>到自己创建的仓库，复制克隆SHH连接</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804110128.png"></p><p>打开，Blog文件夹下面的站点配置文件，_config.yml<br>用文本编辑器打开，找到里面的deploy</p><pre><code>deploy:  type: git  repo:   coding: git@e.coding.net:guixinchn/blog.coding.me/blog.git  branch: master</code></pre><p>把coding换成刚刚复制下来的SSH链接地址</p><h3 id="4、将Hexo部署到Conding"><a href="#4、将Hexo部署到Conding" class="headerlink" title="4、将Hexo部署到Conding"></a>4、将Hexo部署到Conding</h3><p>然后打开bash，安装deploy-git，这样才能用命令部署到远程的git仓库</p><pre><code>cnpm install hexo-deployer-git --save</code></pre><p>在git bash上测试是否连接成功：</p><pre><code>ssh -T git@git.coding.net</code></pre><p>最后就是</p><pre><code>hexo cleanhexo ghexo s #在本地测试通过了在上传hexo d #上传到git仓库</code></pre><p>刷新仓库就会看到里面增加了一些内容，打开持续部署-静态网站-新建静态网站</p><p>网站名字随便取（并不是网站的title）点击保存即可</p><p>然后就会生成一个静态的访问地址</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804112820.png"></p><p>这个地址就是你的博客地址了，当人也可以自定义域名</p><h3 id="5、Conding静态网站"><a href="#5、Conding静态网站" class="headerlink" title="5、Conding静态网站"></a>5、Conding静态网站</h3><p>Conding静态网站用以搭建个人博客，公司官网等简易网站。 支持自定义域名，全自动续期的 SSL 证书等特性。 如果多人访问的话，就太慢了</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804114650.png"></p><h2 id="三、博客部署到gitee【推荐】"><a href="#三、博客部署到gitee【推荐】" class="headerlink" title="三、博客部署到gitee【推荐】"></a>三、博客部署到gitee【推荐】</h2><h3 id="1、码云"><a href="#1、码云" class="headerlink" title="1、码云"></a>1、码云</h3><p>Conding访问的速度太慢了，几个人同时访问你的网站的时候就挂了，主要是他的服务器在香港，于是我更推荐国内的码云平台：<a href="https://gitee.com/education" target="_blank" rel="noopener">码云官网</a></p><p>没有账户的话，就先注册一个，然后创建仓库，仓库的名称随便写，仓库的路径要和用户名（个人空间地址）一致</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804121316.png"></p><h3 id="2、添加SSH公钥"><a href="#2、添加SSH公钥" class="headerlink" title="2、添加SSH公钥"></a>2、添加SSH公钥</h3><p>由于上面已经写了如何配置本地公钥，在C盘用户目录，找到id_rsa.pub文件，记事本打开已经生成的公钥，复制里面的内容</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804105539.png"></p><p>然后打开gitee个人设置里面的安全设置SSH公钥，标题随便取，粘贴刚刚复制好的密钥内容，点击确认即可</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804122716.png"></p><h3 id="3、配置连接地址-1"><a href="#3、配置连接地址-1" class="headerlink" title="3、配置连接地址"></a>3、配置连接地址</h3><p>打开刚建立好的博客仓库，点击克隆/下载，复制里面的SHH链接</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804123940.png"></p><p>然后进入Blog目录，打开博客配置文件_config.yml</p><p>用文本编辑器打开，找到里面的deploy</p><p>把刚刚复制的SSH链接粘贴在对应的位置记得注释掉其他仓库的链接</p><pre><code>deploy:  type: git  repo:   #coding: git@e.coding.net:guixinchn/blog/blog.git   gitee: git@gitee.com:guixinchn/guixinchn.git  branch: master</code></pre><p>然后就是</p><pre><code>hexo cleanhexo g hexo d</code></pre><h3 id="4、Gitee-Pages"><a href="#4、Gitee-Pages" class="headerlink" title="4、Gitee Pages"></a>4、Gitee Pages</h3><p>这时你看自己的Bolg仓库已经有很多的文件了，点击上方服务，gitee Pages，开启网站服务</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804130633.png"></p><p>直接点击生成即可，就会显示已开启 Gitee Pages 服务，网站地址： xxxxxx</p><p>至此，一个用户名.gitee.io的博客网站部署完成</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804131406.png"></p><h2 id="四、博客部署到Github"><a href="#四、博客部署到Github" class="headerlink" title="四、博客部署到Github"></a>四、博客部署到Github</h2><p>由于国内访问这个网站比较慢，除非你有特殊手段，不过github的资源是真的丰富</p><h3 id="1、github创建个人仓库"><a href="#1、github创建个人仓库" class="headerlink" title="1、github创建个人仓库"></a>1、github创建个人仓库</h3><ol><li>首先注册一个github账号<a href="https://github.com/" target="_blank" rel="noopener">GitHub挂网</a></li><li>我的主页 <a href="https://github.com/guixinchn" target="_blank" rel="noopener">https://github.com/guixinchn</a> ，那么我的用户名为“guixinchn”</li><li>新建一个名为 <code>用户名.github.io</code> 的仓库，不然会有一些问题，比如将来博客的网站就会是 <a href="https://github.com/guixinchn/%E4%BB%93%E5%BA%93%E5%90%8D" target="_blank" rel="noopener">https://github.com/guixinchn/仓库名</a> ，而且博客的图片显示有问题(亲测)，所以建议还是用我上面那个方式命名，除非你买个域名</li><li>将来网站访问地址就是 <a href="http://guixinchn.github.io/" target="_blank" rel="noopener">http://guixinchn.github.io</a></li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804143927.png"></p><h3 id="2、添加SSH-公钥"><a href="#2、添加SSH-公钥" class="headerlink" title="2、添加SSH 公钥"></a>2、添加SSH 公钥</h3><p>ssh，简单来讲就是一个秘钥，其中id_rsa是你这台电脑的私人秘钥，id_rsa.pub是公共秘钥，把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，如果用SSH连接就不用输入密码，如果用https连接，则还是需要输入密码进行推送</p><p>在Blog文件夹，右键git bash</p><p>设置user.name和user.email配置信息</p><pre><code>git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"</code></pre><p>生成ssh密钥文件：</p><pre><code>ssh-keygen -t rsa -C "你的GitHub注册邮箱"</code></pre><p>按步骤，最终会生成一个文件在用户目录下，打开C盘用户目录，找到id_rsa.pub文件，记事本打开并复制里面的内容</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804105539.png"></p><p>进入github主页，点击setting，右边的SSH and GPG keys，然后点击New SSH key</p><p>title随便写，内容就是粘贴刚刚复制的key，保存</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804145014.png"></p><p>在 git bash 输入 <code>ssh -T git@github.com</code> 检验是否搭建完成</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804145136.png"></p><h3 id="3、将Hexo部署到GitHub"><a href="#3、将Hexo部署到GitHub" class="headerlink" title="3、将Hexo部署到GitHub"></a>3、将Hexo部署到GitHub</h3><p>先复制GitHub仓库的SSH链接地址</p><p>打开，Blog文件夹下面的站点配置文件，_config.yml<br>用文本编辑器打开，找到里面的deploy</p><pre><code>deploy:  type: git  repo:   github: git@github.com:guixinchn/Blog.git   #coding: git@e.coding.net:guixinchn/blog/blog.git   #gitee: git@gitee.com:guixinchn/guixinchn.git  branch: master</code></pre><p>把github换成刚刚复制下来的SSH链接地址</p><p>上面已经安装过了的deploy-git，也就是部署的命令,这样你才能用命令部署到GitHub</p><pre><code>cnpm install hexo-deployer-git --save</code></pre><p>然后又是那三部曲</p><pre><code>hexo clean    //清除了你之前生成的东西hexo generate  //生成静态文章，可以用 hexo g 缩写 hexo deploy   //部署文章，可以用 hexo d 缩写 </code></pre><p>然后就可以访问你的博客啦<a href="https://guixinchn.github.io/" target="_blank" rel="noopener">https://guixinchn.github.io/</a></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804151414.png"></p><h3 id="4、自定义域名"><a href="#4、自定义域名" class="headerlink" title="4、自定义域名"></a>4、自定义域名</h3><p>域名需要自行先去购买</p><p>打开你本地博客Blog文件夹下面的soruce目录，新建 CNAME 文件，注意没有后缀</p><p>然后在里面写上你的域名，保存。最后运行 <code>hexo g</code> 、 <code>hexo d</code> 上传到github</p><p>这时候你的Github项目根目录应该会出现一个名为 CNAM 的文件了。然后打开你的github博客项目，点setting，拉到下GitHub Pages处，你也会发现自己的域名</p><p>然后就可以用你自己的域名进行登录博客啦</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/Hexo/20200804152044.png"></p><p>对了自己购买的域名需要设置解析</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Conding </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法的详细使用教程</title>
      <link href="/posts/ce76.html"/>
      <url>/posts/ce76.html</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h1><p>Markdown是一种纯文本格式的标记语言。通过简单的语法可以使普通文本内容具有一定的格式。</p><h2 id="一-标题"><a href="#一-标题" class="headerlink" title="一. 标题"></a>一. 标题</h2><p>在要设置为标题的文字前面加#和空格</p><p>一个#和空格是一级标题，两个##和空格是二级标记，以此类推，最多有六级标题，演示：</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>效果为：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二-字体"><a href="#二-字体" class="headerlink" title="二. 字体"></a>二. 字体</h2><ul><li><p>加粗</p><p>加粗是字体左右各两个星号**，效果为：</p><p><strong>我是加粗字体</strong></p></li></ul><ul><li><p>斜体</p><p>斜体是字体左右各一个星号*，效果为：</p><p><em>我是斜体字体</em></p></li></ul><ul><li><p>加粗斜体</p><p>加粗斜体是字体左右各三个星号***，效果为：</p><p><strong><em>我是加粗斜体字体</em></strong></p></li></ul><ul><li><p>删除线</p><p>删除线字体是字体左右各两个波浪线~~，效果为：</p><p><del>我是删除线字体</del></p></li></ul><h2 id="三-引用"><a href="#三-引用" class="headerlink" title="三. 引用"></a>三. 引用</h2><p>在要引用的内容前加上&gt;和空格即可，效果为：</p><blockquote><p>这是要引用的内容</p></blockquote><h2 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四.分割线"></a>四.分割线</h2><p>分割线为三个以上星号***或者是三个以上减号—，效果为：</p><hr><hr><h2 id="五-列表"><a href="#五-列表" class="headerlink" title="五. 列表"></a>五. 列表</h2><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表"></a>1. 有序列表</h3><p>数字加点然后空格，加要写的内容</p><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2. 无序列表"></a>2. 无序列表</h3><p>减号空格，加要写的内容</p><ul><li>第一行</li><li>第二行</li><li>第三行</li></ul><h3 id="3-嵌套列表"><a href="#3-嵌套列表" class="headerlink" title="3. 嵌套列表"></a>3. 嵌套列表</h3><p>上级和下级之间加三个空格就好</p><ol><li>这个一级列表<ul><li>是二级列表<ol><li>这是三级列表</li></ol></li><li>这是二级列表</li></ul></li><li>这是一级列表<ul><li>这是二级列表<ul><li>这使得三级列表</li></ul></li></ul></li></ol><h2 id="六-表格"><a href="#六-表格" class="headerlink" title="六. 表格"></a>六. 表格</h2><p>表头|表头|表头</p><p>:–:|:–:|:–:</p><p>内容|内容|内容</p><p>内容|内容|内容</p><p>效果为:</p><table><thead><tr><th align="center">表头</th><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">内容</td><td align="center">内容</td><td align="center">内容</td></tr><tr><td align="center">内容</td><td align="center">内容</td><td align="center">内容</td></tr></tbody></table><p>两个减号左右的冒号表示居中</p><h2 id="七-图片"><a href="#七-图片" class="headerlink" title="七. 图片"></a>七. 图片</h2><p><code>![图片alt](图片路径)</code></p><p>alt是图片下面的文字,对图片的说明</p><p>图片路径可以是本地路径，也可以是网络路径</p><p><code>![](https://cdn.jsdelivr.net/gh/guixinchn/image/wallhaven.png)</code></p><p>效果为：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/wallhaven.png"></p><h2 id="八-超链接"><a href="#八-超链接" class="headerlink" title="八. 超链接"></a>八. 超链接</h2><p><code>[超链接名](超链接地址)</code></p><pre><code>[CSDN博客](https://blog.csdn.net/guixinchn)[博客园](https://www.cnblogs.com/guixinchn)</code></pre><p>效果为：</p><p><a href="https://blog.csdn.net/guixinchn" target="_blank" rel="noopener">CSDN博客</a><br><a href="https://www.cnblogs.com/guixinchn" target="_blank" rel="noopener">博客园</a></p><h2 id="九-代码"><a href="#九-代码" class="headerlink" title="九. 代码"></a>九. 代码</h2><p>单行代码：代码左右各加一个着重号`</p><pre><code>    `代码内容`</code></pre><p>多行代码块：代码块上下各加三个着重号```</p><p>效果为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="十-流程图"><a href="#十-流程图" class="headerlink" title="十. 流程图"></a>十. 流程图</h2><pre><code>st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</code></pre><pre class=" language-flow"><code class="language-flow">st=>start: 开始op=>operation: 操作cond=>condition: 判断对错?e=>endst->op->condcond(yes)->econd(no)->op</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_Scanner类、Random类、ArrayList 类的使用</title>
      <link href="/posts/c412.html"/>
      <url>/posts/c412.html</url>
      
        <content type="html"><![CDATA[<h1 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h1><p>一个可以解析基本类型和字符串的简单文本扫描器。 例如，以下代码使用户能够从 System.in 中读取一个数：</p><pre class=" language-java"><code class="language-java">Scanner in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="引用类型使用步骤"><a href="#引用类型使用步骤" class="headerlink" title="引用类型使用步骤"></a>引用类型使用步骤</h2><p><strong>导包</strong><br>使用import关键字导包，在类的所有代码之前导包，引入要使用的类型，java.lang包下的所有类无需导入。 </p><p>格式：import 包名.类名;</p><p><strong>创建对象</strong><br>调用该类的成员方法，完成指定功能。 </p><p>格式：变量名.方法名();</p><h2 id="Scanner使用步骤"><a href="#Scanner使用步骤" class="headerlink" title="Scanner使用步骤"></a>Scanner使用步骤</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.创建键盘录入数据的对象</span>        Scanner in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.接收数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.输出数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.导包</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建随机数对象</span>        Random r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生成一个随机数(0-10之间的随机数（不包括10）)</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number: "</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h1><p>java.util.ArrayList 是大小可变的数组的实现，存储在内的数据称为元素。此类提供一些方法来操作内部存储的元素。 ArrayList 中可不断添加元素，其大小也自动增长。</p><h2 id="ArrayList使用步骤"><a href="#ArrayList使用步骤" class="headerlink" title="ArrayList使用步骤"></a>ArrayList使用步骤</h2><p><strong>java.util.ArrayList &lt; E &gt;</strong> ：该类需要 import导入使后使用。</p><p>&lt; E &gt; ，表示一种指定的数据类型，叫做泛型。 E ，取自Element（元素）的首字母。在出现 E 的地方，使用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。代码如下：</p><p><code>ArrayList&lt;String&gt;,ArrayList&lt;Student&gt;</code></p><p><strong>public ArrayList()</strong> ：构造一个内容为空的集合。</p><p>基本格式:<code>ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();</code></p><p>在JDK 7后,右侧泛型的尖括号之内可以留空，但是&lt;&gt;仍然要写。简化格式：</p><p><code>ArrayList&lt;String&gt; list=new ArrayList&lt;&gt;();</code></p><p><strong>public boolean add(E e)</strong> ： 将指定的元素添加到此集合的尾部。</p><p>参数 E e ，在构造 ArrayList 对象时， &lt; E &gt; 指定了什么数据类型，那么 add(E e) 方法中，只能添加什么数据类型的对象。</p><p>使用ArrayList类，存储三个字符串元素，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s1<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>        String s2<span class="token operator">=</span><span class="token string">"李四"</span><span class="token punctuation">;</span>        String s3<span class="token operator">=</span><span class="token string">"王五"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将元素添加进集合</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="常用方法和遍历"><a href="#常用方法和遍历" class="headerlink" title="常用方法和遍历"></a>常用方法和遍历</h2><p>对于元素的操作,基本体现在——增、删、查。常用的方法有：</p><p>public boolean add(E e) ：将指定的元素添加到此集合的尾部。<br>public E remove(int index) ：移除此集合中指定位置上的元素。返回被删除的元素。<br>public E get(int index) ：返回此集合中指定位置上的元素。返回获取的元素。<br>public int size() ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</p><p>代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"MyBatis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//E get(int index) 返回此列表中指定位置的元素。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int size() 返回此列表中的元素数。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public E remove(int index)</span>        String ele <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="存储基本数据类型"><a href="#存储基本数据类型" class="headerlink" title="存储基本数据类型"></a>存储基本数据类型</h2><p>ArrayList 对象不能存储基本类型，只能存储引用类型的数据。类似 <int> 不能写，但是存储基本数据类型对应的包装类型是可以的。所以，想要存储基本类型数据， &lt;&gt; 中的数据类型，必须转换后才能编写，转换写法如下：</int></p><table><thead><tr><th>基本类型</th><th>基本包装类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>只有 Integer 和 Character 需要特殊记忆，其他基本类型只是首字母大写即可。</p><p>存储基本类型数据，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数值添加到集合练习"><a href="#数值添加到集合练习" class="headerlink" title="数值添加到集合练习"></a>数值添加到集合练习</h3><p>生成5个1~100之间的随机整数,添加到集合,并遍历</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生成5个1~100之间的随机整数,添加到集合,并遍历</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Random r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对象添加到集合练习"><a href="#对象添加到集合练习" class="headerlink" title="对象添加到集合练习"></a>对象添加到集合练习</h3><p>自定义4个学生对象,添加到集合,并遍历</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学生对象</span>        Student s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将元素添加到集合</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Student s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名： "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";年龄： "</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_数组的定义与操作</title>
      <link href="/posts/b06e.html"/>
      <url>/posts/b06e.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组定义和访问"><a href="#数组定义和访问" class="headerlink" title="数组定义和访问"></a>数组定义和访问</h1><h2 id="数组概念"><a href="#数组概念" class="headerlink" title="数组概念"></a>数组概念</h2><p>数组概念： 数组就是存储多个数据的容器，数组的长度固定，多个数据的数据类型要一致。</p><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><p><strong>方式一</strong><br>数组存储的数据类型[] 数组名字 = new 数组存储的数据类型[长度];</p><p>举例： 定义可以存储3个整数的数组容器，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>方式二</strong><br>数据类型[] 数组名 = new 数据类型[]{元素1,元素2,元素3…};</p><p>举例： 定义存储1，2，3，4，5整数的数组容器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>方式三</strong><br>数据类型[] 数组名 = {元素1,元素2,元素3…};</p><p>举例： 定义存储1，2，3，4，5整数的数组容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h2><p>直接输出数组名,显示的是数组的地址 [I@50cbc42f<br>索引： 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804191506.png"><br>格式：数组名[索引]</p><p>通过索引访问数组中的元素：<br>数组名[索引]，获取出数组中的元素<br>数组名[索引]=数值，为数组中的元素赋值</p><p><strong>数组的长度属性</strong>： 每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的<br>长度，语句为： 数组名.length ，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，数<br>组的最大索引值为 数组名.length-1 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印数组的属性，输出结果是5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="数组原理内存图"><a href="#数组原理内存图" class="headerlink" title="数组原理内存图"></a>数组原理内存图</h1><h2 id="内存概述"><a href="#内存概述" class="headerlink" title="内存概述"></a>内存概述</h2><p>内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。<br>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p><h2 id="Java虚拟机的内存划分"><a href="#Java虚拟机的内存划分" class="headerlink" title="Java虚拟机的内存划分"></a>Java虚拟机的内存划分</h2><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p>JVM的内存划分：<br>| 区域名称   | 作用                                                       |<br>| ———- | ———————————————————- |<br>| 寄存器     | 给CPU使用，和我们开发无关。                                |<br>| 本地方法栈 | JVM在使用操作系统功能的时候使用，和我们开发无关。          |<br>| 方法区     | 存储可以运行的class文件。                                  |<br>| 堆内存     | 存储对象或者数组，new来创建的，都存储在堆内存。            |<br>| 方法栈     | 方法运行时使用的内存，比如main方法运行，进入方法栈中执行。 |</p><h2 id="数组在内存中的存储"><a href="#数组在内存中的存储" class="headerlink" title="数组在内存中的存储"></a>数组在内存中的存储</h2><p><strong>一个数组内存图</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [I@50cbc42f</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>[I@50cbc42f是数组在内存中的地址。new出来的内容，都是在堆内存中存储的，而方法中的变量arr保存的是数组的地址。 输出arr[0]，就会输出arr保存的内存地址中数组中0索引上的元素</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804191600.png"><br><strong>两个数组内存图</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给arr1数组的索引为0元素赋值100</span>        arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给arr2数组的索引为0元素赋值200</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"‐‐‐‐‐‐‐‐‐‐‐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804191718.png"><br><strong>两个变量指向一个数组</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义数组变量arr2，将arr的地址赋值给arr2</span>    <span class="token comment" spellcheck="true">// arr和arr2指向堆中同一个数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>    arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>    arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>    arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804191910.png"></p><h1 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h1><h2 id="数组越界异常"><a href="#数组越界异常" class="headerlink" title="数组越界异常"></a>数组越界异常</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此不能访问数组中不存在的索引，程序运行后，将会抛出 ArrayIndexOutOfBoundsException 数组越界异常。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192017.png"></p><h2 id="数组空指针异常"><a href="#数组空指针异常" class="headerlink" title="数组空指针异常"></a>数组空指针异常</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    arr <span class="token operator">=</span> null<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>｝</code></pre><p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192057.png"></p><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><p>数组遍历： 就是将数组中的每个元素分别获取出来。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将数组中的每个元素都取出来</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="数组获取最大值元素"><a href="#数组获取最大值元素" class="headerlink" title="数组获取最大值元素"></a>数组获取最大值元素</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.定义变量记录较大的值,先假定arr[0]是最大值</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.遍历拿到数组中的每个元素</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3.如果arr[i]大于max,将max改成arrr[i]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 10000</span>            max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4.输出最大值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h2><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192141.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义变量记录小索引: start = 0</span>    <span class="token comment" spellcheck="true">// 定义变量记录大索引: end = arr.length ‐ 1</span>    <span class="token comment" spellcheck="true">// 循环终止条件: start &lt; end 才需要交换位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length ‐ <span class="token number">1</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">,</span> end‐‐<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 循环交换位置,利用第三方变量</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="数组作为方法参数和返回值"><a href="#数组作为方法参数和返回值" class="headerlink" title="数组作为方法参数和返回值"></a>数组作为方法参数和返回值</h1><h2 id="数组作为方法参数"><a href="#数组作为方法参数" class="headerlink" title="数组作为方法参数"></a>数组作为方法参数</h2><p>数组作为方法参数传递，传递的参数是数组内存的地址。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1位置: "</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组作为方法参数传递，传递的参数是数组内存的地址</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2位置: "</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192215.png"></p><h2 id="数组作为方法返回值"><a href="#数组作为方法返回值" class="headerlink" title="数组作为方法返回值"></a>数组作为方法返回值</h2><p>数组作为方法的返回值，返回的是数组的内存地址</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用方法，接收数组的返回值</span>    <span class="token comment" spellcheck="true">//接收到的是数组的内存地址</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  创建方法，返回值是数组类型  return返回数组的地址*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回数组的地址，返回到调用者</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192242.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_方法的定义、调用、重载</title>
      <link href="/posts/6d32.html"/>
      <url>/posts/6d32.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。<br>当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h2 id="2-方法的定义"><a href="#2-方法的定义" class="headerlink" title="2 方法的定义"></a>2 方法的定义</h2><p>定义格式：</p><pre class=" language-bash"><code class="language-bash">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>        //代码省略<span class="token punctuation">..</span>.        <span class="token keyword">return</span> 结果<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义格式解释：<br>修饰符：  public static 等<br>返回值类型：表示方法运行的结果的数据类型<br>方法名：定义的方法起名，满足标识符的规范，用来调用方法。<br>参数列表： 方法在运算过程中的未知数据，调用者调用方法时传递<br>return：将方法执行后的返回值带给调用者，方法执行到 return ，整体方法运行结束</p><h2 id="3-定义方法的两个明确"><a href="#3-定义方法的两个明确" class="headerlink" title="3 定义方法的两个明确"></a>3 定义方法的两个明确</h2><p>题目：定义方法实现两个整数的求和计算。</p><p><strong>明确返回值类型</strong>：方法计算的是整数的求和，结果也必然是个整数，返回值类型定义为int类<br>型。<br><strong>明确参数列表</strong>：计算哪两个整数的和，并不清楚，但可以确定是整数，参数列表可以定义两<br>个int类型的 变量，由调用者调用方法时传递</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        定义方法的2个明确        1.明确返回值类型, 2个整数求和,返回值是整数        2.明确参数列表, 不知道哪2个数求和.int a, int b        */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-方法定义注意事项"><a href="#4-方法定义注意事项" class="headerlink" title="4 方法定义注意事项"></a>4 方法定义注意事项</h2><p>定义位置，方法必须定义在一个类中方法外<br>方法不能定义在另一个方法的里面<br>一个类中不能定义2个一模一样的方法<br>返回值类型，必须要和 return 语句返回的类型相同，否则编译失败 。</p><h1 id="方法的调用流程图解"><a href="#方法的调用流程图解" class="headerlink" title="方法的调用流程图解"></a>方法的调用流程图解</h1><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192705.png"></p><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>定义2个int数求和,定义3个int数求和时，2个数求和,3个数求和功能是一样的.如果定义不同的方法名使用起来不方便.最好取相同的名称</p><p>方法重载：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修<br>饰符和返 回值类型无关。</p><p>参数列表：<strong>个数不同，数据类型不同，顺序不同</strong>。<br>重载方法调用：JVM通过方法的参数列表，调用不同的方法。</p><p><strong>题目1</strong><br>比较两个数据是否相等。参数类型分别为两个 byte 类型，两个 short 类型，两个 int 类型，两个<br>long 类型，并在 main 方法中进行测试。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method_Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义不同数据类型的变量</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> g <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> h <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 两个byte类型的</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">byte</span> a<span class="token punctuation">,</span> <span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 两个short类型的</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">short</span> a<span class="token punctuation">,</span> <span class="token keyword">short</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"short"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 两个int类型的</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 两个long类型的</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_流程控制语句、权限修饰符</title>
      <link href="/posts/fa61.html"/>
      <url>/posts/fa61.html</url>
      
        <content type="html"><![CDATA[<h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><p>if语句第一种格式： if</p><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span>｛    语句体<span class="token punctuation">;</span>｝</code></pre><p>if语句第二种格式： if…else</p><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>     语句体1<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>if语句第三种格式： if…else if …else</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句1<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式n<span class="token punctuation">)</span> <span class="token punctuation">{</span>   执行语句n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    执行语句n+1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h1><p>switch语句格式：</p><pre class=" language-bash"><code class="language-bash">switch<span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> 常量值1:    语句体1<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> 常量值2:    语句体2<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">..</span>.  default:    语句体n+1<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>switch语句中，表达式的数据类型，可以是byte，short，int，char，enum（枚举），JDK7后可以接收字符串。</p><h3 id="case的穿透性"><a href="#case的穿透性" class="headerlink" title="case的穿透性"></a>case的穿透性</h3><p> 在switch语句中，如果case的后面不写break，将出现穿透现象，也就是不会在判断下一个case的值，直接向后运行，直到遇到break，或者整体switch结束。</p><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p> <strong>循环语句1–for</strong></p><pre class=" language-bash"><code class="language-bash">for<span class="token punctuation">(</span>初始化表达式①<span class="token punctuation">;</span> 布尔表达式②<span class="token punctuation">;</span> 步进表达式④<span class="token punctuation">)</span><span class="token punctuation">{</span>        循环体③<span class="token punctuation">}</span></code></pre><p>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止。<br>①负责完成循环变量初始化<br>②负责判断是否满足循环条件，不满足则跳出循环<br>③具体执行的语句<br>④循环后，循环条件所涉及变量的变化情况</p><p> <strong>循环语句2–while</strong></p><pre class=" language-bash"><code class="language-bash">初始化表达式①while<span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体③    步进表达式④<span class="token punctuation">}</span></code></pre><p>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止。<br>①负责完成循环变量初始化。<br>②负责判断是否满足循环条件，不满足则跳出循环。<br>③具体执行的语句。<br>④循环后，循环变量的变化情况</p><p> <strong>循环语句3–do…while</strong></p><pre class=" language-bash"><code class="language-bash">初始化表达式①    do<span class="token punctuation">{</span>    循环体③    步进表达式④<span class="token punctuation">}</span>while<span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行顺序：①③④&gt;②③④&gt;②③④…②不满足为止。<br>①负责完成循环变量初始化。<br>②负责判断是否满足循环条件，不满足则跳出循环。<br>③具体执行的语句<br>④循环后，循环变量的变化情况</p><h3 id="循环语句的区别"><a href="#循环语句的区别" class="headerlink" title="循环语句的区别"></a>循环语句的区别</h3><p>for 和 while 的小区别：<br>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率。<br>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。</p><h3 id="跳出语句"><a href="#跳出语句" class="headerlink" title="跳出语句"></a>跳出语句</h3><p><strong>break</strong><br>跳出循环,让循环提前结束</p><p><strong>continue</strong><br>结束本次循环，继续下一次的循环</p><p><strong>死循环</strong>：是循环中的条件永远为true，死循环是永不结束的循环。例如：while(true){}</p><p><strong>嵌套循环</strong>：是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。总共的循环次数=外循环次数*内循环次数</p><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><p>在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限</p><ul><li>public：公共的</li><li>protected：受保护的 </li><li>default：默认的 </li><li>private：私有的</li></ul><p><code>public &gt; protected &gt; 默认 &gt; private</code></p><p><strong>不同权限的访问能力</strong></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804192918.png"><br>建议:<br>成员变量使用 private ，隐藏细节。<br>构造方法使用 public ，方便创建对象。<br>成员方法使用 public ，方便调用方法。</p><p><em>不加权限修饰符，就是default权限</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_数据类型转换、运算符</title>
      <link href="/posts/9bbf.html"/>
      <url>/posts/9bbf.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>Java程序中要求参与计算的数据，必须要保证数据类型一致，如果数据类型不一致将发生类型的转换。</p><h2 id="1-1-自动转换"><a href="#1-1-自动转换" class="headerlink" title="1.1 自动转换"></a>1.1 自动转换</h2><p>一个 int 类型变量和一个 byte 类型变量进行加法运算,运算结果，变量的类型将是 int 类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// byte x = b + i; // 报错</span>    <span class="token comment" spellcheck="true">//int类型和byte类型运算，结果是int类型</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> b <span class="token operator">+</span> i<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>byte 类型内存占有1个字节，在和 int 类型运算时会提升为 int 类型 ，自动补充3个字节，因此计算后的结果还是 int 类型。</p><p>同样道理，当一个 int 类型变量和一个 double 变量运算时， int 类型将会自动提升为 double 类型进行运算。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int类型和double类型运算，结果是double类型</span>    <span class="token comment" spellcheck="true">//int类型会提升为double类型</span>    <span class="token keyword">double</span> e <span class="token operator">=</span> d<span class="token operator">+</span>i<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>范围小的类型向范围大的类型提升， byte、short、char 运算时直接提升为 int 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span>、<span class="token keyword">short</span>、<span class="token keyword">char</span>‐‐<span class="token operator">></span><span class="token keyword">int</span>‐‐<span class="token operator">></span><span class="token keyword">long</span>‐‐<span class="token operator">></span><span class="token keyword">float</span>‐‐<span class="token operator">></span><span class="token keyword">double</span></code></pre><h2 id="1-2-强制转换"><a href="#1-2-强制转换" class="headerlink" title="1.2 强制转换"></a>1.2 强制转换</h2><p>强制转换格式：<br>数据类型 变量名 = （数据类型）被转数据值；</p><p>当一个 short 类型与 int 类型相加，我们知道会类型提升，但是还想给结果赋值给 short 类型变量，<br>就需要强制转换。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//short类型变量，内存中2个字节</span>     <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*       出现编译失败       s和i做运算的时候，i是int类型，s会被提升为int类型       s+i后的结果是int类型，将结果在赋值会short类型时发生错误       short内存2个字节，int类型4个字节       必须将int强制转成short才能完成赋值     */</span>     s <span class="token operator">=</span> s <span class="token operator">+</span> i；<span class="token comment" spellcheck="true">//编译失败</span>     s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译成功</span><span class="token punctuation">}</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>浮点转成整数，直接取消小数点，可能造成数据损失精度。<br>int 强制转成 short 砍掉2个字节，可能造成数据丢失。</p><h2 id="1-3-ASCII编码表"><a href="#1-3-ASCII编码表" class="headerlink" title="1.3 ASCII编码表"></a>1.3 ASCII编码表</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//字符类型变量</span>  <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符类型和int类型计算</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果是98</span><span class="token punctuation">}</span></code></pre><p>在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到97，再和1求和，结果为98。char类型提升为了int类型。char类型内存2个字节，int类型内存4个字节。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804193311.png"></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符: 对变量进行操作的符号<br>运算符的分类: 算数运算符 , 赋值运算符 , 比较运算符 , 逻辑运算符 , 三元运算符</p><h2 id="2-1-算数运算符"><a href="#2-1-算数运算符" class="headerlink" title="2.1 算数运算符"></a>2.1 算数运算符</h2><p>算数运算符包括：<br>*<em>+** 加法运算，字符串连接运算<br>**-** 减法运算<br>*乘法运算<br>*</em>/** 除法运算<br>**%** 取模运算，两个数字相除取余数<br>**++** 、 <strong>- -</strong>      自增自减运算</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义变量</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a ‐ b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.66666?</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"‐‐‐‐‐‐‐‐‐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 整数相除,结果是整数,要得到小数,必须有小数参与运算</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.6666666666666667</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.6666666666666667</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>%取余面试题:</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>‐<span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> ‐<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>‐<span class="token number">5</span> <span class="token operator">%</span> ‐<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -2</span></code></pre><p>注意:取余结果符号与左边符号相同</p><p>++ 运算，变量自己增长1。反之， - - 运算，变量自己减少1，用法与 ++ 一致。<br>独立运算：<br>变量在独立运算时， 前++ 和 后++ 没有区别 。<br>变量 前++ ：例如 ++i 。<br>变量 后++ ：例如 i++ 。<br>混合运算：<br>和其他变量放在一起， 前++ 和 后++ 就产生了不同。<br>变量 前++ ：变量a自己加1，将加1后的结果赋值给b，也就是说a先计算。a和b的结果都是2。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先++,后=赋值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是2</span><span class="token punctuation">}</span></code></pre><p>变量 后++ ：变量a先把自己的值1，赋值给变量b，此时变量b的值就是1，变量a自己再加1。a的<br>结果是2，b的结果是1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先=赋值,后++</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是1</span><span class="token punctuation">}</span></code></pre><p>自增自减面试题</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 面试题：</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a = 10, b = 11</span>c <span class="token operator">=</span> ‐‐a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a = 9, c = 9</span>b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a = 10, b = 10</span>a <span class="token operator">=</span> c‐‐<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a = 9, c = 8</span><span class="token comment" spellcheck="true">// 请分别计算出a,b,c的值</span></code></pre><p><strong>+</strong> 符号在字符串中的操作：<br>**+** 符号在遇到字符串的时候，表示连接、拼接的含义。<br>“a”+”b”的结果是“ab”，连接含义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// + 遇到字符串表示连接</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">+</span> <span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. "abc" + 5 = "abc5"; 2. "abc5" + 5 = "abc55"</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. 5 + 5 = 10; 2. "abc" + 10 = "abc10"</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. 5 + 5 = 10; 2. 10 + "abc" = "10abc"</span><span class="token punctuation">}</span></code></pre><p>面试题:</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5+5="</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出5+5=55</span></code></pre><h2 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2.2 赋值运算符"></a>2.2 赋值运算符</h2><p>赋值运算符包括：<br>*<em>=** 赋值<br>**+=** 加后赋值<br>**-=** 减后赋值<br>**</em>=** 乘后赋值<br>**/=** 除后赋值<br>**%=** 取模后赋值<br>赋值运算符，就是将符号右边的值，赋给左边的变量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义变量</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将3赋值给变量i</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将变量i和2相加,再赋值给变量i</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// +=: 赋值运算符, 将=左边的变量和=右边的值进行操作,再赋值给变量</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    j <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// j = j + 5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    m ‐<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// m = m ‐ 5;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"‐‐‐‐‐‐‐‐‐‐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// b = b + 2; // 错误: 不兼容的类型: 从int转换到byte可能会有损失</span>    <span class="token comment" spellcheck="true">// b += 2; // 可以</span>     b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-比较运算符"><a href="#2-3-比较运算符" class="headerlink" title="2.3 比较运算符"></a>2.3 比较运算符</h2><p>比较运算符又叫关系运算符，是两个数据之间进行比较的运算，运算结果都是布尔值 true 或者 false 。</p><p>比较运算符包括：<br>**==** 比较符号两边数据是否相等，相等结果是true。<br>**&lt;** 比较符号左边的数据是否小于右边的数据，如果小于结果是true。<br>**&gt;** 比较符号左边的数据是否大于右边的数据，如果大于结果是true。<br>**&lt;=** 比较符号左边的数据是否小于或者等于右边的数据，如果小于或等于结果是true。<br>**&gt;=** 比较符号左边的数据是否大于或者等于右边的数据，如果小于或等于结果是true。<br>**!=** 不等于符号 ，如果符号两边的数据不相等，结果是true。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 注意</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">=</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将j赋值给i,输出i</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h2><p>逻辑运算符，是用来对两个布尔类型进行运算的，运算结果都是布尔值 true 或者 false</p><p>逻辑运算符包括<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804193353.png"></p><h2 id="2-5-三元运算符"><a href="#2-5-三元运算符" class="headerlink" title="2.5 三元运算符"></a>2.5 三元运算符</h2><p>三元运算符格式：<br>数据类型 变量名 = 布尔类型表达式？结果1：结果2;</p><p>三元运算符计算方式：<br>布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。<br>布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> <span class="token number">100</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_环境搭建、变量的使用</title>
      <link href="/posts/f79d.html"/>
      <url>/posts/f79d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言开发环境搭建"><a href="#Java语言开发环境搭建" class="headerlink" title="Java语言开发环境搭建"></a>Java语言开发环境搭建</h1><h2 id="1-Java虚拟机——JVM"><a href="#1-Java虚拟机——JVM" class="headerlink" title="1.    Java虚拟机——JVM"></a>1.    Java虚拟机——JVM</h2><p>JVM（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是 Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在 JVM 之上。<br>跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特性(“一次编写,处处运行”)。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</p><h2 id="2-JRE-和-JDK和JVM"><a href="#2-JRE-和-JDK和JVM" class="headerlink" title="2.    JRE 和 JDK和JVM"></a>2.    JRE 和 JDK和JVM</h2><p>JRE (Java Runtime Environment) ：是Java程序的运行时环境，包含 JVM 和运行时所需的 核心类库<br>JDK (Java Development Kit)：是Java程序开发工具包，包含 JRE 和开发人员使用的工具。<br>三者关系：JDK&gt;JRE&gt;JVM</p><h2 id="3-搭建Java的开发环境"><a href="#3-搭建Java的开发环境" class="headerlink" title="3.    搭建Java的开发环境"></a>3.    搭建Java的开发环境</h2><p>在官网上下载一个JDK安装包，双击安装</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804193631.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804194843.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195054.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195110.png"></p><p>安装完毕在指定的文件夹中会出现这个：<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195142.png"><br>双击进入jdk-9.0.0文件夹，进入bin目录<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195433.png"><br>把当前路径复制下来：D:\jdk-9.0.1\bin<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195505.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195531.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195553.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195614.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195629.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195648.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195705.png"></p><p>到这里我们的Java环境就已经搭建好了。然后检查Java环境是否搭建好了<br>按windos+r组合键，输入cmd，点击确定(或者按回车).调出dos窗口<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195740.png"><br>!<img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195804.png"><br>输入javac 如果出现这样的界面,说明Java环境已经搭建好了<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195825.png"><br>如果搭建失败,则会出现下面的界面<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195838.png"></p><h1 id="编写第一个Java程序"><a href="#编写第一个Java程序" class="headerlink" title="编写第一个Java程序"></a>编写第一个Java程序</h1><h2 id="1-程序开发步骤说明"><a href="#1-程序开发步骤说明" class="headerlink" title="1.    程序开发步骤说明"></a>1.    程序开发步骤说明</h2><p>开发环境搭建后， Java程序开发三步骤：编写、编译、运行。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195900.png"></p><h2 id="2-编写Java源程序"><a href="#2-编写Java源程序" class="headerlink" title="2.    编写Java源程序"></a>2.    编写Java源程序</h2><p>1.新建文本文件，完整的文件名修改为 HelloWorld.java ，其中文件名为 HelloWorld ，后 缀名必须为 .java 。<br>2. 用记事本打开<br>3. 在文件中输入代码并保存，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>文件名必须是 HelloWorld ，保证文件名和类的名字是一致的，注意大小写。 每个字母和符号必须与示例代码 一模一样。<br>第一个 HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的 Java源文件 编译成JVM可以看懂的字节码文件 。</p><h2 id="3-编译HelloWorld源文件"><a href="#3-编译HelloWorld源文件" class="headerlink" title="3.    编译HelloWorld源文件"></a>3.    编译HelloWorld源文件</h2><p>在DOS命令行中，进入Java源文件的目录，使用 javac 命令进行编译。<br>格式如下： javac Java源文件名.后缀名<br>示例： javac HelloWorld.java<br>编译成功后会出现同名的class文件</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195927.png"></p><h2 id="4-运行HelloWorld程序"><a href="#4-运行HelloWorld程序" class="headerlink" title="4.    运行HelloWorld程序"></a>4.    运行HelloWorld程序</h2><p>在DOS命令行中，进入Java源文件的目录，使用 java 命令进行运行。 命令：java 类名字</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195938.png"></p><h2 id="5-入门程序说明"><a href="#5-入门程序说明" class="headerlink" title="5.    入门程序说明"></a>5.    入门程序说明</h2><p>编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</p><p>运行：是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序</p><p>main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们 编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</p><h2 id="6-添加注释"><a href="#6-添加注释" class="headerlink" title="6.    添加注释"></a>6.    添加注释</h2><p>注释：对代码解释和说明的文字。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，注释是给人看的，它不影响程序的编译和运行。<br>Java中有单行注释和多行注释<br>单行注释以 //开头 换行结束<br>多行注释以 /*开头  以 */结束</p><h2 id="7-关键字keywords"><a href="#7-关键字keywords" class="headerlink" title="7.    关键字keywords"></a>7.    关键字keywords</h2><p>关键字：Java已经定义好的单词，具有特殊含义。 HelloWorld案例中，出现的关键字有 public 、 class 、 static 、 void 等，关键字全部都是<br>比如这些</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804195953.png"></p><h2 id="8-标识符"><a href="#8-标识符" class="headerlink" title="8.    标识符"></a>8.    标识符</h2><p>标识符：是指在程序中，我们自己定义的名字。比如类的名字、方法的名字和变量的名字等等，都是标识 符。<br>HelloWorld案例中，出现的标识符有类名字 HelloWorld 。 </p><p>命名规则： 硬性要求<br>标识符可以包含英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号）和 _（下划线） 。<br>标识符不能以数字开头。<br>标识符不能是关键字。<br>区分大小写。 </p><p>命名规范： 软性建议<br>类名规范：每个单词首字母大写（大驼峰式）。<br>方法名和变量名规范： 第一个单词全小写，后面每个单词首字母大写（小驼峰式）。<br>包名规范：全部小写。</p><h1 id="常量、变量、数据类型"><a href="#常量、变量、数据类型" class="headerlink" title="常量、变量、数据类型"></a>常量、变量、数据类型</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量：是指在Java程序中固定不变的数据</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量：变量是内存中的一小块区域，其值可以在一定范围内变化 </p><p>数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。 程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可以保存6，这样x保存的数据是可以改变的，这就是变量。 Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</p><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.    数据类型"></a>1.    数据类型</h2><p>Java的数据类型分为两大类：<br>基本数据类型：包括 整数 、 浮点数 、 字符 、 布尔 。<br>引用数据类型：包括 类 、 数组 、 接口 。<br>基本数据类型<br>四类八种基本数据类型：<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/java/20200804200008.png"><br>Java中的默认类型：整数类型是 int 、浮点类型是 double 。</p><h2 id="2-变量的定义"><a href="#2-变量的定义" class="headerlink" title="2.    变量的定义"></a>2.    变量的定义</h2><p>变量定义的格式包括三个要素： 数据类型 、 变量名 、 数据值 。<br>定义所有基本数据类型的变量，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义字节型变量</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义短整型变量</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义整型变量</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义长整型变量</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> 12345678900L<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义单精度浮点型变量</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">5.5F</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义双精度浮点型变量</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义布尔型变量</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义字符型变量</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>long类型：建议数据后加L表示。 float类型：建议数据后加F表示。</p><h2 id="3-定义变量注意事项"><a href="#3-定义变量注意事项" class="headerlink" title="3.    定义变量注意事项"></a>3.    定义变量注意事项</h2><ol><li>定义的变量，不赋值不能使用。 </li><li>同一个方法中变量名不能重复。</li><li>变量只在定义时的{}中有效。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 变量在使用之前一定要赋值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误: 可能尚未初始化变量b</span>        <span class="token comment" spellcheck="true">// double a = 3.1; // 错误: 已在方法 main(String[])中定义了变量 a</span>        <span class="token comment" spellcheck="true">// System.out.println(a);</span>        <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误: 已在方法 main(String[])中定义了变量 a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// System.out.println(d); // 错误: 找不到符号</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring官网上下载历史版本的springsource</title>
      <link href="/posts/2905.html"/>
      <url>/posts/2905.html</url>
      
        <content type="html"><![CDATA[<p>以前的下载链接<a href="https://spring.io/tools/sts/legacy%E5%B7%B2%E7%BB%8F404%E4%BA%86" target="_blank" rel="noopener">https://spring.io/tools/sts/legacy已经404了</a></p><p>目前官网上提供的下载 是Spring Tools 4</p><p>其他版本的sts地址都没有，那么我们要怎么获得我们用的eclipse版本的sts下载地址呢？</p><p>其实这个是有规律可寻的。</p><p>我们打开spring官网下载地址，里面有个Update Site Archives，在这里可以看到几个版本tools下载的选项，我们把一个版本的地址复制下来，后面有大用处！</p><p>复制出来的地址为：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.5.RELEASE/e4.8/springsource-tool-suite-3.9.5.RELEASE-e4.8.0-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.9.5.RELEASE/e4.8/springsource-tool-suite-3.9.5.RELEASE-e4.8.0-updatesite.zip</a></p><p>再打开历史版本的地址，随便找个版本的地址复制下来，我这里是使用的4.5.2版本64位的地址。为啥呢？因为我的eclipse就是4.5.2版本，哈哈哈。</p><p>复制出来的地址为：</p><p><a href="http://download.springsource.com/release/STS/3.7.3.RELEASE/dist/e4.5/spring-tool-suite-3.7.3.RELEASE-e4.5.2-win32-x86_64.zip" target="_blank" rel="noopener">http://download.springsource.com/release/STS/3.7.3.RELEASE/dist/e4.5/spring-tool-suite-3.7.3.RELEASE-e4.5.2-win32-x86_64.zip</a></p><p>对比我们复制出来的两个地址</p><p>通过对比我们可以发现规律</p><p>我们只要知道我们eclipse的版本，就能拼出我们需要的插件下载链接</p><p>我们可以拼出：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip</a></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805131004.png"></p><p>同样的方法，我们可以拼出</p><p>eclipse4.7.3a版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.9.4.RELEASE/e4.7/springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip</a></p><p>eclipse4.7.3版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.3.RELEASE/e4.7/springsource-tool-suite-3.9.3.RELEASE-e4.7.3-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.9.3.RELEASE/e4.7/springsource-tool-suite-3.9.3.RELEASE-e4.7.3-updatesite.zip</a></p><p>eclipse4.7.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.2.RELEASE/e4.7/springsource-tool-suite-3.9.2.RELEASE-e4.7.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.9.2.RELEASE/e4.7/springsource-tool-suite-3.9.2.RELEASE-e4.7.2-updatesite.zip</a></p><p>eclipse4.7.1a版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.1.RELEASE/e4.7/springsource-tool-suite-3.9.1.RELEASE-e4.7.1a-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.9.1.RELEASE/e4.7/springsource-tool-suite-3.9.1.RELEASE-e4.7.1a-updatesite.zip</a></p><p>eclipse4.7.0版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.9.0.RELEASE/e4.7/springsource-tool-suite-3.9.0.RELEASE-e4.7.0-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.9.0.RELEASE/e4.7/springsource-tool-suite-3.9.0.RELEASE-e4.7.0-updatesite.zip</a></p><p>eclipse4.6.3版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.4.RELEASE/e4.6/springsource-tool-suite-3.8.4.RELEASE-e4.6.3-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.8.4.RELEASE/e4.6/springsource-tool-suite-3.8.4.RELEASE-e4.6.3-updatesite.zip</a></p><p>eclipse4.6.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.3.RELEASE/e4.6/springsource-tool-suite-3.8.3.RELEASE-e4.6.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.8.3.RELEASE/e4.6/springsource-tool-suite-3.8.3.RELEASE-e4.6.2-updatesite.zip</a></p><p>eclipse4.6.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.2.RELEASE/e4.6/springsource-tool-suite-3.8.2.RELEASE-e4.6.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.8.2.RELEASE/e4.6/springsource-tool-suite-3.8.2.RELEASE-e4.6.1-updatesite.zip</a></p><p>eclipse4.6版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.1.RELEASE/e4.6/springsource-tool-suite-3.8.1.RELEASE-e4.6-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.8.1.RELEASE/e4.6/springsource-tool-suite-3.8.1.RELEASE-e4.6-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.8.0.RELEASE/e4.6/springsource-tool-suite-3.8.0.RELEASE-e4.6-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.8.0.RELEASE/e4.6/springsource-tool-suite-3.8.0.RELEASE-e4.6-updatesite.zip</a></p><p>eclipse4.5.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.7.3.RELEASE/e4.5/springsource-tool-suite-3.7.3.RELEASE-e4.5.2-updatesite.zip</a></p><p>eclipse4.5.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.2.RELEASE/e4.5/springsource-tool-suite-3.7.2.RELEASE-e4.5.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.7.2.RELEASE/e4.5/springsource-tool-suite-3.7.2.RELEASE-e4.5.1-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.1.RELEASE/e4.5/springsource-tool-suite-3.7.1.RELEASE-e4.5.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.7.1.RELEASE/e4.5/springsource-tool-suite-3.7.1.RELEASE-e4.5.1-updatesite.zip</a></p><p>eclipse4.5版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.7.0.RELEASE/e4.5/springsource-tool-suite-3.7.0.RELEASE-e4.5-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.7.0.RELEASE/e4.5/springsource-tool-suite-3.7.0.RELEASE-e4.5-updatesite.zip</a></p><p>eclipse4.4.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.4.RELEASE/e4.4/springsource-tool-suite-3.6.4.RELEASE-e4.4.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.6.4.RELEASE/e4.4/springsource-tool-suite-3.6.4.RELEASE-e4.4.2-updatesite.zip</a></p><p>eclipse4.4.1版本（SR1）：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.3.SR1/e4.4/springsource-tool-suite-3.6.3.SR1-e4.4.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.6.3.SR1/e4.4/springsource-tool-suite-3.6.3.SR1-e4.4.1-updatesite.zip</a></p><p>eclipse4.4.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.3.RELEASE/e4.4/springsource-tool-suite-3.6.3.RELEASE-e4.4.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.6.3.RELEASE/e4.4/springsource-tool-suite-3.6.3.RELEASE-e4.4.1-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.2.RELEASE/e4.4/springsource-tool-suite-3.6.2.RELEASE-e4.4.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.6.2.RELEASE/e4.4/springsource-tool-suite-3.6.2.RELEASE-e4.4.1-updatesite.zip</a></p><p>eclipse4.4版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.1.RELEASE/e4.4/springsource-tool-suite-3.6.1.RELEASE-e4.4-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.6.1.RELEASE/e4.4/springsource-tool-suite-3.6.1.RELEASE-e4.4-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.6.0.RELEASE/e4.4/springsource-tool-suite-3.6.0.RELEASE-e4.4-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.6.0.RELEASE/e4.4/springsource-tool-suite-3.6.0.RELEASE-e4.4-updatesite.zip</a></p><p>eclipse4.3.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.5.1.RELEASE/e4.3/springsource-tool-suite-3.5.1.RELEASE-e4.3.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.5.1.RELEASE/e4.3/springsource-tool-suite-3.5.1.RELEASE-e4.3.2-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.5.0.RELEASE/e4.3/springsource-tool-suite-3.5.0.RELEASE-e4.3.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.5.0.RELEASE/e4.3/springsource-tool-suite-3.5.0.RELEASE-e4.3.2-updatesite.zip</a></p><p>eclipse4.3.1版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.4.0.RELEASE/e4.3/springsource-tool-suite-3.4.0.RELEASE-e4.3.1-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.4.0.RELEASE/e4.3/springsource-tool-suite-3.4.0.RELEASE-e4.3.1-updatesite.zip</a></p><p>eclipse4.3版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.3.0.RELEASE/e4.3/springsource-tool-suite-3.3.0.RELEASE-e4.3-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.3.0.RELEASE/e4.3/springsource-tool-suite-3.3.0.RELEASE-e4.3-updatesite.zip</a></p><p>eclipse4.2.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.2.0.RELEASE/e4.2/springsource-tool-suite-3.2.0.RELEASE-e4.2.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.2.0.RELEASE/e4.2/springsource-tool-suite-3.2.0.RELEASE-e4.2.2-updatesite.zip</a></p><p>eclipse4.2版本：</p><p><a href="http://download.springsource.com/release/TOOLS/update/3.1.0.RELEASE/e4.2/springsource-tool-suite-3.1.0.RELEASE-e4.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.1.0.RELEASE/e4.2/springsource-tool-suite-3.1.0.RELEASE-e4.2-updatesite.zip</a></p><p><a href="http://download.springsource.com/release/TOOLS/update/3.0.0.RELEASE/e4.2/springsource-tool-suite-3.0.0.RELEASE-e4.2-updatesite.zip" target="_blank" rel="noopener">http://download.springsource.com/release/TOOLS/update/3.0.0.RELEASE/e4.2/springsource-tool-suite-3.0.0.RELEASE-e4.2-updatesite.zip</a></p><p>4.2以下版本的eclipse的sts插件下载地址可以根据这个方法拼出下载地址，就不一一列出了。这些应该已经满足大部分的版本了。</p><p>这是以上版本的sts合集的百度网盘地址：<a href="https://pan.baidu.com/s/1CfCehUUbSC-vB-zjWBLDlg" target="_blank" rel="noopener">https://pan.baidu.com/s/1CfCehUUbSC-vB-zjWBLDlg</a></p><p>原文地址：<a href="https://www.cnblogs.com/Jeremy2001/p/10324563.html" target="_blank" rel="noopener">https://www.cnblogs.com/Jeremy2001/p/10324563.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springsource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/posts/d20c.html"/>
      <url>/posts/d20c.html</url>
      
        <content type="html"><![CDATA[<p>首先是类的加载,连接,初始化</p><h2 id="四种获取类的Class对象的方法"><a href="#四种获取类的Class对象的方法" class="headerlink" title="四种获取类的Class对象的方法"></a>四种获取类的Class对象的方法</h2><p>1、类型名.class说明：</p><p>基本数据类型和void，只能通过这种方式。</p><p>2、对象.getClass（）：获取对象的运行时类型说明：只能用于引用数据类型</p><p>3、Class.forName（“类的全名称”）类的全名称：包.类名</p><p>4、类加载器对象.loadClass（“类的全名称”）</p><h2 id="四种类加载器"><a href="#四种类加载器" class="headerlink" title="四种类加载器"></a>四种类加载器</h2><p>1、引导类加载器（Bootstrap Classloader）：又称为根类加载器它负责加载]ava的核心库</p><p>它用原生代码（C/C++）来实现的，并不继承自java.lang.ClassLoder</p><p>2、扩展类加载器（Extension ClassLoader） JAVA_HOME/ire/ext/*.jar</p><p>3、应用程序类加载器（Application Classloader） classpath下，就是自定义类型</p><p>4、自定义类加载器例如：tomcat</p><p>Java的类加载的过程是一个双亲（parent）委托模式加载的：</p><p>当“应用程序类加载器”接到一个加载任务时：</p><p>（1）先搜索内存中是否已经加载过了，如果加载过了，就可以找到对应的Class对象，那么就不加载了。</p><p>（2）如果没有找到，把这个任务先提交给“parent”，父加载器接到任务时，也是重复（1）（2）</p><p>（3）直到传给了根加载器，如果根加载器可以加载，就完成了，如果不能加载，往回传，依次每个加载器尝试在自己负责的路径下搜索，如果找到就直接返回C1ass对象，如果一直回传到“应用程序类加载器”，还是没有找到，就会报ClassNotFoundException。</p><p> <img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805130438.jpg"></p><h2 id="类加载器的作用："><a href="#类加载器的作用：" class="headerlink" title="类加载器的作用："></a>类加载器的作用：</h2><p>1、最主要的作用：加载类</p><p>2、辅助的作用：可以用它来加载“类路径下”的资源文件</p><p>JavaSE：例如：bin中SrC下文件–&gt;bin目录下</p><p>ClassLoader：</p><p>（1）静态方法</p><p>ClassLoader.getSystemResourceAsStream（”src1.properties”）</p><p>但是这个适用于JavaSE阶段，因为它用应用程序类加载器去加载的如果是Web阶段，用这个方法是有问题的，因为web阶段的类路径在WEB-INF/classes下，必须由它自定义类加载器</p><p>（2）非静态方法</p><p>类加载器对象.getResourceAsStream（”src1.properties”） Web阶段用这个</p><p>Properties：Properties类表示了一个持久的属性集。Properties可保存在流中或从流中加载。属性列表中每个键及其对应值都是字符串</p><h2 id="通过反射查看类的信息"><a href="#通过反射查看类的信息" class="headerlink" title="通过反射查看类的信息"></a>通过反射查看类的信息</h2><p>在运行期间，动态的获取某个类的详细信息步骤：</p><p>1、获取某个类型的Class对象</p><p>2、使用Class和java.lang.reflect包下面的其他类型的API</p><p>使用反射生成并操作对象</p><p>在运行期间，动态的创建任意类型的对象，</p><p>1、Class对象.newInstance（）</p><p>前提：这个类型必须有无参构造</p><p>步骤：</p><p>（1）获取Class对象</p><p>（2）直接调用Class对象.newInstance（）</p><p>2、构造器来创建对象</p><p>步骤：</p><p>（1）获取Class对象</p><p>（2）获取构造器对象，获取其中一个</p><p>C1ass类中有这样的方法：</p><p>Constructor<t>getDeclaredConstructor（Class&lt;？&gt;..…parameterTypes）</t></p><p>parameterTypes：构造器形参的类型列表</p><p>（3）用构造器创建对到 java.lang.reflect.Constructor类型中：</p><p>T newInstance（Object…initargs）</p><p>initargs：创建对象时，给构造器的实参列表</p><p>运行期间，动态的为对象的属性赋值或获取属性值步骤：</p><p>1、获取Class对象</p><p>2、获取Field属性对象</p><p>3、创建实例对象，Class代表的类型的实例对象</p><p>4、调用Fie1d对象.set（实例对象，属性值）调用Field对象.get（实例对象）</p><p>说明：如果属性是私有的，那么可以调用Field对象.setAccessible（true）；</p><p> 在运行期间，动态的调用任意对象的任意方法步骤：</p><p>1、获取Class对象</p><p>2、获取Method对象</p><p>方法有重载，就用方法名+形参列表clazz.getDeclaredMethod（name，parameterTypes）</p><p>3、创建实例对象</p><p>4、调用方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">createobject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 创建properties集合</span>           Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 从文件中加载内容到集合中</span>           pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>BeanDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/stu.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 从集合中获得类名</span>           String className <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 通过反射获得Class对象</span>           Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 快速创建对象</span>           Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 遍历集合</span>           Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 判断name是否class</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 获得值</span>               String value <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// name：成员变量名</span>               <span class="token comment" spellcheck="true">// 根据成员变量名获得对应的Field对象</span>               Field f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 强制反射</span>               f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 获得成员变量的类型</span>               Class <span class="token class-name">typeclass</span> <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>typeclass <span class="token operator">==</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断成员变量的数据类型是否是int类型</span>                   f<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// 给对象的赋值</span>                   f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 返回对象</span>           <span class="token keyword">return</span> obj<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL关联查询</title>
      <link href="/posts/8e03.html"/>
      <url>/posts/8e03.html</url>
      
        <content type="html"><![CDATA[<p>从2张或多张表中,取出有关联的数据</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125816.jpg"></p><p>关联查询一共有几种情况：</p><h2 id="内连接："><a href="#内连接：" class="headerlink" title="内连接："></a>内连接：</h2><p>INNER JOIN 、CROSS JOIN</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125839.png"></p><p>（1）形式一</p><p>select 字段列表</p><p>from A表 inner join B表</p><p>on 关联条件</p><p>【where 其他筛选条件】</p><p>说明：如果不写关联条件，会出现一种现象：笛卡尔积</p><p> 关联条件的个数 = n - 1，n是几张表关联</p><p>  on只能和join一起用</p><p>（2） 形式二</p><p>select 字段列表</p><p>from A表 , B表</p><p>where 关联条件 【and 其他筛选条件】</p><h2 id="外连接："><a href="#外连接：" class="headerlink" title="外连接："></a>外连接：</h2><p>左外连接（LEFT OUTER JOIN）</p><p>左连接：</p><p>第一种结果：A</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125851.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>第二种结果：A - A∩B</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125902.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null</p><h2 id="右外连接："><a href="#右外连接：" class="headerlink" title="右外连接："></a>右外连接：</h2><p>（RIGHT OUTER JOIN）</p><p>第一种结果：B</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125910.png"></p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>第二种结果：B - A∩B</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125917.png"></p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null</p><h2 id="全外连接："><a href="#全外连接：" class="headerlink" title="全外连接："></a>全外连接：</h2><p>（FULL OUTER JOIN）</p><p>使用union实现全连接的效果</p><p>（1）A ∪ B</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125924.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>union</p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>（3）A ∪ B - A ∩ B</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125931.png"></p><p>select 字段列表</p><p>from A表 left join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null </p><p>union</p><p>select 字段列表</p><p>from A表 right join B表</p><p>on 关联条件</p><p>where 从表的关联字段 is null</p><h2 id="自连接："><a href="#自连接：" class="headerlink" title="自连接："></a>自连接：</h2><p>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream API</title>
      <link href="/posts/2d14.html"/>
      <url>/posts/2d14.html</url>
      
        <content type="html"><![CDATA[<ol><li>用于处理内存中的数据</li></ol><p>像SQL语句来操作数据库一样的形式。</p><ol start="2"><li>Stream流的特点</li></ol><p>（1）Stream流不可变，每次改变就会创建一个新的流</p><p>（2）Stream流也不会改变数据源的数据</p><p>（3）Stream的中间操作是一个延迟操作，一直到终结操作时，一起完成。</p><ol start="3"><li>Stream API的使用分为三个步骤</li></ol><p>（1）创建Stream</p><p>（2）0-n步中间操作</p><p>（3）终结操作</p><ol start="4"><li>四种方式创建Stream</li></ol><p>（1）通过Arrays.stream（数组）</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125337.png"></p><p>（2）通过集合对象.stream（）</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125355.png"></p><p>（3）Stream.of（…）</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125408.png"></p><p>（4）创建无限流</p><p>Stream.generate（Supplier）</p><p>Stream.iterate（T seed，UnaryOperator）</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125419.png"></p><ol start="5"><li>中间操作：这些方法的返回值类型还是Stream，所以可以继续再操作</li></ol><p>（1）filter（Predicate p）：按照p的条件过滤</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125433.png"></p><p>（2）distinct（）：去重复</p><p>（3）limit（long maxSize）取流中的前maxSize个</p><p>（4）skip（long  n）：跳过前n个</p><p>（5）peek（Consumer action）：对流中的元素，挨个执行consumer接口的action操作</p><p>（6）map（Function f）：对流中的每一个元素，都映射f指定的操作</p><p>（7）flatMap （Function f）</p><p>（8）sorted（）</p><p>sorted（Comparator com）</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125447.png"></p><ol start="6"><li>终结操作：这些方法的返回值类型不是Stream，所以不能继续再操作，所以对Stream的操作就结束</li></ol><p>一个流一旦终结就结束了，就不能用了，要再使用，需要重写创建新的Stream</p><p>（1）forEach（Consumer c）</p><p>（2）long count（）</p><p>（3）Optional<t>max（Comparatorc）</t></p><p>（4）0ptional<t>min（Comparator c）</t></p><p>（5）boolean allMatch（Predicate p）：所有都匹配</p><p>​       boolean anyMatch（Predicate p）：有任一个匹配</p><p>​       boolean noneMatch（Predicate p）：都不匹配</p><p>（6）R collect（Collector c）</p><p>Collectors 工具类提供了很多静态方法，可以方便地创建常见收集器实例。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805125456.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 安装破解</title>
      <link href="/posts/cfdf.html"/>
      <url>/posts/cfdf.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h2><p>软件官网 : <a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">https://www.navicat.com.cn/</a></p><p>Navicat Premium 12 下载地址:<a href="https://www.lanzous.com/i9j0syf" target="_blank" rel="noopener">https://www.lanzous.com/i9j0syf</a> 密码:7pup</p><p>Navicat Premium 15 下载地址: <a href="https://www.lanzous.com/i9j0ozc" target="_blank" rel="noopener">https://www.lanzous.com/i9j0ozc</a> 密码:f30q</p><p>Keygen Patch 下载地址: <a href="https://www.lanzous.com/i9j0qxc" target="_blank" rel="noopener">https://www.lanzous.com/i9j0qxc</a> 密码:a2kk</p><h2 id="断网"><a href="#断网" class="headerlink" title="断网"></a>断网</h2><p>首先断网，再安装Navicat（全部点下一步），安装成功后不要打开软件</p><p>把Keygen Patch复制到安装目录”C:\Program Files\PremiumSoft\Navicat Premium 15”下，运行Keygen Patch</p><p>在最顶部选择版本，点右边Patch</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120800.png"></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>不要关闭Keygen Patch，打开桌面上Navicat快捷方式，点注册</p><p>返回Keygen Patch，点中部最右边的Generate</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120816.png"></p><p>返回Navicat，此时激活码已自动填入，点激活，再点手动激活（会卡一下）</p><p>复制Navicat上方的请求码（一长串）到Keygen Patch的白色大框中，点击左下角的Generate</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120831.png"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>返回Keygen Patch，此时激活码已自动填入，点激活，点确定</p><p>然后软件会自动打开，打开左上角栏的工具—选项，取消自动检查更新，取消共享数据，点确定</p><p>关闭Navicat和Keygen Patch，电脑联网，打开Navicat，打开左上角栏的帮助—关于，如果仍然显示区域许可证，那么才是真正地激活成功</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805120847.png"></p><p>如果不行,就要卸载原有Navicat</p><p>删除”C:\Program Files\PremiumSoft”文件夹</p><p>Win+R，输入regedit，删除”计算机\HKEY_CURRENT_USER\Software\PremiumSoft”文件夹</p><p>重启电脑 , 断网按上面的步骤再来一遍</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat Premium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linxu系统安装WordPress</title>
      <link href="/posts/3db8.html"/>
      <url>/posts/3db8.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>确保在安装wordpress之前，安装了web服务器比如：nginx，php，数据库比如：mysql</p><p>没有安装的翻我之前的博文有安装方法</p><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>进入官网下载压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805114943.png"></p><p><code>wget https://wordpress.org/latest.tar.gz</code></p><p>解压</p><p><code>tar -zxvf wordpress-5.3.2.tar.gz </code></p><p>移动到指定目录下</p><p><code>mv wordpress/* /www/wordpress/</code></p><h2 id="给权限"><a href="#给权限" class="headerlink" title="给权限"></a>给权限</h2><p><code>chown –R www.www /www</code></p><p>cd /www/</p><p>查看权限 ll</p><p>浏览器输入ip即可到达WordPress安装界面</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805115646.png"></p><p> 之后填写基本信息，注册账户，就可以登录wordpress后台了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装配置PHPmyadmin</title>
      <link href="/posts/239d.html"/>
      <url>/posts/239d.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载zip安装包"><a href="#下载zip安装包" class="headerlink" title="下载zip安装包"></a>下载zip安装包</h2><p>进官网下载zip安装包</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805103624.png"></p><p><code>wget https://files.phpmyadmin.net/phpMyAdmin/5.0.1/phpMyAdmin-5.0.1-all-languages.zip</code></p><p>安装解压工具</p><p><code>yum install unzip –y</code></p><p>解压安装包</p><p><code>unzip unzip phpMyAdmin-5.0.1-all-languages.zip</code></p><p>把解压好的文件移动到/www/phpMyAdmin下面</p><p><code>mv phpMyAdmin-5.0.1-all-languages/* /www/phpMyAdmin/</code></p><p><code>cd /www/phpMyAdmin </code></p><p>复制重命名一份配置文件</p><p><code>cp config.sample.inc.php config.php</code></p><p>进入/etc/nginx/conf.d</p><h2 id="配置文件phpMyAdmin-conf"><a href="#配置文件phpMyAdmin-conf" class="headerlink" title="配置文件phpMyAdmin.conf"></a>配置文件phpMyAdmin.conf</h2><p>创建一个配置文件phpMyAdmin.conf</p><p>添加以下代码</p><pre><code>server {      listen       880;      server_name  localhost;  root /www/phpMyAdmin;      location / {          index  index.php index.html index.htm;      }      error_page   500 502 503 504  /50x.html;      location = /50x.html {          root   html;      }      location ~ \.php$ {          fastcgi_pass   127.0.0.1:9000;          fastcgi_index  index.php;          fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;          include        fastcgi.conf;      }}</code></pre><p>在/etc/nginx/nginx.conf中引入配置文件</p><p>（include conf.d/phpMyAdmin.conf;）</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805103646.png"></p><p>在服务器中打开安全组端口，浏览器中输入相应的ip：880进入登录页面、</p><p><code>cd /www/phpMyAdmin/</code></p><p><code>cp libraries/config.default.php config.inc.php</code></p><p><code>vim config.inc.php</code></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>端口号改为3306</p><p><code>$cfg['Servers'][$i]['port'] = '3306';</code></p><p>修改root密码：</p><p><code>$cfg['Servers'][$i]['password'] = '******';</code></p><p>修改为本地地址</p><p><code>$cfg['Servers'][$i]['host'] = '127.0.0.1';</code></p><h2 id="重启php服务器"><a href="#重启php服务器" class="headerlink" title="重启php服务器"></a>重启php服务器</h2><p><code>systemctl restart php-fpm</code></p><p>然后就能访问PHPmyadmin数据库了</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200805103710.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHPmyadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统安装MySQL详细教程</title>
      <link href="/posts/ba76.html"/>
      <url>/posts/ba76.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载rpm安装包"><a href="#下载rpm安装包" class="headerlink" title="下载rpm安装包"></a>下载rpm安装包</h2><p>首先进入MySQL官网下载rpm安装包</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212821.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212842.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212852.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212904.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212912.png"><br>用yum install mysql80-community-release-el7-3.noarch.rpm 安装</p><p>yum repolist all|grep mysql可以看到仓库默认开启的是8.0,</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213045.png"></p><h2 id="安装yum工具"><a href="#安装yum工具" class="headerlink" title="安装yum工具"></a>安装yum工具</h2><p>yum install yum-utils –y </p><p>我们要安装的是5.7</p><p>yum-config-manager –disable mysql80-community关闭8.0版本</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213058.png"><br>yum-config-manager –enable mysql57-community开启5.7版本</p><p>yum install mysql-community-server –y安装</p><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><p>systemctl start mysqld启动</p><p>systemctl status mysqld查看状态<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213108.png"><br>ps -ef|grep mysqld查看进程</p><p>cat /var/log/mysqld.log查看数据库默认密码</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213119.png"><br>登录改密码</p><p>mysql –uroot –p******</p><p>alter user ‘root’@’localhost’ indentified by ‘<strong>**</strong>‘;</p><p>创建数据库</p><p>create database wordpress;</p><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><p>show databases;</p><p>查看用户权限</p><p>select user,host from mysql.user;</p><p>create user ‘wordpress’@’%’ identified by ‘<strong>**</strong>‘;创建一个用户</p><p>grant all privileges on wordpress.* to ‘wordpress’@’%’;给用户权限</p><p>远程访问数据库成功。</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804213127.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhpStorm配置Apache与php的运行环境详细教程</title>
      <link href="/posts/384e.html"/>
      <url>/posts/384e.html</url>
      
        <content type="html"><![CDATA[<p>本文主要说明如何在phpstorm中配置已经安装好的PHP与apache。</p><h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><p>首先需要在本地安装php，这里我安装的是phpstudy</p><ol><li>进入PHPstorm的界面点击file 下的settings</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214322.png"></p><ol start="2"><li>在Languages&amp;Frameworks中的PHP</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214400.png"></p><ol start="3"><li>找到安装php的路径，选择php.exe文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214411.png"><br>可以看到 CLI Interpreter里可以使用PHP5.6.9了</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214424.png"></p><ol start="4"><li>选择自己安装的版本号即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214857.png"></p><ol start="5"><li>在右上方的tools，deployment中 配置服务器信息 </li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214908.png"></p><ol start="6"><li>在这里添加Apache服务器</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214921.png"></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804214944.png"><br>Folder目录中填写的是apache服务器会扫描项目的根目录， Web server root URL为访问的url路径</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215007.png"><br>并修改自己的网站目录，同时也可以修改端口号</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215013.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Apache </tag>
            
            <tag> PhpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linxu系统安装PHP详细教程</title>
      <link href="/posts/3772.html"/>
      <url>/posts/3772.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装centos源"><a href="#安装centos源" class="headerlink" title="安装centos源"></a>安装centos源</h2><p><code>yum install epel-release –y</code></p><h2 id="下载php安装压缩包"><a href="#下载php安装压缩包" class="headerlink" title="下载php安装压缩包"></a>下载php安装压缩包</h2><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212322.png"><br>wget <a href="https://www.php.net/distributions/php-7.3.15.tar.gz" target="_blank" rel="noopener">https://www.php.net/distributions/php-7.3.15.tar.gz</a></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212336.png"><br>解压 tar xf php-7.3.15.tar.gz</p><p>进入php-7.3.15文件目录</p><h2 id="安装php依赖"><a href="#安装php依赖" class="headerlink" title="安装php依赖"></a>安装php依赖</h2><pre class=" language-java"><code class="language-java">yum install gcc \              gcc<span class="token operator">-</span>c<span class="token operator">++</span> \              libxml2 \              libxml2<span class="token operator">-</span>devel \              openssl \              openssl<span class="token operator">-</span>devel \              libcurl \              libcurl<span class="token operator">-</span>devel \              freetype \              freetype<span class="token operator">-</span>devel \              libjpeg \              libjpeg<span class="token operator">-</span>devel \              libpng \              libpng<span class="token operator">-</span>devel \              libxslt \              libxslt<span class="token operator">-</span>devel \              systemd<span class="token operator">-</span>devel \              libicu<span class="token operator">-</span>devel \              libedit<span class="token operator">-</span>devel</code></pre><h2 id="安装cmake3"><a href="#安装cmake3" class="headerlink" title="安装cmake3"></a>安装cmake3</h2><p>yum install cmake3 –y</p><p>拷贝一份，重命名为cmake</p><p>cp /usr/bin/cmake3 /usr/bin/cmake</p><p>查看cmake是否为3.0以上版本</p><p>cmake –version</p><h2 id="安装libzip1-5-2"><a href="#安装libzip1-5-2" class="headerlink" title="安装libzip1.5.2"></a>安装libzip1.5.2</h2><p>安装bzip2-devel依赖包</p><p>yum install bzip2 bzip2-devel -y</p><p>到官网下载libzip压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212352.png"><br>wget <a href="https://libzip.org/download/libzip-1.6.1.tar.gz" target="_blank" rel="noopener">https://libzip.org/download/libzip-1.6.1.tar.gz</a></p><p>解压进入libzip-1.6.1创建build目录</p><p>tar xf libzip-1.6.1.tar.gz </p><p>cd libzip-1.6.1</p><p>mkdir build</p><p>进入build目录里面执行cmake ..，make，make安装</p><p>cd build</p><p>cmake ..</p><p>make</p><p>make install</p><h2 id="创建www用户"><a href="#创建www用户" class="headerlink" title="创建www用户"></a>创建www用户</h2><p>useradd -M -s /sbin/nologin www</p><p>-M:不要自动建立用户的登入目录</p><p>-s 用户不能用作登录</p><p>Id www 查看</p><p>#修改库加载路径</p><p>vim /etc/ld.so.conf </p><p>#添加如下几行</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib64<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>usr<span class="token operator">/</span>lib64</code></pre><p>使之生效:</p><p>ldconfig -v</p><h2 id="进入php-7-3-15目录配置"><a href="#进入php-7-3-15目录配置" class="headerlink" title="进入php-7.3.15目录配置"></a>进入php-7.3.15目录配置</h2><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/configure <span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php \    <span class="token operator">--</span>with<span class="token operator">-</span>config<span class="token operator">-</span>file<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php<span class="token operator">/</span>etc \    <span class="token operator">--</span>with<span class="token operator">-</span>config<span class="token operator">-</span>file<span class="token operator">-</span>scan<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>php<span class="token operator">/</span>etc<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \    <span class="token operator">--</span>disable<span class="token operator">-</span>cgi \    <span class="token operator">--</span>enable<span class="token operator">-</span>fpm \    <span class="token operator">--</span>with<span class="token operator">-</span>fpm<span class="token operator">-</span>user<span class="token operator">=</span>www \    <span class="token operator">--</span>with<span class="token operator">-</span>fpm<span class="token operator">-</span>group<span class="token operator">=</span>www \    <span class="token operator">--</span>enable<span class="token operator">-</span>ftp \    <span class="token operator">--</span>with<span class="token operator">-</span>curl \    <span class="token operator">--</span>with<span class="token operator">-</span>gd \    <span class="token operator">--</span>with<span class="token operator">-</span>gettext \    <span class="token operator">--</span>with<span class="token operator">-</span>iconv<span class="token operator">-</span>dir \    <span class="token operator">--</span>with<span class="token operator">-</span>kerberos \    <span class="token operator">--</span>with<span class="token operator">-</span>libedit \    <span class="token operator">--</span>with<span class="token operator">-</span>openssl \    <span class="token operator">--</span>with<span class="token operator">-</span>pcre<span class="token operator">-</span>regex \    <span class="token operator">--</span>with<span class="token operator">-</span>pdo<span class="token operator">-</span>mysql \    <span class="token operator">--</span>with<span class="token operator">-</span>xsl \    <span class="token operator">--</span>with<span class="token operator">-</span>zlib \    <span class="token operator">--</span>with<span class="token operator">-</span>mhash \    <span class="token operator">--</span>with<span class="token operator">-</span>mysqli \    <span class="token operator">--</span>with<span class="token operator">-</span>png<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib \    <span class="token operator">--</span>with<span class="token operator">-</span>jpeg<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib\    <span class="token operator">--</span>with<span class="token operator">-</span>freetype<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib \    <span class="token operator">--</span>enable<span class="token operator">-</span>mysqlnd \    <span class="token operator">--</span>enable<span class="token operator">-</span>bcmath \    <span class="token operator">--</span>enable<span class="token operator">-</span>libxml \    <span class="token operator">--</span>enable<span class="token operator">-</span>inline<span class="token operator">-</span>optimization \    <span class="token operator">--</span>enable<span class="token operator">-</span>gd<span class="token operator">-</span>jis<span class="token operator">-</span>conv \    <span class="token operator">--</span>enable<span class="token operator">-</span>mbregex \    <span class="token operator">--</span>enable<span class="token operator">-</span>mbstring \    <span class="token operator">--</span>enable<span class="token operator">-</span>opcache \    <span class="token operator">--</span>enable<span class="token operator">-</span>pcntl \    <span class="token operator">--</span>enable<span class="token operator">-</span>shmop \    <span class="token operator">--</span>enable<span class="token operator">-</span>soap \    <span class="token operator">--</span>enable<span class="token operator">-</span>sockets \    <span class="token operator">--</span>enable<span class="token operator">-</span>sysvsem \    <span class="token operator">--</span>enable<span class="token operator">-</span>xml \    <span class="token operator">--</span>enable<span class="token operator">-</span>zip \    <span class="token operator">--</span>enable<span class="token operator">-</span>calendar \    <span class="token operator">--</span>enable<span class="token operator">-</span>intl \    <span class="token operator">--</span>enable<span class="token operator">-</span>exif</code></pre><p>然后编译安装大概10分钟</p><p>make</p><p>make install</p><p>拷贝开发配置到安装目录</p><p>cp php.ini-development /usr/local/php/etc/php.ini</p><p>进入安装目录</p><p>cd /usr/local/php/etc/</p><p>复制一份配置文件</p><p>cp php-fpm.conf.default php-fpm.conf</p><p>拷贝启动脚本到指定目录</p><p>cp /root/php-7.3.15/sapi/fpm/php-fpm.service /usr/lib/systemd/system/</p><p>修改配置文件名</p><p>cd /usr/local/php/etc/php-fpm.d</p><p>cp <a href="http://www.conf.default/" target="_blank" rel="noopener">www.conf.default</a> <a href="http://www.conf/" target="_blank" rel="noopener">www.conf</a></p><h2 id="启动PHP"><a href="#启动PHP" class="headerlink" title="启动PHP"></a>启动PHP</h2><p>systemctl start php-fpm</p><p>允许自启</p><p>systemctl enable php-fpm</p><p>查看状态</p><p>systemctl status php-fpm</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212410.png"><br>查看进程</p><p>ps -ef|grep php-fpm</p><p>查看端口</p><p>ss -lntup|grep 9000</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux下安装nginx服务器详细教程</title>
      <link href="/posts/a7f9.html"/>
      <url>/posts/a7f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先安装centos的扩展源"><a href="#首先安装centos的扩展源" class="headerlink" title="首先安装centos的扩展源"></a>首先安装centos的扩展源</h2><p><code>yum install epel-release</code></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p><code>yum install nginx -y</code></p><p>查看版本号，开启nginx，查看进程<br><code>nginx –v</code><br><code>systemctl start nginx</code><br><code>ps -ef|grep nginx</code></p><p>设置开机启动</p><p><code>systemctl enable nginx</code></p><p>查看配置文件cd /ect/nginx</p><p>（安装vim查看命令yum install vim -y）</p><p><code>vim nginx.conf</code></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211436.png"><br>默认端口是80，网页内容在root  /usr/share/nginx/html;</p><p>浏览器输入ip即可进入nginx默认首页</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211456.png"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>进入nginx官网，下载最新版</p><p>wget <a href="http://nginx.org/download/nginx-1.17.8.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.17.8.tar.gz</a></p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211510.png"><br>安装必要插件</p><p>yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</p><p>gcc 它可以编译 C,C++,Ada,Object C和Java等语言</p><p>pcre pcre-devel pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式，所以需要安装pcre库</p><p>zlib zlib-devel zlib库提供了很多种压缩和解压缩方式nginx使用zlib对http包的内容进行gzip</p><p>openssl openssl-devel openssl保证web通信</p><p>解压tar -zxvf nginx-1.17.8.tar.gz</p><p>进入到 nginx-1.17.8文件夹下面，制定安装路径</p><p>./configure –prefix=/software/nginx</p><p>编译make</p><p>安装make install</p><p>进入到安装nginx目录下面的sbin启动</p><p>./nginx</p><p>浏览器输入ip即可进入nginx默认首页</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211528.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java查表法实现十进制转化成其它进制</title>
      <link href="/posts/7a9c.html"/>
      <url>/posts/7a9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="进制转换原理"><a href="#进制转换原理" class="headerlink" title="进制转换原理"></a>进制转换原理</h2><p>首先了解十进制转化成二级制的原理</p><p>156的二进制为：<br> 156 % 2 = 78 …… 0<br>  83   % 2 = 39 …… 0<br> 39   % 2 = 19 …… 1<br> 19   % 2 = 9   …… 1<br> 9     % 2 = 4   …… 1<br> 4     % 2 = 2   …… 0<br> 2     % 2 = 1   …… 0<br> 1     % 2 = 0   …… 1           从下到上看即为 10011100</p><p>100111000转八进制实际上就是<br> 00-000-000-000-000-000-000-000-010-011-100<br> 倒数第一组数110 的十进制即：4<br> 倒数第二组数011 的十进制即：3<br> 倒数第三组数010 的十进制即：2        从下到上看即为 234</p><p>156的八进制为234</p><p>理十六进制的数<br> 0000-0000 0000-0000 0000-0000 1001-1100<br> 倒数第一组数1100的十进制为：12即C<br> 倒数第二组数1001的十进制为：9             9C</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211935.png"><br>倒数第一组数可以看成和1111“与”运算后得出1100，的十进制为12 即为C</p><p>然后右移四位</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804211952.png"><br>倒数第二组数可以看成和1001“与”原酸后得出1001，的十进制即9</p><h2 id="在代码中定义一个函数实现"><a href="#在代码中定义一个函数实现" class="headerlink" title="在代码中定义一个函数实现"></a>在代码中定义一个函数实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">,</span><span class="token keyword">int</span> move<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果是零输出零，结束</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tables <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bottle <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">char</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span>bottle<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个局部变量，从数组后面开始存放数据</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span>num <span class="token operator">&amp;</span> base<span class="token punctuation">;</span>            bottle<span class="token punctuation">[</span><span class="token operator">--</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> tables<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>            num <span class="token operator">=</span> num <span class="token operator">>>></span> move<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>position<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>bottle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bottle<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212004.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804212017.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置SSL证书,提高网络安全性</title>
      <link href="/posts/a41d.html"/>
      <url>/posts/a41d.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先区别Http与Https"><a href="#首先区别Http与Https" class="headerlink" title="首先区别Http与Https"></a>首先区别Http与Https</h2><p> HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><p>配置 HTTPS 要用到私钥 example.key 文件和 example.crt 证书文件 </p><h2 id="example-key-文件和-example-crt-证书文件"><a href="#example-key-文件和-example-crt-证书文件" class="headerlink" title="example.key 文件和 example.crt 证书文件"></a>example.key 文件和 example.crt 证书文件</h2><p>CSR：Cerificate Signing Request，证书签署请求文件，里面包含申请者的 DN（Distinguished Name，标识名）和公钥信息，在第三方证书颁发机构签署证书的时候需要提供。证书颁发机构拿到 CSR 后使用其根证书私钥对证书进行加密并生成 CRT 证书文件，里面包含证书加密信息以及申请者的 DN 及公钥信息</p><p>Key：证书申请者私钥文件，和证书里面的公钥配对使用，在 HTTPS 『握手』通讯过程需要使用私钥去解密客戶端发來的经过证书公钥加密的随机数信息，是 HTTPS 加密通讯过程非常重要的文件，在配置 HTTPS 的時候要用到网络中有许多地方可以申请免费的证书，比如：</p><p>Let’s Encrypt     官网：<a href="https://letsencrypt.org/" target="_blank" rel="noopener">https://letsencrypt.org</a></p><p>阿里云证书      官网：<a href="https://common-buy.aliyun.com/?commodityCode=cas" target="_blank" rel="noopener">https://common-buy.aliyun.com/?commodityCode=cas</a></p><p>Freessl  官网：<a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a></p><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>我是在阿里云上免费申请的</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210306.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210331.png"><br>申请证书大概10分钟就可以审核通过，然后就是下载证书，选择nginx</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210350.png"></p><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>然后把下载下来的两个文件放进nginx的根目录路</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210505.png"></p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>然后进入nginx.conf中配置</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>        listen       443 ssl<span class="token punctuation">;</span>        server_name  ythan.top<span class="token punctuation">;</span>        ssl_certificate      ythan.top.pem<span class="token punctuation">;</span>        ssl_certificate_key  ythan.top.key<span class="token punctuation">;</span>        ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>        ssl_session_timeout  5m<span class="token punctuation">;</span>        ssl_ciphers  HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span>        root /www/wordpress<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            index  index.php index.html index.htm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span><span class="token punctuation">{</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.php<span class="token punctuation">)</span><span class="token punctuation">{</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.php<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.php<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        rewrite /wp-admin$ <span class="token variable">$scheme</span>://<span class="token variable">$host</span><span class="token variable">$uri</span>/ permanent<span class="token punctuation">;</span>        location ~ \.php$ <span class="token punctuation">{</span>            fastcgi_pass   127.0.0.1:9000<span class="token punctuation">;</span>            fastcgi_index  index.php<span class="token punctuation">;</span>            fastcgi_param  SCRIPT_FILENAME  /scripts<span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>            include        fastcgi.conf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><p>记得打开服务器的443端口号</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210525.png"><br>如果再次进去你的网站是自动下载一个php文件，是因为chrome的缓存导致，这个问题折腾了我好几个小时，然后如果你原网站虽然有证书，但是显示不安全的话就是应为你网站当中存在一些图片来自http中，修改一下图片的来源即可。</p><p>没有证书和有证书相比较的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210550.png"><br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804210609.png"></p><p>最后一点，把网站强制跳转到https的链接中，在nginx.conf配置文件中加入以下一段代码：</p><pre class=" language-bash"><code class="language-bash">rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress固定链接后404的解决方法</title>
      <link href="/posts/a485.html"/>
      <url>/posts/a485.html</url>
      
        <content type="html"><![CDATA[<p>一般Wordpress自带的链接是一大串数字加符号，不美观也不明确，一般要设置成固定链接，而设置成功后大部分情况访问文章，子链接都会出现404界面，我找了网上的资料，才知道需要配置伪静态链接， 一般的大型网站系统，都依赖伪静态。如果服务器的伪静态没有配置好，访问部分链接就会出现 404 的情况。</p><p>解决方法：</p><p>在nginx安装目录找到nginx的配置文件即nginx.conf ，然后进行如下配置就好</p><pre class=" language-bash"><code class="language-bash">location / <span class="token punctuation">{</span>            index  index.php index.html index.htm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.html<span class="token punctuation">)</span><span class="token punctuation">{</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.html <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>-f <span class="token variable">$request_filename</span>/index.php<span class="token punctuation">)</span><span class="token punctuation">{</span>                     rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> <span class="token variable">$1</span>/index.php<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-f <span class="token variable">$request_filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      rewrite <span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /index.php<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        rewrite /wp-admin$ <span class="token variable">$scheme</span>://<span class="token variable">$host</span><span class="token variable">$uri</span>/ permanent<span class="token punctuation">;</span></code></pre><p>重启nginx：</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804205609.png"><br>现在访问文章，子链接就不会出现404界面了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux系统中安装Tomcat详细教程</title>
      <link href="/posts/753a.html"/>
      <url>/posts/753a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>首先在官网下载jdk和Tomcat的压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215928.png"></p><p>这里下载jdk-8u241-linux-x64 .tar.gz</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220750.png"><br>和apache-tomcat-8.5.50.tar.gz</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220808.png"></p><h2 id="二、解压jdk和apache压缩包"><a href="#二、解压jdk和apache压缩包" class="headerlink" title="二、解压jdk和apache压缩包"></a>二、解压jdk和apache压缩包</h2><p>tar –zxvf  jdk-8u241-linux-x64 .tar.gz</p><p>把jdk放到/usr/local/目录下，并删除原本的jdk压缩包</p><p>mv jdk1.8.0_241/ /usr/local/</p><p>rm jdk-8u241-linux-x64 .tar.gz</p><p>解压并删除原压缩包</p><p>tar –zxvf  apache-tomcat-8.5.50.tar.gz</p><p>rm apache-tomcat-8.5.50.tar.gz</p><p>重命名</p><p>mv apache-tomcat-8.5.50.tar.gz  tomcat</p><p>用pwd命令查看jdk目录</p><p>cd  /usr/local/jdk1.8.0_241</p><h2 id="三、配置运行环境"><a href="#三、配置运行环境" class="headerlink" title="三、配置运行环境"></a>三、配置运行环境</h2><p>编辑/etc/profile文件</p><p>vim /etc/profile</p><p>在最后加入以下代码，配置jdk的运行环境</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/jdk1.8.0_241<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span><span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.java:<span class="token variable">$JAVA_HOME</span>/lib/tool.jar</code></pre><p>重启服务器让它生效，输入java –version检查是否安装成功<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220821.png"><br>在服务器上开放80端口，进入tomcat服务器配置为80端口<br><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220829.png"><br>vim tomcat/conf/server.xml</p><p>然后进入tomcat的bin目录下startup.sh开启服务器。</p><p>./ startup.sh</p><p>输入服务器ip号可以进入tomcat的默认首页了。</p><p>网页所在目录为</p><p>tomcat/webapps/ROOT/index.jsp</p><p>可以删除里面的内容自己上传自己的网站到这个目录下，通过服务器访问。记得开启服务器端口号</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804220837.png"><br>提示:<br>rm –rf ./*         -r代表删除  -f代表强制删除   ./代表当前目录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据安全和数据备份的重要性</title>
      <link href="/posts/16e4.html"/>
      <url>/posts/16e4.html</url>
      
        <content type="html"><![CDATA[<p>我之前是在云服务器自己搭的一个博客网站里面写文章,2020/2/21下午，我再次进入我的博客，发现需要重新安装Wordpress，我以为安装完就可进入我的博客了，没想到安装完，里面是空的，我才发现我的数据库表全部被删了，导致我之前写的文章，资料全部没了。我还试图通过阿里云的工程师帮我找回，结果并没有</p><p><img src="https://cdn.jsdelivr.net/gh/guixinchn/image/blog/loading.gif" data-original="https://cdn.jsdelivr.net/gh/guixinchn/image/before/20200804215148.jpg"><br>吸取教训,我修改了数据库默认3306的端口，修改了ssh默认22的端口，并且密码都加长加特殊符号，设置外网ping不到本地地址， 至此我才真正意识到数据的安全和数据备份的重要性，吸取教训！！！！ </p><p>大家也可以去看看的博客:<br><a href="https://ythan.top/" target="_blank" rel="noopener">https://ythan.top</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> 数据安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
